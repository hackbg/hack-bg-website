{"hash":"bc8b05561a8911a50351d81cc59ff4b267673cae","data":{"post":{"id":"533","title":"Building Voting æpp with Sophia ML on æternity blockchain","date":"2019-01-23T20:11:11","content":"\n<p>Time is passing by and we are getting more experienced in writing smart contracts with Sophia ML language on æ<g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\">ternity</g> blockchain.</p>\n\n\n\n<p>In this tutorial, I&#8217;d like to share with you a simple voting decentralized <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aepp</g> solution that we&#8217;ve built during the æpps summit in Turkey, which I took part in.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"960\" height=\"540\" src=\"https://hack.bg/wp-content/uploads/2019/01/aepps-summit.jpg\" alt=\"\" class=\"wp-image-542\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/aepps-summit.jpg 960w, https://hack.bg/wp-content/uploads/2019/01/aepps-summit-300x169.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/aepps-summit-768x432.jpg 768w\" sizes=\"(max-width: 960px) 100vw, 960px\" /><figcaption>photo by nikita fuchs</figcaption></figure></div>\n\n\n\n<p>This was one of my first times interacting with Sophia ML smart contracts, and while at the æpps summit I&#8217;ve gathered some cool and enthusiastic people, and made ourselves sort of a studying group. We decided to brainstorm and learn together while developing this voting <g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\">aepp</g>. This is the short summary of what we&#8217;ve decided our voting <g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"7\" data-gr-id=\"7\">aepp</g> will be doing:</p>\n\n\n\n<ol><li>Add candidates to vote for</li><li>Allow users to give their vote for a certain candidate</li><li>Count the votes that every candidate gathered</li></ol>\n\n\n\n<p class=\"note\">You can <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">try</g> push the <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aepp&#8217;s</g> functionalities further, with more sophisticated functions and use case, you can try doing it <g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"7\" data-gr-id=\"7\">yourself,</g> <g class=\"gr_ gr_25 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"25\" data-gr-id=\"25\">like</g> we did. Try it &#8211; its fun.</p>\n\n\n\n<h2>Setting up project and development <g class=\"gr_ gr_109 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace gr-progress\" id=\"109\" data-gr-id=\"109\">environment</g></h2>\n\n\n\n<p><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">First</g> we have to initialize our project where we will write <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"4\" data-gr-id=\"4\">the smart</g> contract. In order to do that we will be using <code>forgae</code>. Take a look at the <a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\">Build first </a><g class=\"gr_ gr_92 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"92\" data-gr-id=\"92\"><a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\">aeternity</a></g><a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\"> application with Sophia ML tutorial</a> and follow the steps to initialize your project.</p>\n\n\n\n<h2>Smart contract</h2>\n\n\n\n<p>As you probably already know (if you&#8217;ve followed the previous tutorial), in <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">Sophia</g> ML we have a <strong>state</strong> which is the place where we store data on-chain, and it is the only thing in the smart contract that can be mutated (overwritten).</p>\n\n\n\n<p>The first thing we do is to define our variables and types that we are going to use in the smart contract. And <g class=\"gr_ gr_217 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"217\" data-gr-id=\"217\">the </g><code>init()</code><g class=\"gr_ gr_217 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"217\" data-gr-id=\"217\"> function</g> which is the constructor basically, if we compare this to a Solidity smart contract.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>contract Vote =\n   type candidate = address\n   type votes = list(address)\n\n   record state = \n      { vote : map(candidate, votes) }\n\n   public function init() : state = \n      { vote = { } }</code></pre>\n\n\n\n<p>We are defining <g class=\"gr_ gr_263 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"263\" data-gr-id=\"263\">the </g><code>candidate</code><g class=\"gr_ gr_263 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"263\" data-gr-id=\"263\"> type</g> as address, and votes as a <strong>list</strong> of addresses. And the <code>state</code> record will be storing a map (key-value-pair) of <code>candidate</code> to <code>votes</code>.<br></p>\n\n\n\n<p><del>Starting with the first functionality for the aepp &#8211; adding candidates:</del></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><del>  public stateful function add_candidate(candidate: address) : bool =       is_candidate(candidate)       true</del></code></pre>\n\n\n\n<p><del>What this does is passing the candidate to the </del><code><del>is_candiate()</del></code><del> function &#8211; taking a candidate&#8217;s address as a parameter, checking if there is a candidate defined at with this address and saving it to the </del><strong><del>votes</del></strong><del> mapping in the state with the initial empty list of voters if not.</del><br></p>\n\n\n\n<p><del>Here are the helper functions we are using for this:</del></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><del>   private stateful function is_candidate(candidate: address) =       let candidate_found = lookupByAddress(candidate, state.votes, { voters = [] })       if (size(candidate_found.voters) == 0)          put(state{             votes[candidate] = { voters = [] } })    private function lookupByAddress(k : address, m, v) =       switch(Map.lookup(k,m))          None => v          Some(x) => x</del></code></pre>\n\n\n\n<p>We are doing this because in Sophia ML we don&#8217;t have a default value of 0x0/false as in Solidity for example. So, in order for us to cast a vote, we need to first have added the candidates which we can vote for.</p>\n\n\n\n<p class=\"note\">If we don&#8217;t add the candidate first, before voting, we will hit <code>out of gas</code> error.</p>\n\n\n\n<p>Next we create the vote function which looks like this:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>public stateful function vote(vote_for: candidate) =\n      put(state{ vote[vote_for = []] @ vs = Call.caller :: vs })</code></pre>\n\n\n\n<p>We access the transaction initiator&#8217;s address by the <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">built </g><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\"><g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">in</g> </g><code>Call.caller</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> and</g> prepend <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">it </g><code>::</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> to</g> the current list of voters. Using this <g class=\"gr_ gr_23 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"23\" data-gr-id=\"23\">syntx</g> we <g class=\"gr_ gr_32 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"32\" data-gr-id=\"32\">dont</g> need to worry whether the candidate was initialized or not.</p>\n\n\n\n<p><g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"9\" data-gr-id=\"9\">Last</g> thing is the get votes count function.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>public function count_votes(count_for : candidate) =\n      length(state.vote[count_for = []])</code></pre>\n\n\n\n<p>Here we are using a custom <code>length</code> function which we define as a helper function below. Here is the code and below we can see the explanation.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>private function length(l : list('a)) : int = length'(l, 0)\n</code></pre>\n\n\n\n<p>This is where things get a bit more complicated, so I will try to explain what is happening here.</p>\n\n\n\n<p>Since in Sophia ML we don&#8217;t have <code>.count</code> or <code>.length</code> to get the list length, we need to make ourselves a helper function which will make a recursion and will iterate over the list while incrementing a counter.</p>\n\n\n\n<p>The <code>length</code> function is defined to accept a list <g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"9\" data-gr-id=\"9\">of </g><code>'a</code><g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"9\" data-gr-id=\"9\"> which</g> is the convention for a generic <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">type,</g> and a return <g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"11\" data-gr-id=\"11\">type </g><code>int</code><g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"11\" data-gr-id=\"11\"> .</g> In the function&#8217;s <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">body</g> we are calling <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"10\" data-gr-id=\"10\">the </g><code>length'</code><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\"> </g><g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"7\" data-gr-id=\"7\"><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\">function</g>,</g> while passing the list and an initial value for the counter.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>private function length'(l : list('a), x : int) : int =       switch(l)          [] => x          _ :: l' => length'(l', x + 1)</code></pre>\n\n\n\n<p>And here the magic happens, we use <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"6\" data-gr-id=\"6\">the </g><code>switch</code><g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"6\" data-gr-id=\"6\"> statement</g> with 2 cases <code>[] => x</code> &#8211; which returns the value of the counter and breaks the recursion if the list is empty. And <code>_ :: l' => length'(l', x+1)</code> &#8211; meaning we are using a pattern matching and we are separating the first element from the list and the remainder and then recursively passing the list&#8217;s remainder to the same <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">function,</g> while incrementing the counter.</p>\n\n\n\n<p>The whole smart contract code looks like this in the end</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/d05aeb76c59e2098d54dc900e94aaa41.js\"></script><figcaption>Sophia ML basic voting aepp</figcaption></figure>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>It is fairly simple to create a basic aepp on æternity blockchain using Sophia ML. In our case with the ae-vote we stumbled upon some tricky parts like the recursive iteration, we had to make above, but when you familiarize yourself with the language it is easier.</p>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<ul><li><a href=\"https://github.com/mradkov/ae-vote\">Github repo of the project</a></li><li><a href=\"https://github.com/aeternity/protocol/blob/master/contracts/sophia.md\">Sophia documentation</a></li><li><a href=\"https://dev.aepps.com/\">æternity documentation</a></li></ul>\n","excerpt":"<p>Time is passing by and we are getting more experienced in writing smart contracts with Sophia ML language on æternity blockchain. In this tutorial, I&#8217;d like to share with you a simple voting decentralized aepp solution that we&#8217;ve built during the æpps summit in Turkey, which I took part in. This was one of my [&hellip;]</p>\n","link":"https://hack.bg/blog/tutorials/building-voting-aepp-with-sophia-ml-on-aeternity-blockchain/","modified":"2019-01-25T13:39:50","featuredMedia":{"sourceUrl":"https://hack.bg/wp-content/uploads/2019/01/aepps-summit.jpg","altText":"","mimeType":"image/jpeg","mediaDetails":{"width":960,"height":540}},"categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/","count":8},{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/","count":12}],"tags":[{"id":"22","title":"Aeternity","path":"/tag/aeternity/","count":13},{"id":"13","title":"Blockchain","path":"/tag/blockchain/","count":48},{"id":"20","title":"Smart Contracts","path":"/tag/smart-contracts/","count":20},{"id":"74","title":"Sophia ML","path":"/tag/sophia-ml/","count":3},{"id":"75","title":"Tutorial","path":"/tag/tutorial/","count":2}],"author":{"name":"Milen Radkov","path":"/author/milen/"},"metadata":{"postAudioId":[],"mediumPost":["O:11:\"Medium_Post\":11:{s:16:\"author_image_url\";s:75:\"https://cdn-images-1.medium.com/fit/c/400/400/1*uTloDoy725Hwdw-PyJg0Yw.jpeg\";s:10:\"author_url\";s:26:\"https://medium.com/@radkov\";s:11:\"byline_name\";N;s:12:\"byline_email\";N;s:10:\"cross_link\";s:3:\"yes\";s:2:\"id\";s:12:\"1fada2b1e85c\";s:21:\"follower_notification\";s:3:\"yes\";s:7:\"license\";s:19:\"all-rights-reserved\";s:14:\"publication_id\";s:12:\"6c324f156ae9\";s:6:\"status\";s:5:\"draft\";s:3:\"url\";s:39:\"https://medium.com/@radkov/1fada2b1e85c\";}"],"postViewsCount":["4023"],"rankMathFocusKeyword":["voting smart contract aeternity"],"rankMathTitle":[],"rankMathDescription":["Create a simple voting aepp (æpp) on aeternity blockchain using Sophia ML smart contract"]}}},"context":{}}