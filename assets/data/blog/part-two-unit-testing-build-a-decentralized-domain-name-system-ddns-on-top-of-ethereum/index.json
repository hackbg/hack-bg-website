{"hash":"bc8b05561a8911a50351d81cc59ff4b267673cae","data":{"post":{"id":"286","title":"[Part two &#8211; Unit Testing] Build a Decentralized Domain Name System (DDNS) on top of Ethereum","date":"2018-12-29T09:30:09","content":"\n<p class=\"has-drop-cap\">Whether you develop software yourself or <a href=\"https://hack.bg/#contact\">hire developers</a> to build it for you, you expect them to do everything necessary, so you can get functional and bug-free software. Sometimes, however, doing the right thing takes additional time, which is often being skipped due to all the deadlines, budget or some other reason.</p>\n\n\n\n<p>In blockchain development as in the traditional software development, unit testing reduces the number of bugs, making it &#8220;a must&#8221; to effective software development. </p>\n\n\n\n<p>In this article, we are going to look at this type of testing &#8211; unit testing &#8211; and why you should not cut corners and skip this part of the software development cycle.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"683\" src=\"https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-1024x683.jpg\" alt=\"Unit Testing Decentralized Domain Name System\" class=\"wp-image-386\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-1024x683.jpg 1024w, https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-300x200.jpg 300w, https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-768x512.jpg 768w, https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-864x576.jpg 864w, https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack.jpg 1200w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Unit Testing Decentralized Domain Name System</figcaption></figure></div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>This is part two of our series of building decentralized domain name system on top of <a href=\"https://ethereum.org/\">Ethereum</a>, where we&#8217;ll get familiar with good practices and techniques during <g class=\"gr_ gr_34 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"34\" data-gr-id=\"34\">unit</g> testing process and deployment of a decentralized application (<g class=\"gr_ gr_14 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"14\" data-gr-id=\"14\">dApp</g>) development lifecycle.</p>\n\n\n\n<p>In the first part, we developed a decentralized application consisted of Ethereum smart contracts, that are acting as a decentralized domain name system. So, at this point, a user should be able to buy, renew, edit and transfer a domain name according to our <g class=\"gr_ gr_191 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"191\" data-gr-id=\"191\">dApp&#8217;s</g> logic. If you haven&#8217;t checked out <a href=\"https://hack.bg/blog/tutorials/part-one-smart-contracts-build-a-decentralized-domain-name-system-ddns-on-top-of-ethereum/\">the first part of our tutorial</a> yet &#8211; this is probably the time to do so.</p>\n\n\n\n<p>To sum up:</p>\n\n\n\n<ul><li>Unit tests are code that tests your contract code</li><li>It executes your contract with predefined function calls (test cases)</li><li>It compares the result of the execution with the expected result for this case</li></ul>\n\n\n\n<h2>Tooling</h2>\n\n\n\n<p>The most popular and commonly used way of creating unit tests for Ethereum smart contracts written in Solidity is by using the following tool-set.</p>\n\n\n\n<ol><li><a href=\"https://truffleframework.com/truffle\">Truffle</a> &#8211; is the most popular development framework for Ethereum. <ul><li>Built-in smart contract compilation, linking, deployment and binary management.</li><li>Automated contract testing for rapid development.</li><li>Scriptable, extensible deployment &amp; migrations framework.</li><li>Network management for deploying to any number of public &amp; private networks.</li><li>Package management with EthPM &amp; NPM, using the <a href=\"https://github.com/ethereum/EIPs/issues/190\">ERC190</a> standard.</li><li>Interactive console for direct contract communication.</li><li>Configurable build pipeline with support for tight integration.</li><li>External script runner that executes scripts within a Truffle environment. </li></ul></li><li><a href=\"https://truffleframework.com/ganache\">Ganache</a> &#8211; lets you quickly fire up a personal Ethereum blockchain which you can use to run tests, execute commands, and inspect state while controlling how the chain operates.</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Without further due, let&#8217;s jump into setting up our project and environment for unit testing.<br></p>\n\n\n\n<p>First if we haven&#8217;t already, we need to install Truffle globally (-g)</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g truffle</code></pre>\n\n\n\n<p>and Ganache &#8211; It is available as both a desktop application as well as a command-line tool (formerly known as the TestRPC). For the purpose of our tutorial we are going to use the command-line tool.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g ganache-cli</code></pre>\n\n\n\n<p><g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del\" id=\"5\" data-gr-id=\"5\">Okey</g>, now we are good to go. There is a tutorial for using truffle for <g class=\"gr_ gr_37 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins doubleReplace replaceWithoutSep\" id=\"37\" data-gr-id=\"37\">unit</g> testing in their website <a href=\"https://truffleframework.com/tutorials/testing-for-throws-in-solidity-tests\">here</a>, but <g class=\"gr_ gr_18 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"18\" data-gr-id=\"18\"><code>throw</code></g> function used there is now deprecated and replaced by <code>revert()</code>, <code>require()</code> and <code>assert()</code>. So it will be somewhat helpful if you know how the last work.</p>\n\n\n\n<p>Nevertheless, let us verify our knowledge by a quick lookup at the <a href=\"https://solidity.readthedocs.io/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions\">Solidity documentation</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Error handling: Assert, Require, Revert and Exceptions<br> Solidity uses state-reverting exceptions to handle errors. Such an exception will undo all changes made to the state in the current call (and all its sub-calls) and also flag an error to the caller. The convenience functions <code>assert</code> and <code>require</code> can be used to check for conditions and throw an exception if the condition is not met. The <code>assert</code> function should only be used to test for internal errors, and to check invariants. The <code>require</code>  function should be used to ensure valid conditions, such as inputs, or  contract state variables are met, or to validate return values from  calls to external contracts. If used properly, analysis tools can evaluate your contract to identify  the conditions and function calls which will reach a failing <code>assert</code>.  Properly functioning code should never reach a failing assert  statement; if this happens there is a bug in your contract which you  should fix.<br> There are two other ways to trigger exceptions: The <code>revert</code> function can be used to flag an error and revert the current call. It is possible to provide a string message containing details about the error that will be passed back to the caller.</p><cite>Solidity documentation</cite></blockquote>\n\n\n\n<h2>Project initialization</h2>\n\n\n\n<p class=\"note\"><strong>Note:</strong> If you have initialized your project with <code>truffle init</code> you can skip this part.</p>\n\n\n\n<p>In the first part we covered mainly the code, but not the environment, IDE and project setup, but for our tests to run properly we will need that set.</p>\n\n\n\n<p>Setting up a new truffle project:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>truffle init</code></pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"682\" height=\"564\" src=\"https://hack.bg/wp-content/uploads/2018/12/decentralized-dns-truffle-init.png\" alt=\"Decentralized Domain Name System - project initialization\" class=\"wp-image-345\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/decentralized-dns-truffle-init.png 682w, https://hack.bg/wp-content/uploads/2018/12/decentralized-dns-truffle-init-300x248.png 300w\" sizes=\"(max-width: 682px) 100vw, 682px\" /><figcaption>Decentralized Domain Name System &#8211; project initialization</figcaption></figure></div>\n\n\n\n<p>As you notice after project initialization Truffe adds some files into our project directory: </p>\n\n\n\n<ul><li><code>./contracts</code> &#8211; directory where our smart contracts should be stored.</li><li><code>./migrations</code> &#8211; directory for placing our migrations scripts.</li><li><code>./test</code> &#8211; directory for test files for testing our decentralized application.</li><li><code>./truffle-config.js</code> &#8211; this is our project&#8217;s truffle configuration file.</li></ul>\n\n\n\n<h2>Writing Unit Tests</h2>\n\n\n\n<p>Writing unit tests is a must for decentralized applications development life-cycle, so we can be sure the application works <strong>the way it is designed to</strong>.</p>\n\n\n\n<p>So Truffle gives us couple of possible options to write tests &#8211; in JavaScript, TypeScript (testing your contract via web3) or Solidity (testing your contract from another contract). In our tutorial we will cover unit testing with JavaScript which its the most adopted way of doing so in my opinion.</p>\n\n\n\n<p>All contracts in truffle&#8217;s contracts folder are accessible and are published automatically for our tests. Our unit tests should be placed in the <code>./test</code> folder and must end with <code>.js</code> extension so it can be recognized as an automated test by <a href=\"https://mochajs.org/\">Mocha</a> framework which Truffle uses for testing. For the assertions Truffle uses <a href=\"https://www.chaijs.com/\">Chai</a>, which you may or may not be familiar with.</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Chai is a BDD / TDD assertion library for <a href=\"http://nodejs.org\">node</a> and can be paired with any javascript testing framework.</p><cite>Chaijs</cite></blockquote>\n\n\n\n<p>Truffle&#8217;s got well structured, extensive <a href=\"https://truffleframework.com/docs/truffle/overview\">documentation</a> which you can read upon and get familiar with, if you want to.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<figure class=\"wp-block-pullquote is-style-default\"><blockquote><p>So starting with the structure of a unit test case.</p></blockquote></figure>\n\n\n\n<p>A test is a call of a contract function with predefined (hard-coded) arguments and a predefined expected output. And the expected output should be the correct way the contract functions.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What makes Truffle tests different from that of Mocha is the <code>contract()</code> function: This function works exactly like <code>describe()</code> except it enables Truffle&#8217;s <a href=\"https://truffleframework.com/docs/truffle/testing/testing-your-contracts#clean-room-environment\">clean-room features</a>.</p><cite>Truffle documentation</cite></blockquote>\n\n\n\n<p>Each group of tests is ran with clean contract state, meaning that for every test new contract is being published.</p>\n\n\n\n<p>Here is how our DDNSService.test.js should look like:</p>\n\n\n\n<pre><code>\n\nconst DDNSService = artifacts.require('../contracts/DDNSService.sol')\n\n// place helpers here\n\ncontract('DDNSService', ([owner, wallet, anotherAccount]) =&gt; {\n\tlet contractInstance;\n\tlet events = [];\n\n\tbefore(() =&gt; {\n\t\tweb3.eth.defaultAccount = owner;\n\t});\n\n\tbeforeEach(async () =&gt; {\n\t\tcontractInstance = await DDNSService.new();\n\t});\n\n\tafterEach(() =&gt; {\n\t\tif (events.length) {\n\t\t\tevents.forEach((ev) =&gt; {\n\t\t\t\tev.stopWatching();\n\t\t\t});\n\n\t\t\tevents = [];\n\t\t}\n    });\n  \n    it(\"BYTES_DEFAULT_VALUE constant Should have exact value\", async () =&gt; {\n\t\t// Arrange\n\n\t\t// Act\n\t\tconst result = await contractInstance.BYTES_DEFAULT_VALUE();\n\n\t\t// Assert\n\t\tassert.equal(result, '0x00');\n   });\n\n... more tests \n\n});</code></pre>\n\n\n\n<p><br></p>\n\n\n\n<p>In the code above, we&#8217;ve set our contract instance and written the first test, which tests whether the <code>BYTES_DEFAULT_VALUE</code> constant in our smart contract is set to <code>0x00</code>.</p>\n\n\n\n<p>Here is a more sophisticated example &#8211; <i>register Should throw when the sent funds are insufficient</i> &#8211; we are getting the price for the passed domain name, IP, TLD, substract 1 via <code>.minus(1)</code> so we can have a smaller than the actual domain price saved in our <code>currentPrice</code> constant, which we pass as value argument for the domain register via the <code>register()</code> function afterwards. Then we assert whether the call failed with <code>assertRevert</code>.</p>\n\n\n\n<pre><code>it(\"register Should throw when the sent funds are insufficient\", async () =&gt; {\n\t\t// Arrange\n\t\tconst domainName = \"milenradkov\";\n\t\tconst ip = \"127.0.0.1\";\n\t\tconst topLevelDomain = \"com\";\n\t\tconst currentPrice = (await contractInstance.getPrice(domainName)).minus(1);\n\t\t// Act\n\t\tconst result = contractInstance.register(domainName, topLevelDomain, ip, { from: anotherAccount, value: currentPrice });\n\t\t// Assert\n\t\tawait assertRevert(result);\n});</code></pre>\n\n\n\n<p>Unit tests in truffle can be written <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\">using </g><code>.then</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> </g><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\"><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\">or</g> </g><code>await/async</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> style</g>, so it&#8217;s up to the developer&#8217;s preference how to write them.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Testing the contract against the cases we&#8217;ve coded is really simple:</p>\n\n\n\n<p>1. Start <code>ganache-cli</code> in separate terminal/cmd &#8211; this will instantiate our private blockchain which we are going to use for tests.</p>\n\n\n\n<pre><code>ganache-cli</code></pre>\n\n\n\n<p>2. Run <code>truffle test</code> command from the project directory.</p>\n\n\n\n<pre><code>truffle test</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>As you&#8217;ve probably noticed already, we are using the so known AAA (<a href=\"http://wiki.c2.com/?ArrangeActAssert\">Arrange Act Assert</a>) pattern for our unit tests &#8211; it&#8217;s always good to stick to well-formatted code and best practices when you are coding for lots of well-known reasons.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>&#8220;Arrange-Act-Assert&#8221;a pattern for arranging and formatting code in <a href=\"http://wiki.c2.com/?UnitTest\">UnitTest</a> methods: </p><p>Each method should group these functional sections, separated by blank lines: </p><ol><li> <strong>Arrange</strong> all necessary preconditions and inputs.\n</li><li> <strong>Act</strong> on the object or method under test.\n</li><li> <strong>Assert</strong> that the expected results have occurred.\n</li></ol><cite>Arrange-Act-Assert pattern unit test</cite></blockquote>\n\n\n\n<h3>Helpers</h3>\n\n\n\n<p>We are going to need some predefined helpers for some of our next test cases, which names are speaking for what they actually do respectively.</p>\n\n\n\n<pre><code>\n//helpers\nconst assertRevert = require('./utils/assertRevert');\nconst watchEvent = require('./utils/watchEvent');\nconst constants = require('./utils/constants');\nconst increaseTime = require('./utils/increaseTime');</code></pre>\n\n\n\n<h3>Coverage</h3>\n\n\n\n<p>Following this logic here are all the test cases covering most of the edge cases of our decentralized domain name service smart contract functions.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/2470c611a7a3d0be1508ead681929a90.js\"></script><figcaption></figcaption></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Running tests</h2>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"799\" height=\"537\" src=\"https://hack.bg/wp-content/uploads/2018/12/ganache_cli.png\" alt=\"instantiate ganache-cli\" class=\"wp-image-376\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/ganache_cli.png 799w, https://hack.bg/wp-content/uploads/2018/12/ganache_cli-300x202.png 300w, https://hack.bg/wp-content/uploads/2018/12/ganache_cli-768x516.png 768w\" sizes=\"(max-width: 799px) 100vw, 799px\" /><figcaption>instantiate ganache-cli</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"799\" height=\"537\" src=\"https://hack.bg/wp-content/uploads/2018/12/ganache_cli_running.png\" alt=\"ganache-cli running\" class=\"wp-image-377\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/ganache_cli_running.png 799w, https://hack.bg/wp-content/uploads/2018/12/ganache_cli_running-300x202.png 300w, https://hack.bg/wp-content/uploads/2018/12/ganache_cli_running-768x516.png 768w\" sizes=\"(max-width: 799px) 100vw, 799px\" /><figcaption>ganache-cli running</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"843\" height=\"604\" src=\"https://hack.bg/wp-content/uploads/2018/12/truffle_test.png\" alt=\"truffle test - Decentralized Domain Name System using Solidity Smart Contracts on top of Ethereum\" class=\"wp-image-378\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/truffle_test.png 843w, https://hack.bg/wp-content/uploads/2018/12/truffle_test-300x215.png 300w, https://hack.bg/wp-content/uploads/2018/12/truffle_test-768x550.png 768w, https://hack.bg/wp-content/uploads/2018/12/truffle_test-804x576.png 804w\" sizes=\"(max-width: 843px) 100vw, 843px\" /><figcaption>truffle test &#8211; Decentralized Domain Name System using Solidity Smart Contracts on top of Ethereum</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"843\" height=\"604\" src=\"https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing.png\" alt=\"Truffle Test passing - Decentralized Domain Name System using Solidity Smart Contracts on top of Ethereum\" class=\"wp-image-379\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing.png 843w, https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing-300x215.png 300w, https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing-768x550.png 768w, https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing-804x576.png 804w\" sizes=\"(max-width: 843px) 100vw, 843px\" /><figcaption>Truffle Test passing &#8211; Decentralized Domain Name System using Solidity Smart Contracts on top of Ethereum</figcaption></figure></div>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>Unit testing are important when developing smart contracts on Ethereum, as there are lots of vulnerabilities or edge cases that can lead to security flaws or value (ETH) theft.</p>\n\n\n\n<p>In the next few parts we will set up code coverage and continuous integration with Travis CI. </p>\n\n\n\n<p>Also we will look deeper in to the security part of development and testing, tips and tricks and more, so <a href=\"http://eepurl.com/gcxyRj\">stay tuned.</a></p>\n\n\n\n<h3><strong>Useful links</strong></h3>\n\n\n\n<ul><li><a href=\"https://hack.bg/blog/tutorials/part-one-smart-contracts-build-a-decentralized-domain-name-system-ddns-on-top-of-ethereum/\">Part one &#8211; Smart Contracts &#8211; Build Decentralized Domain Name System on top of Ethereum</a></li><li>Part two &#8211; Unit Testing &#8211; [you are here] 🙂</li><li>Part three &#8211; Coming soon &#8230;</li></ul>\n\n\n\n<p><strong> Website</strong>: <a rel=\"noreferrer noopener\" href=\"https://hack.bg\" target=\"_blank\">https://hack.bg</a></p>\n\n\n\n<p><strong>Follow us on social media:</strong></p>\n\n\n\n<ul><li><a rel=\"noreferrer noopener\" href=\"https://twitter.com/hack_bg\" target=\"_blank\">Twitter</a></li><li><a rel=\"noreferrer noopener\" href=\"https://facebook.com/hackbg\" target=\"_blank\">Facebook</a></li><li><a rel=\"noreferrer noopener\" href=\"https://www.linkedin.com/company/hackbg-blockchain-web-software-solutions/\" target=\"_blank\">LinkedIn</a></li><li><a href=\"https://meetup.com/blockchain-developers-meetup-bulgaria\">Blockchain Developers Meetup</a></li></ul>\n","excerpt":"<p>Whether you develop software yourself or hire developers to build it for you, you expect them to do everything necessary, so you can get functional and bug-free software. Sometimes, however, doing the right thing takes additional time, which is often being skipped due to all the deadlines, budget or some other reason. In blockchain development [&hellip;]</p>\n","link":"https://hack.bg/blog/tutorials/part-two-unit-testing-build-a-decentralized-domain-name-system-ddns-on-top-of-ethereum/","modified":"2019-01-09T10:07:23","featuredMedia":{"sourceUrl":"https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack.jpg","altText":"Unit Testing Decentralized Domain Name System","mimeType":"image/jpeg","mediaDetails":{"width":1200,"height":800}},"categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/","count":8}],"tags":[{"id":"13","title":"Blockchain","path":"/tag/blockchain/","count":48},{"id":"12","title":"Ethereum","path":"/tag/ethereum/","count":11},{"id":"20","title":"Smart Contracts","path":"/tag/smart-contracts/","count":20},{"id":"14","title":"Solidity","path":"/tag/solidity/","count":6},{"id":"61","title":"Unit Testing","path":"/tag/unit-testing/","count":1}],"author":{"name":"Milen Radkov","path":"/author/milen/"},"metadata":{"postAudioId":[],"mediumPost":["O:11:\"Medium_Post\":11:{s:16:\"author_image_url\";s:75:\"https://cdn-images-1.medium.com/fit/c/400/400/1*uTloDoy725Hwdw-PyJg0Yw.jpeg\";s:10:\"author_url\";s:26:\"https://medium.com/@radkov\";s:11:\"byline_name\";N;s:12:\"byline_email\";N;s:10:\"cross_link\";s:3:\"yes\";s:2:\"id\";s:12:\"7a71d70af86f\";s:21:\"follower_notification\";s:3:\"yes\";s:7:\"license\";s:13:\"public-domain\";s:14:\"publication_id\";s:12:\"6c324f156ae9\";s:6:\"status\";s:5:\"draft\";s:3:\"url\";s:39:\"https://medium.com/@radkov/7a71d70af86f\";}"],"postViewsCount":["2759"],"rankMathFocusKeyword":["Smart Contract Unit Test"],"rankMathTitle":[],"rankMathDescription":["Unit Testing a Decentralized Domain Name System application build with Solidity smart contracts on top of Ethereum blockchain"]}}},"context":{}}