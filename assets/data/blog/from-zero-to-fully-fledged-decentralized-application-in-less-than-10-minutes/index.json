{"hash":"810fce27972948ee9a391861a2b5ef523a7099fb","data":{"post":{"id":"1667","title":"From zero to a fully-fledged aeternity decentralized application in less than 10 minutes","date":"2020-03-29T21:36:50","content":"\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"453\" src=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-1024x453.png\" alt=\"\" class=\"wp-image-1775\" srcset=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-1024x453.png 1024w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-300x133.png 300w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-768x340.png 768w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-1038x459.png 1038w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h2>Intro</h2>\n\n\n\n<p>Let&#8217;s be honest and put the cards down &#8211; if you really need to build a production-ready decentralized application 10 minutes won&#8217;t be nearly enough for sure, and if you are not familiar with the technology you might need some assistance with the <a href=\"https://hack.bg/dlt-blockchain-development-services/smart-contracts-development/\">smart contracts development</a> and setup.  </p>\n\n\n\n<p>Developing such a <a href=\"https://hack.bg/dlt-blockchain-development-services/decentralized-applications-development/\">decentralized application</a> will be a combination of planning and structuring the architecture of the project, drafting and designing the user interface (UI), writing, testing and deploying the smart contracts needed for the dapp to run its business logic â€¦ and combining all this together. This also involves a wide variety of technology stack options, depending on the desired outcome and use-case.</p>\n\n\n\n<p>For the purpose of this tutorial though, we will develop an app from scratch to a working decentralized application on aeternity blockchain with a simple frontend.</p>\n\n\n\n<p>Now let the timer start:</p>\n\n\n\n<h3>1. Initialize our project</h3>\n\n\n\n<p>We will use the <a href=\"https://github.com/aeternity/aepp-aeproject-js\">aeproject</a> tool which will allow us to easily set up the development environment locally.</p>\n\n\n\n<ul><li>dependencies<ul><li>docker</li><li>npm &amp; node</li></ul></li></ul>\n\n\n\n<p>Install globally</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g aeproject</code></pre>\n\n\n\n<p>Initialize project</p>\n\n\n\n<pre class=\"wp-block-code\"><code>aeproject init</code></pre>\n\n\n\n<h3>2. Write our smart contract(s)</h3>\n\n\n\n<p>In this step, we will develop a simple smart contract that is only storing an integer (number) in its state on the blockchain.</p>\n\n\n\n<p>Let&#8217;s also add a getter method which will allow us to read from the contract state.</p>\n\n\n\n<p>Usually, we will do something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@compiler >= 4\n\ncontract MyContract =\n   record state = { number: int }\n   entrypoint init() : state = { number = 0 }\n   stateful entrypoint set(x: int) = put(state{number = x})\n   stateful entrypoint get() : int = state.number</code></pre>\n\n\n\n<p>In our case, we can further simplify our contract since we are only storing a single integer value. As we know Sophia contracts have restricted mutable state and it is a strongly typed language so we need to define it initially.</p>\n\n\n\n<p>In this case, we can define our <code>state</code> to be of <code>type</code> <code>int</code> as we don&#8217;t need the whole <code>record</code> structure for this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@compiler >= 4\n\ncontract MyContract =\n   type state = int\n   entrypoint init() : state = 0\n   stateful entrypoint set(x: int) = put(x)\n   stateful entrypoint get() : int = state</code></pre>\n\n\n\n<p>Here is the same contract, written in Solidity, on Ethereum blockchain just for comparison if you are more familiar with Solidity &#8230; or not:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pragma solidity >=0.5.0 &lt;0.6.0; \n\ncontract MyContract {\n    uint256 number;\n    constructor() public {\n        number = 0;\n    }\n    function set(uint256 _number) public {\n        number = _number;\n    }\n    function get() public view returns (uint256) {\n        return number;    \n    }\n}</code></pre>\n\n\n\n<h3>3. Deploy</h3>\n\n\n\n<p>In order for us to deploy to an actual <code>testnet</code> or <code>mainnet</code> we need to have some AE tokens on the selected network, so we can pay the mining fee for the transactions we will make to the blockchain.</p>\n\n\n\n<p>Note: We could also deploy it on a local testnet which can be started via <code>aeproject node</code></p>\n\n\n\n<h4>3.1. Create a wallet</h4>\n\n\n\n<p>If we do not yet have a wallet which will be used for deployment we need to generate ourselves one:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>aecli account create &lt;WALLET_NAME></code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Note: To quickly test all of Aeternity's blockchain features from your Terminal, you can Install and use our NodeJS CLI by running:\n\nnpm i -g @aeternity/aepp-cli\naecli --help</code></pre>\n\n\n\n<h4>3.2. Fund the wallet</h4>\n\n\n\n<p>We will get some testnet AE tokens from the <a href=\"https://faucet.testnet.aepps.com\">faucet</a>, so we can deploy the contract.</p>\n\n\n\n<h4>3.3. Get our private key</h4>\n\n\n\n<p>We are going to be deploying via the command-line interface (CLI), so we will need to have our private key to pass it to the deployer.</p>\n\n\n\n<p>Get our private key:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>aecli account address &lt;WALLET_NAME> --privateKey</code></pre>\n\n\n\n<h4>3.4. Deploy to testnet</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>aeproject deploy -n testnet -s &lt;SECRET_KEY> --compiler https://latest.compiler.aepps.com</code></pre>\n\n\n\n<h3>4. Interaction with the contract</h3>\n\n\n\n<p>There are multiple we can interact with our contract. The first and most easier is to use one of the online IDEs available out there &#8211; contracts.aeternity.art, fireeditor etc.</p>\n\n\n\n<h4>4.1. Online IDE.</h4>\n\n\n\n<ol><li>contracts.aeternity.art &#8211; we put our contract code in the editor and we can access our contract by adding the address in the <code>&lt;Address&gt;</code> field so we can interact with it.<br> <code>set</code> &#8211; for setting a new value in the smart contract we have to make a stateful call (which modifies the state and costs gas)<br><code>get</code> &#8211; our getter we can access by calling static function.<br></li><li>fireeditor.nikitafuchs.de &#8211; Same as above we can put our contract code and access the freshly deployed contract <strong>at address</strong>.<br></li></ol>\n\n\n\n<h4>4.2. via the SDK</h4>\n\n\n\n<p>We can access our contract instance via this simple command and start interacting with it.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>await sdk.getContractInstance(CONTRACT_SOURCE, { contractAddress: OUR_CONTRACT_ADDRESS} );</code></pre>\n\n\n\n<p>Of course we will first have to set up our project and intialize the SDK there.</p>\n\n\n\n<h3>5. Fully-fledged Decentralized app</h3>\n\n\n\n<h4>5.1. Set up frontend</h4>\n\n\n\n<p>In order to setup our simple fronted we will use the waellet boilerplate repo which is pre-configured to communicate with the waellet extension and has the aeternity javascript sdk already prepared there. </p>\n\n\n\n<pre class=\"wp-block-code\"><code>git clone https://github.com/waellet/waellet-aepp-boilerplate &amp;&amp; cd\nnpm install</code></pre>\n\n\n\n<h4>5.2. Add the contract interface (or the full contract code)</h4>\n\n\n\n<p>We need to add our contract interface in the app, so we can call the correct methods and encode the transactions properly. This is similar to the ABI in Solidity for example.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"460\" src=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-1024x460.png\" alt=\"\" class=\"wp-image-1763\" srcset=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-1024x460.png 1024w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-300x135.png 300w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-768x345.png 768w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-1038x466.png 1038w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25.png 1310w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>https://github.com/waellet/waellet-aepp-boilerplate/blob/23419a910f668069990f96b775bd119aba70f8d3/src/views/Home/Index.vue#L204-L216</figcaption></figure>\n\n\n\n<h4>5.3. Setup function calls </h4>\n\n\n\n<p>We also need to setup the contract methods calls in the app. </p>\n\n\n\n<h4>5.4. run</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>npm run serve</code></pre>\n\n\n\n<p>We can now access our app at <code>localhost:3000</code>:</p>\n\n\n\n<p>We can interact with the contract with the two sample buttons there.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"909\" src=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-1024x909.png\" alt=\"\" class=\"wp-image-1769\" srcset=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-1024x909.png 1024w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-300x266.png 300w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-768x682.png 768w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-649x576.png 649w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41.png 1376w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n","excerpt":"<p>Intro Let&#8217;s be honest and put the cards down &#8211; if you really need to build a production-ready decentralized application [&hellip;]</p>\n","link":"https://hack.bg/blog/tutorials/from-zero-to-fully-fledged-decentralized-application-in-less-than-10-minutes/","modified":"2020-03-30T08:56:20","featuredMedia":{"sourceUrl":"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2.png","altText":"","mimeType":"image/png","mediaDetails":{"width":2880,"height":1274}},"categories":[{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/","count":13},{"id":"4","title":"Tutorials","path":"/category/tutorials/","count":9}],"tags":[{"id":"22","title":"Aeternity","path":"/tag/aeternity/","count":13},{"id":"67","title":"Decentralized Applications","path":"/tag/decentralized-applications/","count":6},{"id":"74","title":"Sophia ML","path":"/tag/sophia-ml/","count":3},{"id":"75","title":"Tutorial","path":"/tag/tutorial/","count":2}],"author":{"name":"Milen","path":"/author/milen/"},"metadata":{"postAudioId":["9579dff620d238d15091e27cd210e1dd9c922bf1"],"mediumPost":["O:11:\"Medium_Post\":11:{s:16:\"author_image_url\";s:75:\"https://cdn-images-1.medium.com/fit/c/400/400/1*uTloDoy725Hwdw-PyJg0Yw.jpeg\";s:10:\"author_url\";s:26:\"https://medium.com/@radkov\";s:11:\"byline_name\";N;s:12:\"byline_email\";N;s:10:\"cross_link\";s:3:\"yes\";s:2:\"id\";s:12:\"ad0f11f307c0\";s:21:\"follower_notification\";s:3:\"yes\";s:7:\"license\";s:19:\"all-rights-reserved\";s:14:\"publication_id\";s:12:\"6c324f156ae9\";s:6:\"status\";s:5:\"draft\";s:3:\"url\";s:39:\"https://medium.com/@radkov/ad0f11f307c0\";}"],"postViewsCount":["1174"],"rankMathFocusKeyword":["decentralized application"],"rankMathTitle":[],"rankMathDescription":[]}}},"context":{}}