{"hash":"ed8e3edac219dfe6889938c759c086ed55d3744a","data":{"tag":{"title":"Solidity","belongsTo":{"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"date":"2019-05-02T11:46:36","id":"1101","title":"Tips, tricks, and best approaches for developing decentralized applications &#8211; 0x09. [Blockchain Developers Meetup]","path":"/blog/tips-tricks-and-best-approaches-for-developing-decentralized-applications-0x09-blockchain-developers-meetup/","content":"\n<p>Last week we had our monthly blockchain developers meetup.</p>\n\n\n\n<p>This time we were focusing more on the best approaches, tips and tricks for gas optimisation and best practices and architectures when developing decentralized applications.</p>\n\n\n\n<p>Our focus was mostly on Ethereum&#8217;s Solidity and EVM since most people of our community are familiar with it.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://hack.bg/wp-content/uploads/2019/05/meetup09-1024x576.png\" alt=\"\" class=\"wp-image-1112\" srcset=\"https://hack.bg/wp-content/uploads/2019/05/meetup09-1024x576.png 1024w, https://hack.bg/wp-content/uploads/2019/05/meetup09-300x169.png 300w, https://hack.bg/wp-content/uploads/2019/05/meetup09-768x432.png 768w, https://hack.bg/wp-content/uploads/2019/05/meetup09.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Tips, tricks and best approaches when developing decentralized apps &#8211; 0x09 [Blockchain Developers Meetup]</figcaption></figure></div>\n\n\n\n<h2>Developers News</h2>\n\n\n\n<p>As usual we started with covering the news from the development space. We share them all over our channels and groups, but for those who do not follow regularly &#8211; this is what was new during the last month:</p>\n\n\n\n<ul><li>Truffle released new version <a href=\"https://github.com/trufflesuite/truffle/releases/tag/v5.0.13\">v5.0.13</a> – decoder improvements</li><li>Ganache with new release <a href=\"https://github.com/trufflesuite/ganache/releases/tag/v2.0.1\">v2.0.1</a></li><li>Embark &#8211; new beta <a href=\"https://github.com/embark-framework/embark/blob/master/CHANGELOG.md#410-beta0-2019-04-17\">4.1.0-beta.0</a> </li><li><a href=\"https://truffleframework.com/teams\">Truffle Teams</a>, zero-configuration continuous integration for Eth code</li><li><a href=\"https://medium.com/zokrates/building-identity-linked-zksnarks-with-zokrates-a36085cdd40\">ZoKrates v0.4.4</a> – building identity-based snarks. adds BabyJubJub</li><li><a href=\"https://devpost.com/software/zexe-on-ethereum\">ZEXE on Plasma</a> from Edcon hackathon</li><li><a href=\"http://waellet.com\">Waellet</a> &#8211; aeternity browser extension released first initial beta</li><li>Easily <a href=\"https://github.com/status-im/status-chat-widget\">embed a Status chat room</a> in your website</li></ul>\n\n\n\n<h2>Tricks and tips</h2>\n\n\n\n<p>We talked a lot about gas optimization via variables packing, deployment gas optimization, and other interesting tricks. Here&#8217;s some of the tricks and tips we covered:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Any non-trivial contract will have errors in it. Your code must, therefore, be able to respond to bugs and vulnerabilities gracefully.</p><cite><br>Prepare for failure</cite></blockquote>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>&#8211; Write clean, consistent good code (If you repeat certain operations often, make them a function)<br>&#8211; Move logic to Libraries if appropriate (They are published separately)<br>&#8211; Use modifiers for common checks<br>&#8211; Do as little as possible in the constructor</p><cite>Lowering deployment cost</cite></blockquote>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"672\" height=\"378\" src=\"https://hack.bg/wp-content/uploads/2019/05/modifiers_can_be_inefficient.png\" alt=\"Solidity modifiers can be inefficient\" class=\"wp-image-1116\" srcset=\"https://hack.bg/wp-content/uploads/2019/05/modifiers_can_be_inefficient.png 672w, https://hack.bg/wp-content/uploads/2019/05/modifiers_can_be_inefficient-300x169.png 300w\" sizes=\"(max-width: 672px) 100vw, 672px\" /><figcaption>Solidity Modifiers can be inefficient</figcaption></figure></div>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>When you add a function modifier, the code of that function is picked up and put in the function modifier in place of the _ symbol. This can also be understood as &#8220;The function modifiers are inlined&#8221;. In normal programming languages, inlining small code is more efficient without any real drawback but Solidity is no ordinary language. In Solidity, the maximum size of a contract is restricted to 24 KB<br></p><cite>Modifiers can be inefficient</cite></blockquote>\n\n\n\n<p>The recording will be available soon.</p>\n\n\n\n<h2>Resources</h2>\n\n\n\n<ul><li><a href=\"https://docs.google.com/presentation/d/1TVFNkjoSnhkPvirgi02CrW7_lLdkwBANr5OYV6TQ1Hs/edit?usp=sharing\">Presentation</a></li></ul>\n","excerpt":"<p>Last week we had our monthly blockchain developers meetup. This time we were focusing more on the best approaches, tips and tricks for gas optimisation and best practices and architectures when developing decentralized applications. Our focus was mostly on Ethereum&#8217;s Solidity and EVM since most people of our community are familiar with it. Developers News [&hellip;]</p>\n","categories":[{"id":"71","title":"Meet-ups","path":"/category/meetups/"}],"author":{"name":"Milen Radkov","path":"/author/milen/"}}},{"node":{"date":"2019-01-31T01:48:38","id":"589","title":"Blockchain Developers Meetup 0x06 &#8211; Jump Oriented Programming in Ethereum Smart Contract","path":"/blog/blockchain-developers-meetup-0x06-jump-oriented-programming-in-ethereum-smart-contract/","content":"\n<p>Hey you, fellow blockchain developer. If you&#8217;ve missed out our 0x06 monthly meetup which happened last week (22.01.2019) &#8211; here is some interesting stuff for you to catch up.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2246-1024x678.jpg\" alt=\"\" class=\"wp-image-591\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2246-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/01/DSC_2246-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/DSC_2246-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/01/DSC_2246-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Blockchain Developers Meetup 0x06 &#8211; Jump Oriented Programming in Ethereum Smart Contract</figcaption></figure></div>\n\n\n\n<h2>What happened recently</h2>\n\n\n\n<p>As always we discussed what interesting happened from developers perspective during the month. We got out focus on the last minute postponed Constantinople Ethereum fork.</p>\n\n\n\n<h3>Constantinople Ethereum fork postponed</h3>\n\n\n\n<p>As it turns out <a href=\"http://chainsecurity.com\">Chain Security</a>, a company focused on research and security of smart contracts, found a vulnerability that might result <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar multiReplace\" id=\"5\" data-gr-id=\"5\">to</g> bigger issues and re-enabling <g class=\"gr_ gr_67 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling\" id=\"67\" data-gr-id=\"67\">re-entrancy</g> attacks on some smart contracts after the fork.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"488\" height=\"256\" src=\"https://hack.bg/wp-content/uploads/2019/01/fork.png\" alt=\"\" class=\"wp-image-592\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/fork.png 488w, https://hack.bg/wp-content/uploads/2019/01/fork-300x157.png 300w\" sizes=\"(max-width: 488px) 100vw, 488px\" /><figcaption>fork</figcaption></figure></div>\n\n\n\n<p>Summarizing this &#8211; <a href=\"https://eips.ethereum.org/EIPS/eip-1283\">EIP1283</a> which is introducing cheaper gas costs <g class=\"gr_ gr_163 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"163\" data-gr-id=\"163\">for </g><code>SSTORE</code><g class=\"gr_ gr_163 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"163\" data-gr-id=\"163\"> operations</g> may result in reentrancy vulnerability for some smart contracts.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Contracts that increase their probability to being vulnerable are contracts that utilize a <em>transfer()</em> or <em>send()</em>  function followed by a state-changing operation. An example of such a  contract would be one where two parties jointly receive funds, decide on  how to split said funds, and initiate a payout of those funds.</p></blockquote>\n\n\n\n<p>And the brief explanation: The issue is that when a <code>CALL</code> is made to transfer funds, even if the caller hasn&#8217;t specified additional gas, will spend 2300 gas. <g class=\"gr_ gr_268 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"268\" data-gr-id=\"268\">Solidity&#8217;s </g><code>.transfer()</code><g class=\"gr_ gr_268 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"268\" data-gr-id=\"268\"> function</g> does this and provides no option for the user to override that.</p>\n\n\n\n<p>And this has not been an issue previously, because even though with 2300 gas the caller could make a <code>CALL</code> from the callee<g class=\"gr_ gr_20 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep\" id=\"20\" data-gr-id=\"20\">,</g><g class=\"gr_ gr_20 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style replaceWithoutSep\" id=\"20\" data-gr-id=\"20\">but</g> there was no way to change a storage entry <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\">when </g><code>SSTORE</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> costs</g> 5000 gas.</p>\n\n\n\n<p>But now after Constantinople and the EIP-<g class=\"gr_ gr_35 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"35\" data-gr-id=\"35\">1283</g> the <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">cheapest </g><code>SSTORE</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> operation</g> is 200 gas, which opens up a non-zero possibility of <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">re-entrancy</g> attacks on some smart contracts.  </p>\n\n\n\n<h2>Jump Oriented Programming in Ethereum<br></h2>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2250-1024x678.jpg\" alt=\"\" class=\"wp-image-590\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2250-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/01/DSC_2250-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/DSC_2250-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/01/DSC_2250-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Exploiting Acoraida Monica game</figcaption></figure></div>\n\n\n\n<p>As the title suggests it &#8211; the whole topic that we went through is quite catchy. We initially saw this thing called Jump Oriented Programming in Ethereum last month, is quite well explained in a couple of great videos by LiveOverflow in his YouTube channel. So we got in touch with him and Milen Radkov presented this at the meetup.</p>\n\n\n\n<p>We saw how we can make a Solidity smart contract misbehave, making it acting different, hiding what exactly is it doing.</p>\n\n\n\n<p>The whole thing is based on carefully selected function names, and specifically chosen address in order for the execution to succeed (in this case making it possible to withdraw and drain the whole contract).<br></p>\n\n\n\n<h3>Resources</h3>\n\n\n\n<ul><li><a href=\"https://gist.github.com/LiveOverflow/21c8a505ca176e5bb20bc94eb23acdf1\">Github repo with all the example code</a></li><li><a href=\"https://www.youtube.com/watch?v=ozqOlUVKL1s&amp;t=1s\">LiveOverflow video part one</a></li><li><a href=\"https://www.youtube.com/watch?v=RfL3FcnVbJg\">LiveOverflow video part two</a></li><li>video recording of the meetup coming soon</li></ul>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<ul><li><a href=\"https://meetup.com/blockchain-developers-meetup-bulgaria\">Blockchain Developers Meetup</a></li><li><a href=\"https://hack.bg\">Website</a></li></ul>\n","excerpt":"<p>Hey you, fellow blockchain developer. If you&#8217;ve missed out our 0x06 monthly meetup which happened last week (22.01.2019) &#8211; here is some interesting stuff for you to catch up. What happened recently As always we discussed what interesting happened from developers perspective during the month. We got out focus on the last minute postponed Constantinople [&hellip;]</p>\n","categories":[{"id":"5","title":"Events","path":"/category/events/"},{"id":"71","title":"Meet-ups","path":"/category/meetups/"}],"author":{"name":"Milen Radkov","path":"/author/milen/"}}},{"node":{"date":"2019-01-28T09:36:38","id":"433","title":"How to setup our environment for developing on Ethereum","path":"/blog/how-to-setup-our-environment-for-developing-on-ethereum/","content":"\n<p class=\"has-drop-cap\">There are lots of tutorials on the Internet for developing decentralized applications, smart contracts and write unit test with Solidity on the Ethereum blockchain. Including a <a href=\"https://hack.bg/category/blog/tutorials/\">few of our own</a>, for that matter. </p>\n\n\n\n<p>BUT a large part of them lack the initial environment setup, that is needed for someone just arriving in the blockchain space with a bag full of questions, wondering where the heck to start from. </p>\n\n\n\n<p>So, after a series of questions received regarding this topic, I&#8217;m writing this, hoping, to help you out setup your ethereum solidity development environment if you are completely new to this space.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<ul><li>Windows, macOS, Linux computer or laptop</li><li>Internet connection</li><li>patience &#8230; 🙂</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>macOS <g class=\"gr_ gr_34 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling\" id=\"34\" data-gr-id=\"34\">se</g>tup<br></h2>\n\n\n\n<p>For macOS, ensure that you have the latest version of\n<a href=\"https://developer.apple.com/xcode/download/\">Xcode installed</a>.\nThis contains the <a href=\"https://en.wikipedia.org/wiki/Clang\">Clang C++ compiler</a>, the\n<a href=\"https://en.wikipedia.org/wiki/Xcode\">Xcode IDE</a> and other Apple development\ntools which are required for building C++ applications on OS X.\nIf you are installing Xcode for the first time, or have just installed a new\nversion then you will need to agree to the license before you can do\ncommand-line builds:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>sudo xcodebuild -license accept</code></pre>\n\n\n\n<p>Ethereum Solidity OS X builds require you have <a href=\"http://brew.sh\">Homebrew</a> package manager installed for installing external dependencies.</p>\n\n\n\n<p>Install Homebrew:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>brew update</code></pre>\n\n\n\n<p>Install node and NPM (Node Package Manager) using brew &#8211; npm will be automatically installed with node:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>brew install node</code></pre>\n\n\n\n<p>Then we can proceed with installing <code>solc</code> which is the Solidity command-line compiler.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g solc</code></pre>\n\n\n\n<p>After that we install <code>truffle</code> framework and <code>ganache-cli</code> which will be our primary tools for compiling, testing and deployment.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g truffle</code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g ganache-cli</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Windows setup</h2>\n\n\n\n<p>We need to install several things for a windows environment. The first one is git for windows &#8211; it&#8217;s a command-line tool for retrieving source code from Github. <g class=\"gr_ gr_112 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"112\" data-gr-id=\"112\">Next</g> we need to have CMake installed, which is a cross-platform build file generator. And last we have to have a C++ compiler which we can get from Visual Studio Build Tools. The links for these three are below:</p>\n\n\n\n<ul><li><a href=\"https://git-scm.com/download/win\">Git for <g class=\"gr_ gr_48 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"48\" data-gr-id=\"48\">Windows</g></a></li><li><a href=\"https://cmake.org/download/\">CMake</a></li><li><a href=\"https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017\">Visual Studio 2017 Build Tools</a></li></ul>\n\n\n\n<p>After <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">that</g> we can proceed with installing node and <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">then </g><code>solc</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> <g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"14\" data-gr-id=\"14\"><g class=\"gr_ gr_63 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"63\" data-gr-id=\"63\">,</g></g></g><g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"14\" data-gr-id=\"14\"><g class=\"gr_ gr_63 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"63\" data-gr-id=\"63\"> </g></g><code>truffle</code><g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"14\" data-gr-id=\"14\"><g class=\"gr_ gr_63 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"63\" data-gr-id=\"63\"> ,</g></g> <code>ganache-cli</code> like shown in the macOS setup.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><br> Then we can proceed with installing <code>solc</code> which is the Solidity command-line compiler.<br> <br> <br> <code>npm install -g solc</code><br> <br> <br> After that we install <code>truffle</code> framework and <code>ganache-cli</code> which will be our primary tools for compiling, testing and deployment.<br> <br> <br> <code>npm install -g truffle</code><br> <br> <br> <code>npm install -g ganache-cli</code> </p></blockquote>\n","excerpt":"<p>There are lots of tutorials on the Internet for developing decentralized applications, smart contracts and write unit test with Solidity on the Ethereum blockchain. Including a few of our own, for that matter. BUT a large part of them lack the initial environment setup, that is needed for someone just arriving in the blockchain space [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"},{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/"}],"author":{"name":"Milen Radkov","path":"/author/milen/"}}},{"node":{"date":"2018-12-29T09:30:09","id":"286","title":"[Part two &#8211; Unit Testing] Build a Decentralized Domain Name System (DDNS) on top of Ethereum","path":"/blog/part-two-unit-testing-build-a-decentralized-domain-name-system-ddns-on-top-of-ethereum/","content":"\n<p class=\"has-drop-cap\">Whether you develop software yourself or <a href=\"https://hack.bg/#contact\">hire developers</a> to build it for you, you expect them to do everything necessary, so you can get functional and bug-free software. Sometimes, however, doing the right thing takes additional time, which is often being skipped due to all the deadlines, budget or some other reason.</p>\n\n\n\n<p>In blockchain development as in the traditional software development, unit testing reduces the number of bugs, making it &#8220;a must&#8221; to effective software development. </p>\n\n\n\n<p>In this article, we are going to look at this type of testing &#8211; unit testing &#8211; and why you should not cut corners and skip this part of the software development cycle.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"683\" src=\"https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-1024x683.jpg\" alt=\"Unit Testing Decentralized Domain Name System\" class=\"wp-image-386\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-1024x683.jpg 1024w, https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-300x200.jpg 300w, https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-768x512.jpg 768w, https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack-864x576.jpg 864w, https://hack.bg/wp-content/uploads/2018/12/unit-testing-decentralized-domain-name-system-hack.jpg 1200w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Unit Testing Decentralized Domain Name System</figcaption></figure></div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>This is part two of our series of building decentralized domain name system on top of <a href=\"https://ethereum.org/\">Ethereum</a>, where we&#8217;ll get familiar with good practices and techniques during <g class=\"gr_ gr_34 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"34\" data-gr-id=\"34\">unit</g> testing process and deployment of a decentralized application (<g class=\"gr_ gr_14 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"14\" data-gr-id=\"14\">dApp</g>) development lifecycle.</p>\n\n\n\n<p>In the first part, we developed a decentralized application consisted of Ethereum smart contracts, that are acting as a decentralized domain name system. So, at this point, a user should be able to buy, renew, edit and transfer a domain name according to our <g class=\"gr_ gr_191 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"191\" data-gr-id=\"191\">dApp&#8217;s</g> logic. If you haven&#8217;t checked out <a href=\"https://hack.bg/blog/tutorials/part-one-smart-contracts-build-a-decentralized-domain-name-system-ddns-on-top-of-ethereum/\">the first part of our tutorial</a> yet &#8211; this is probably the time to do so.</p>\n\n\n\n<p>To sum up:</p>\n\n\n\n<ul><li>Unit tests are code that tests your contract code</li><li>It executes your contract with predefined function calls (test cases)</li><li>It compares the result of the execution with the expected result for this case</li></ul>\n\n\n\n<h2>Tooling</h2>\n\n\n\n<p>The most popular and commonly used way of creating unit tests for Ethereum smart contracts written in Solidity is by using the following tool-set.</p>\n\n\n\n<ol><li><a href=\"https://truffleframework.com/truffle\">Truffle</a> &#8211; is the most popular development framework for Ethereum. <ul><li>Built-in smart contract compilation, linking, deployment and binary management.</li><li>Automated contract testing for rapid development.</li><li>Scriptable, extensible deployment &amp; migrations framework.</li><li>Network management for deploying to any number of public &amp; private networks.</li><li>Package management with EthPM &amp; NPM, using the <a href=\"https://github.com/ethereum/EIPs/issues/190\">ERC190</a> standard.</li><li>Interactive console for direct contract communication.</li><li>Configurable build pipeline with support for tight integration.</li><li>External script runner that executes scripts within a Truffle environment. </li></ul></li><li><a href=\"https://truffleframework.com/ganache\">Ganache</a> &#8211; lets you quickly fire up a personal Ethereum blockchain which you can use to run tests, execute commands, and inspect state while controlling how the chain operates.</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Without further due, let&#8217;s jump into setting up our project and environment for unit testing.<br></p>\n\n\n\n<p>First if we haven&#8217;t already, we need to install Truffle globally (-g)</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g truffle</code></pre>\n\n\n\n<p>and Ganache &#8211; It is available as both a desktop application as well as a command-line tool (formerly known as the TestRPC). For the purpose of our tutorial we are going to use the command-line tool.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g ganache-cli</code></pre>\n\n\n\n<p><g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del\" id=\"5\" data-gr-id=\"5\">Okey</g>, now we are good to go. There is a tutorial for using truffle for <g class=\"gr_ gr_37 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins doubleReplace replaceWithoutSep\" id=\"37\" data-gr-id=\"37\">unit</g> testing in their website <a href=\"https://truffleframework.com/tutorials/testing-for-throws-in-solidity-tests\">here</a>, but <g class=\"gr_ gr_18 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"18\" data-gr-id=\"18\"><code>throw</code></g> function used there is now deprecated and replaced by <code>revert()</code>, <code>require()</code> and <code>assert()</code>. So it will be somewhat helpful if you know how the last work.</p>\n\n\n\n<p>Nevertheless, let us verify our knowledge by a quick lookup at the <a href=\"https://solidity.readthedocs.io/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions\">Solidity documentation</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Error handling: Assert, Require, Revert and Exceptions<br> Solidity uses state-reverting exceptions to handle errors. Such an exception will undo all changes made to the state in the current call (and all its sub-calls) and also flag an error to the caller. The convenience functions <code>assert</code> and <code>require</code> can be used to check for conditions and throw an exception if the condition is not met. The <code>assert</code> function should only be used to test for internal errors, and to check invariants. The <code>require</code>  function should be used to ensure valid conditions, such as inputs, or  contract state variables are met, or to validate return values from  calls to external contracts. If used properly, analysis tools can evaluate your contract to identify  the conditions and function calls which will reach a failing <code>assert</code>.  Properly functioning code should never reach a failing assert  statement; if this happens there is a bug in your contract which you  should fix.<br> There are two other ways to trigger exceptions: The <code>revert</code> function can be used to flag an error and revert the current call. It is possible to provide a string message containing details about the error that will be passed back to the caller.</p><cite>Solidity documentation</cite></blockquote>\n\n\n\n<h2>Project initialization</h2>\n\n\n\n<p class=\"note\"><strong>Note:</strong> If you have initialized your project with <code>truffle init</code> you can skip this part.</p>\n\n\n\n<p>In the first part we covered mainly the code, but not the environment, IDE and project setup, but for our tests to run properly we will need that set.</p>\n\n\n\n<p>Setting up a new truffle project:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>truffle init</code></pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"682\" height=\"564\" src=\"https://hack.bg/wp-content/uploads/2018/12/decentralized-dns-truffle-init.png\" alt=\"Decentralized Domain Name System - project initialization\" class=\"wp-image-345\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/decentralized-dns-truffle-init.png 682w, https://hack.bg/wp-content/uploads/2018/12/decentralized-dns-truffle-init-300x248.png 300w\" sizes=\"(max-width: 682px) 100vw, 682px\" /><figcaption>Decentralized Domain Name System &#8211; project initialization</figcaption></figure></div>\n\n\n\n<p>As you notice after project initialization Truffe adds some files into our project directory: </p>\n\n\n\n<ul><li><code>./contracts</code> &#8211; directory where our smart contracts should be stored.</li><li><code>./migrations</code> &#8211; directory for placing our migrations scripts.</li><li><code>./test</code> &#8211; directory for test files for testing our decentralized application.</li><li><code>./truffle-config.js</code> &#8211; this is our project&#8217;s truffle configuration file.</li></ul>\n\n\n\n<h2>Writing Unit Tests</h2>\n\n\n\n<p>Writing unit tests is a must for decentralized applications development life-cycle, so we can be sure the application works <strong>the way it is designed to</strong>.</p>\n\n\n\n<p>So Truffle gives us couple of possible options to write tests &#8211; in JavaScript, TypeScript (testing your contract via web3) or Solidity (testing your contract from another contract). In our tutorial we will cover unit testing with JavaScript which its the most adopted way of doing so in my opinion.</p>\n\n\n\n<p>All contracts in truffle&#8217;s contracts folder are accessible and are published automatically for our tests. Our unit tests should be placed in the <code>./test</code> folder and must end with <code>.js</code> extension so it can be recognized as an automated test by <a href=\"https://mochajs.org/\">Mocha</a> framework which Truffle uses for testing. For the assertions Truffle uses <a href=\"https://www.chaijs.com/\">Chai</a>, which you may or may not be familiar with.</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Chai is a BDD / TDD assertion library for <a href=\"http://nodejs.org\">node</a> and can be paired with any javascript testing framework.</p><cite>Chaijs</cite></blockquote>\n\n\n\n<p>Truffle&#8217;s got well structured, extensive <a href=\"https://truffleframework.com/docs/truffle/overview\">documentation</a> which you can read upon and get familiar with, if you want to.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<figure class=\"wp-block-pullquote is-style-default\"><blockquote><p>So starting with the structure of a unit test case.</p></blockquote></figure>\n\n\n\n<p>A test is a call of a contract function with predefined (hard-coded) arguments and a predefined expected output. And the expected output should be the correct way the contract functions.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What makes Truffle tests different from that of Mocha is the <code>contract()</code> function: This function works exactly like <code>describe()</code> except it enables Truffle&#8217;s <a href=\"https://truffleframework.com/docs/truffle/testing/testing-your-contracts#clean-room-environment\">clean-room features</a>.</p><cite>Truffle documentation</cite></blockquote>\n\n\n\n<p>Each group of tests is ran with clean contract state, meaning that for every test new contract is being published.</p>\n\n\n\n<p>Here is how our DDNSService.test.js should look like:</p>\n\n\n\n<pre><code>\n\nconst DDNSService = artifacts.require('../contracts/DDNSService.sol')\n\n// place helpers here\n\ncontract('DDNSService', ([owner, wallet, anotherAccount]) =&gt; {\n\tlet contractInstance;\n\tlet events = [];\n\n\tbefore(() =&gt; {\n\t\tweb3.eth.defaultAccount = owner;\n\t});\n\n\tbeforeEach(async () =&gt; {\n\t\tcontractInstance = await DDNSService.new();\n\t});\n\n\tafterEach(() =&gt; {\n\t\tif (events.length) {\n\t\t\tevents.forEach((ev) =&gt; {\n\t\t\t\tev.stopWatching();\n\t\t\t});\n\n\t\t\tevents = [];\n\t\t}\n    });\n  \n    it(\"BYTES_DEFAULT_VALUE constant Should have exact value\", async () =&gt; {\n\t\t// Arrange\n\n\t\t// Act\n\t\tconst result = await contractInstance.BYTES_DEFAULT_VALUE();\n\n\t\t// Assert\n\t\tassert.equal(result, '0x00');\n   });\n\n... more tests \n\n});</code></pre>\n\n\n\n<p><br></p>\n\n\n\n<p>In the code above, we&#8217;ve set our contract instance and written the first test, which tests whether the <code>BYTES_DEFAULT_VALUE</code> constant in our smart contract is set to <code>0x00</code>.</p>\n\n\n\n<p>Here is a more sophisticated example &#8211; <i>register Should throw when the sent funds are insufficient</i> &#8211; we are getting the price for the passed domain name, IP, TLD, substract 1 via <code>.minus(1)</code> so we can have a smaller than the actual domain price saved in our <code>currentPrice</code> constant, which we pass as value argument for the domain register via the <code>register()</code> function afterwards. Then we assert whether the call failed with <code>assertRevert</code>.</p>\n\n\n\n<pre><code>it(\"register Should throw when the sent funds are insufficient\", async () =&gt; {\n\t\t// Arrange\n\t\tconst domainName = \"milenradkov\";\n\t\tconst ip = \"127.0.0.1\";\n\t\tconst topLevelDomain = \"com\";\n\t\tconst currentPrice = (await contractInstance.getPrice(domainName)).minus(1);\n\t\t// Act\n\t\tconst result = contractInstance.register(domainName, topLevelDomain, ip, { from: anotherAccount, value: currentPrice });\n\t\t// Assert\n\t\tawait assertRevert(result);\n});</code></pre>\n\n\n\n<p>Unit tests in truffle can be written <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\">using </g><code>.then</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> </g><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\"><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\">or</g> </g><code>await/async</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> style</g>, so it&#8217;s up to the developer&#8217;s preference how to write them.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Testing the contract against the cases we&#8217;ve coded is really simple:</p>\n\n\n\n<p>1. Start <code>ganache-cli</code> in separate terminal/cmd &#8211; this will instantiate our private blockchain which we are going to use for tests.</p>\n\n\n\n<pre><code>ganache-cli</code></pre>\n\n\n\n<p>2. Run <code>truffle test</code> command from the project directory.</p>\n\n\n\n<pre><code>truffle test</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>As you&#8217;ve probably noticed already, we are using the so known AAA (<a href=\"http://wiki.c2.com/?ArrangeActAssert\">Arrange Act Assert</a>) pattern for our unit tests &#8211; it&#8217;s always good to stick to well-formatted code and best practices when you are coding for lots of well-known reasons.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>&#8220;Arrange-Act-Assert&#8221;a pattern for arranging and formatting code in <a href=\"http://wiki.c2.com/?UnitTest\">UnitTest</a> methods: </p><p>Each method should group these functional sections, separated by blank lines: </p><ol><li> <strong>Arrange</strong> all necessary preconditions and inputs.\n</li><li> <strong>Act</strong> on the object or method under test.\n</li><li> <strong>Assert</strong> that the expected results have occurred.\n</li></ol><cite>Arrange-Act-Assert pattern unit test</cite></blockquote>\n\n\n\n<h3>Helpers</h3>\n\n\n\n<p>We are going to need some predefined helpers for some of our next test cases, which names are speaking for what they actually do respectively.</p>\n\n\n\n<pre><code>\n//helpers\nconst assertRevert = require('./utils/assertRevert');\nconst watchEvent = require('./utils/watchEvent');\nconst constants = require('./utils/constants');\nconst increaseTime = require('./utils/increaseTime');</code></pre>\n\n\n\n<h3>Coverage</h3>\n\n\n\n<p>Following this logic here are all the test cases covering most of the edge cases of our decentralized domain name service smart contract functions.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/2470c611a7a3d0be1508ead681929a90.js\"></script><figcaption></figcaption></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Running tests</h2>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"799\" height=\"537\" src=\"https://hack.bg/wp-content/uploads/2018/12/ganache_cli.png\" alt=\"instantiate ganache-cli\" class=\"wp-image-376\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/ganache_cli.png 799w, https://hack.bg/wp-content/uploads/2018/12/ganache_cli-300x202.png 300w, https://hack.bg/wp-content/uploads/2018/12/ganache_cli-768x516.png 768w\" sizes=\"(max-width: 799px) 100vw, 799px\" /><figcaption>instantiate ganache-cli</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"799\" height=\"537\" src=\"https://hack.bg/wp-content/uploads/2018/12/ganache_cli_running.png\" alt=\"ganache-cli running\" class=\"wp-image-377\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/ganache_cli_running.png 799w, https://hack.bg/wp-content/uploads/2018/12/ganache_cli_running-300x202.png 300w, https://hack.bg/wp-content/uploads/2018/12/ganache_cli_running-768x516.png 768w\" sizes=\"(max-width: 799px) 100vw, 799px\" /><figcaption>ganache-cli running</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"843\" height=\"604\" src=\"https://hack.bg/wp-content/uploads/2018/12/truffle_test.png\" alt=\"truffle test - Decentralized Domain Name System using Solidity Smart Contracts on top of Ethereum\" class=\"wp-image-378\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/truffle_test.png 843w, https://hack.bg/wp-content/uploads/2018/12/truffle_test-300x215.png 300w, https://hack.bg/wp-content/uploads/2018/12/truffle_test-768x550.png 768w, https://hack.bg/wp-content/uploads/2018/12/truffle_test-804x576.png 804w\" sizes=\"(max-width: 843px) 100vw, 843px\" /><figcaption>truffle test &#8211; Decentralized Domain Name System using Solidity Smart Contracts on top of Ethereum</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"843\" height=\"604\" src=\"https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing.png\" alt=\"Truffle Test passing - Decentralized Domain Name System using Solidity Smart Contracts on top of Ethereum\" class=\"wp-image-379\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing.png 843w, https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing-300x215.png 300w, https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing-768x550.png 768w, https://hack.bg/wp-content/uploads/2018/12/truffle_test_passing-804x576.png 804w\" sizes=\"(max-width: 843px) 100vw, 843px\" /><figcaption>Truffle Test passing &#8211; Decentralized Domain Name System using Solidity Smart Contracts on top of Ethereum</figcaption></figure></div>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>Unit testing are important when developing smart contracts on Ethereum, as there are lots of vulnerabilities or edge cases that can lead to security flaws or value (ETH) theft.</p>\n\n\n\n<p>In the next few parts we will set up code coverage and continuous integration with Travis CI. </p>\n\n\n\n<p>Also we will look deeper in to the security part of development and testing, tips and tricks and more, so <a href=\"http://eepurl.com/gcxyRj\">stay tuned.</a></p>\n\n\n\n<h3><strong>Useful links</strong></h3>\n\n\n\n<ul><li><a href=\"https://hack.bg/blog/tutorials/part-one-smart-contracts-build-a-decentralized-domain-name-system-ddns-on-top-of-ethereum/\">Part one &#8211; Smart Contracts &#8211; Build Decentralized Domain Name System on top of Ethereum</a></li><li>Part two &#8211; Unit Testing &#8211; [you are here] 🙂</li><li>Part three &#8211; Coming soon &#8230;</li></ul>\n\n\n\n<p><strong> Website</strong>: <a rel=\"noreferrer noopener\" href=\"https://hack.bg\" target=\"_blank\">https://hack.bg</a></p>\n\n\n\n<p><strong>Follow us on social media:</strong></p>\n\n\n\n<ul><li><a rel=\"noreferrer noopener\" href=\"https://twitter.com/hack_bg\" target=\"_blank\">Twitter</a></li><li><a rel=\"noreferrer noopener\" href=\"https://facebook.com/hackbg\" target=\"_blank\">Facebook</a></li><li><a rel=\"noreferrer noopener\" href=\"https://www.linkedin.com/company/hackbg-blockchain-web-software-solutions/\" target=\"_blank\">LinkedIn</a></li><li><a href=\"https://meetup.com/blockchain-developers-meetup-bulgaria\">Blockchain Developers Meetup</a></li></ul>\n","excerpt":"<p>Whether you develop software yourself or hire developers to build it for you, you expect them to do everything necessary, so you can get functional and bug-free software. Sometimes, however, doing the right thing takes additional time, which is often being skipped due to all the deadlines, budget or some other reason. In blockchain development [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"}],"author":{"name":"Milen Radkov","path":"/author/milen/"}}},{"node":{"date":"2018-11-30T10:46:53","id":"107","title":"[Part one &#8211; Smart Contracts] Build a Decentralized Domain Name System (DDNS) on top of Ethereum","path":"/blog/part-one-smart-contracts-build-a-decentralized-domain-name-system-ddns-on-top-of-ethereum/","content":"\n<h3>Intro</h3>\n\n\n\n<p>Nowadays it is quite popular to <a href=\"https://hack.bg\" rel=\"noreferrer noopener\" target=\"_blank\"><strong>build</strong> <strong>a</strong> <strong>decentralized application</strong></a><strong> (dApp)</strong>. If you are familiar with the blockchain smart contracts development and you’ve already developed something cool, probably there is no need for me to tell you that in this field the demand for good developers is quite high.</p>\n\n\n\n<p>But for you to be a good smart contracts developer, you have to research, learn the best coding practices, educate yourself and practice coding constantly.</p>\n\n\n\n<p>In this tutorial, I’m going to show you step by step my implementation on how to create a <strong>decentralized</strong> <strong>application</strong> which functions as a simplified <strong>DNS</strong> (<strong>domain name system</strong>). It was created a while back, but recently got a lot of attention, so I decided to make a short tutorial explaining the steps in the making.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>There are quite a lot of blockchain platforms that give us the opportunity to develop smart contracts and decentralized applications on top of their networks and infrastructure. The main platforms used for dApp development are <a href=\"https://aeternity.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Aeternity</a>, <a href=\"http://ethereum.org\" rel=\"noreferrer noopener\" target=\"_blank\">Ethereum</a>, <a href=\"https://neo.org/\" rel=\"noreferrer noopener\" target=\"_blank\">NEO</a>, <a href=\"https://eos.io/\" rel=\"noreferrer noopener\" target=\"_blank\">EOS</a>, <a href=\"https://qtum.org/\" rel=\"noreferrer noopener\" target=\"_blank\">QTUM</a>, <a href=\"https://www.cardano.org\" rel=\"noreferrer noopener\" target=\"_blank\">Cardano</a>, <a href=\"https://stratisplatform.com\" rel=\"noreferrer noopener\" target=\"_blank\">Stratis</a> and for sure we will see a lot more in the nearest future. But for the purpose of this tutorial, we’ll be using <a href=\"http://solidity.readthedocs.io\" rel=\"noreferrer noopener\" target=\"_blank\">Solidity</a> as our development language and Ethereum’s infrastructure, as Ethereum is the most widely used for dApps development <strong>for now.</strong></p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>If you do not know what a domain name system is, and how it works, now is the time for you to go to Wikipedia and check <a href=\"https://en.wikipedia.org/wiki/Domain_Name_System\" rel=\"noreferrer noopener\" target=\"_blank\">DNS</a> out to get a basic understanding of it.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>At first building a decentralized DNS on top of Ethereum might seem like a trivial task, but we will make it a bit more complex&nbsp;… right&nbsp;now</p></blockquote>\n\n\n\n<p>Let us set some requirements for our project — simplified decentralized domain name system (DDNS).</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Requirements</h3>\n\n\n\n<ol><li>We should be able to <strong>register a domain</strong> by providing the domain name and an IP address it should point to. There are also some other conditions:</li></ol>\n\n\n\n<ul><li>A registered domain cannot be bought and is owned by the caller of the method.</li><li>The domain registration should cost 1 ETH and the domain should be registered for 1 year.</li><li>After 1 year, anyone is allowed to buy the domain again.</li><li>The domain registration can be extended by 1 year if the domain owner calls the register method and pays 1 ETH.</li><li>The domain can be any string with length <strong>more than 5 symbols.</strong></li></ul>\n\n\n\n<p>2. We need a public method to edit a domain. In our simplified <strong>decentralized DNS </strong>system, the editing of a domain will be changing the IP address it points to. The operation should be free and only the owner of the domain should be able to edit the domain.</p>\n\n\n\n<p>3. Public method to transfer the domain ownership to another user. Again this operation is free and only the domain owner can transfer his domains ownership to somebody else.</p>\n\n\n\n<p>4. Public method to get the IP based on a given domain.</p>\n\n\n\n<p>5. A Public method that returns a list of all <strong>receipts</strong> by a certain account. A <strong>receipt</strong> is a domain purchase/extension and contains the price, timestamp of purchase and expiration date of the domain.</p>\n\n\n\n<p>And since this is a domain name system, we want to make it as similar to the current ones as possible, so we are going to add some more additional features like:</p>\n\n\n\n<ul><li>Dynamic pricing — the base price can increase if a short domain name is bought.</li><li>Public method to withdraw the funds from the contract. <strong>This should be called only from the contract owner </strong>(the address which initially created the contract).</li><li>Use <strong>contract events</strong> to signify that an activity has taken place in the contract. Events can be for domain registration/transfer (DDNS) etc.</li></ul>\n\n\n\n<p>And lastly, we need to have unit tests for everything we’ve done so far.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Implementation</h3>\n\n\n\n<h4>Step 1: Architecture design</h4>\n\n\n\n<p>First, we need to think about our architecture and design it. In our case it is a very simple project so the architecture could be something like this:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://hack.bg/wp-content/uploads/2018/12/Decentralized-DNS-1024x576.png\" alt=\"\" class=\"wp-image-115\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/Decentralized-DNS-1024x576.png 1024w, https://hack.bg/wp-content/uploads/2018/12/Decentralized-DNS-300x169.png 300w, https://hack.bg/wp-content/uploads/2018/12/Decentralized-DNS-768x432.png 768w, https://hack.bg/wp-content/uploads/2018/12/Decentralized-DNS-480x270.png 480w, https://hack.bg/wp-content/uploads/2018/12/Decentralized-DNS.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Figure 1 — Decentralized DNS (domain name system) Architecture</figcaption></figure></div>\n\n\n\n<h4>Step 2: Architecture preparation</h4>\n\n\n\n<p>There are already smart contracts for the safe math operations, ownership logic and destruction logic provided from <a href=\"https://github.com/OpenZeppelin/openzeppelin-solidity\" rel=\"noreferrer noopener\" target=\"_blank\">OpenZeppelin</a>, that have passed multiple security audits, so we don’t need to reinvent the wheel.</p>\n\n\n\n<p>For the math operations we are going to use <a href=\"https://github.com/OpenZeppelin/openzeppelin-solidity/blob/9b3710465583284b8c4c5d2245749246bb2e0094/contracts/math/SafeMath.sol\" rel=\"noreferrer noopener\" target=\"_blank\">SafeMath library</a>, which looks like this:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/edc27fd2e860d274a1ed27eed9e1b2ef.js\"></script>\n<figcaption>SafeMath.sol — Safe Mathematical operations in Solidity</figcaption></figure>\n\n\n\n<p>For the ownership and destruction logic we will again use security audited and proven to work contracts from the <a href=\"https://github.com/OpenZeppelin/openzeppelin-solidity/\" rel=\"noreferrer noopener\" target=\"_blank\">openzeppelin-solidity Github</a> repository and then proceed with the implementation of our own DDNS.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/df74ec982a3814e9b47eceb578bc17a9.js\"></script><figcaption>Ownable.sol — Ownership logic solidity</figcaption></figure>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/01aaa6104b7cf183d1fe969864080f2a.js\"></script><figcaption>Destructible.sol — Smart contract lifecycle logic solidity</figcaption></figure>\n\n\n\n<p>Lastly our main contract where we will put our logic for the <strong>decentralized domain name system </strong>(DDNS):</p>\n\n\n\n<p>It inherits the <strong>Destructible.sol</strong> contract which itself inherits the ownership logic from the <strong>Ownable.sol</strong> contract and we are good to go.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/2ca5fb13bdd424d895ca7b25436c7faa.js\"></script><figcaption>DDNS initial contract</figcaption></figure>\n\n\n\n<p>The directory tree of our project could be looking like this at this point:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://hack.bg/wp-content/uploads/2018/12/DDNS-Directory-tree-1024x576.png\" alt=\"\" class=\"wp-image-116\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/DDNS-Directory-tree-1024x576.png 1024w, https://hack.bg/wp-content/uploads/2018/12/DDNS-Directory-tree-300x169.png 300w, https://hack.bg/wp-content/uploads/2018/12/DDNS-Directory-tree-768x432.png 768w, https://hack.bg/wp-content/uploads/2018/12/DDNS-Directory-tree-480x270.png 480w, https://hack.bg/wp-content/uploads/2018/12/DDNS-Directory-tree.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Figure 2 — Project structure for <strong>Decentralized Domain Name&nbsp;System</strong></figcaption></figure></div>\n\n\n\n<h4>Step 3: Defining struct types, function modifiers, and state variables</h4>\n\n\n\n<p>Starting with the structures — <strong>structs</strong> are custom defined types that can group several variables. In our case, we will make some things easier by creating structures for them.</p>\n\n\n\n<p>So, as we all know every problem has lots of different approaches to be solved, and I challenge you to try solving this one yourself and not trust mine as the “one and only solution”.</p>\n\n\n\n<p><strong>Structs</strong></p>\n\n\n\n<p>We are defining the <strong>DomainDetails </strong>structure which has the following properties:</p>\n\n\n\n<ul><li><em>bytes</em> name — the domain name stored as bytes</li><li><em>bytes12</em> topLevel — the TLD of the domain</li><li><em>address</em> owner — address of the owner</li><li><em>bytes15</em> ip — IP that is related to the domain name</li><li><em>uint</em> expires — expiring date of the domain.</li></ul>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/df74ec982a3814e9b47eceb578bc17a9.js\"></script><figcaption>DomainDetails Structure for the DDNS implementation</figcaption></figure>\n\n\n\n<p>Second we are defining the <strong>Receipt </strong>structure — which is something we should provide the user according to the project requirements we’ve set in the beginning. It has the following properties&nbsp;:</p>\n\n\n\n<ul><li><em>uint</em> amountPaidWei — the price that was paid in this transaction, stored as the amount of wei (the smallest part of ether)</li><li><em>uint </em>timestamp — the time when this receipt was issued</li><li><em>uint</em> expires — expiring time</li></ul>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/e794c8461432ee45e93f0214e5251336.js\"></script><figcaption>Receipt structure for the DDNS implementation</figcaption></figure>\n\n\n\n<p><strong>Modifiers</strong></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Modifiers can be used to easily change the behavior of functions. For example, they can automatically check a condition prior to executing the function. Modifiers are inheritable properties of contracts and may be overridden by derived contracts.</p></blockquote>\n\n\n\n<p>First modifier that we are going to implement is an <strong>isAvailable </strong>modifier, which we will be using to check whether a certain domain name is available to be bought.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/1b949804880dfe53deb43c9e7eb860f1.js\"></script><figcaption>isAvailable modifier &#8211; DDNS</figcaption></figure>\n\n\n\n<p>The next thing the <strong>collectDomainNamePayments </strong>modifier that we are going to use as the way for faster check if the user provided the right amount of money for the payment.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/b9bb70959ea119cf895b00e3daf3c38c.js\"></script><figcaption>collectDomainNamePayment modifier for the DDNS implementation</figcaption></figure>\n\n\n\n<p>We need a modifier which we will use for checking whether the transaction initiator (msg.sender) is the owner of the certain domain — <strong>isDomainOwner</strong>.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/f8f89b1ef1eb774e5c75603f8cce1f5a.js\"></script><figcaption>isDomainOwner modifier &#8211; DDNS</figcaption></figure>\n\n\n\n<p>And lastly, we need another two modifiers <strong>isDomainNameLengthAllowed </strong>and <strong>isTopLevelLengthAllowed </strong>for checking if the length of the provided domain name or TLD is allowed respectively.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/333d5a7e530b2014e5cab5b3aaf1b492.js\"></script><figcaption>isDomainNameLengthAllowed modifier</figcaption></figure>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/0d06cf1e8c7224de694205ae25e51f4d.js\"></script><figcaption>isTopLevelLengthAllowed modifier</figcaption></figure>\n\n\n\n<p><strong>State variables and constants</strong></p>\n\n\n\n<p>We are going to add some constants which names speak for what they are actually used for:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/a20d73ba8efabeb67abd6ea0743c448b.js\"></script><figcaption>Constants used in our DDNS smart contract</figcaption></figure>\n\n\n\n<p>and the state variables where we are going to store the domain names, payment receipts:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/73fa911fb71e40b1392c533dfd0c22ff.js\"></script><figcaption>State variables for storing our data in the DDNS</figcaption></figure>\n\n\n\n<p><strong>Events</strong></p>\n\n\n\n<p>Events in Solidity give an abstraction on top of EVM’s (Ethereum Virtual Machine) logging functionality. An application (e.g. our UI) can subscribe to an event and listen for this events.</p>\n\n\n\n<p>Events are defined with a number of parameters and their type. When an event is fired, its arguments are stored in the transaction’s log.</p>\n\n\n\n<p>Notice the <strong><em>indexed </em></strong>attribute — in Solidity, you can add up to 3 indexed parameters for an event, which will add them to a special structure called “topic”.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>We will get to this point in part 2 when we create the UI for the dApp.</p></blockquote>\n\n\n\n<p>For now, let us just add an event for every action that we are taking on our smart contract. That would be logging that a certain domain name was registered, also log if a domain was renewed. We will add an event for logging domain edits and transfers of a domain ownership. Lastly, we log the <em>money </em>operations and receipt issuing.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/c8f178e98976d57828add23e21710d1f.js\"></script><figcaption>Defined events for the DDNS project implementations</figcaption></figure>\n\n\n\n<h4>Step 4: Implementing functions</h4>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>And now let’s get to the interesting part&nbsp;…</p></blockquote>\n\n\n\n<p>First, we have to implement some functions that are going to help us with our logic, since the logic we’ve been following so far is:</p>\n\n\n\n<ul><li>As we know on the internet we could have domain names that are the same and only the TLD could be different (e.g. <code><strong>hack</strong>.bg</code> and <code><strong>hack</strong>.com</code> )</li><li>We need to have a unique <code>id</code> for each domain name, combined with its TLD.</li><li><strong>Solidity is bad with string manipulation</strong></li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The key concept regarding the type <code>string</code> is that this is an array of UTF-8 characters, and can be seamlessly converted to <code>bytes</code>. This is the only way of manipulating the string at all. But it is important to note that UTF-8 characters do not exactly match bytes. The conversion in either direction will be accurate, but there is not an immediate relation between each byte index and the corresponding string index.<br>For most things, there may be an advantage in representing the string directly as the type <code>bytes</code> (avoiding conversions)&nbsp;…</p></blockquote>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p><strong>Solution</strong>: we create a <strong><em>pure</em></strong> function for calculating the unique hash for provided the domain and topLevel called <strong><em>getDomainHash</em></strong>. It will basically calculate the hash (keccak256) of the provided domain name + its TLD.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/0b8d62c698b0e5bf157be3c5dae41c16.js\"></script><figcaption>getDomainHash — calculate the keccak256 hash of domain + TLD for the DDNS</figcaption></figure>\n\n\n\n<p>By using this function we will be able to get the unique identifier for every domain name.</p>\n\n\n\n<p>Following the same logic — we need a unique <code>id</code> or <code>serialNumber</code> for the payment receipts that we issue — function <strong><em>getReceiptKey</em></strong>:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/aeb598abcb0fa6349be9ee7acc5a9e6e.js\"></script><figcaption>Calculate the receipt serial number/key — used as unique id for DDNS purposes</figcaption></figure>\n\n\n\n<p>* Probably you’ve noticed that these two functions we’ve already referred in the modifiers definitions.</p>\n\n\n\n<p>And a price checker for the provided domain name, since we are going to use this functionality very frequently:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/ce0e5b8442cc9034bb468d9500bf69b1.js\"></script><figcaption>Domain name price checker function — DDNS</figcaption></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>… the real deal&nbsp;…</p></blockquote>\n\n\n\n<p><strong>Register a domain name on the decentralized DNS</strong></p>\n\n\n\n<p>We continue with the register domain function — which is probably the most complex of all functions due to our requirements.</p>\n\n\n\n<p>A short explanation of the function below — when a user wants to register a domain name, he passes the <strong>domain</strong>, <strong>TLD</strong> and <strong>IP</strong>, and provides a <em>payment</em> for the domain.</p>\n\n\n\n<p>According to our requirements, some conditions should be met and that is why we’ve created some modifiers earlier at the beginning of this tutorial. They are going to help us to reuse the conditions checks when needed.</p>\n\n\n\n<p>The first thing you notice is that the function is <strong><em>payable —</em></strong>this is required if we want to collect payment in this function, and then we are using</p>\n\n\n\n<ul><li><em>isDomainNameLengthAllowed — </em>checks whether the provided domain’s name length is allowed.</li><li><em>isTopLevelLengthAllowed — </em>checks whether the provided TLD length is allowed.</li><li><em>isAvailable</em> — checks if the domain name is available to be registered (e.g. is it not bought already or if it is expired).</li><li><em>collectDomainNamePayment</em> — checks what is the required amount of ETH to be sent to buy this domain name, according to the conditions for the length of the name. And collects the payment if the user has provided the needed value.</li></ul>\n\n\n\n<p>modifiers.</p>\n\n\n\n<p>If some of the conditions in the modifiers are not met, the contract will stop executing and fire an error message, provided in the <strong><em>require() </em></strong>methods in our modifiers.</p>\n\n\n\n<p>So if everything is OK, we are continuing with the execution of the function (line 19–67):</p>\n\n\n\n<ul><li>What is the logic here?</li></ul>\n\n\n\n<p>We calculate the domain hash, create a domain object, that we store in the storage, then we issue and store a payment receipt and fire two events receipt issuing and domain registration respectively.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/038d4aa4ddad25cc0917228168f50b72.js\"></script><figcaption>Register domain function — DDNS (decentralized domain name system)</figcaption></figure>\n\n\n\n<p><strong>Renew domain name</strong></p>\n\n\n\n<p>This function is similar to the register domain name function — it does the same thing basically, with the only difference of updating the <em>expires </em>property of the requested domain name with 1 year (365 days).</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/69d7b9f1ca8674457db380723710aa71.js\"></script><figcaption>Renew Domain Name — DDNS</figcaption></figure>\n\n\n\n<p><strong>Edit domain name</strong></p>\n\n\n\n<p>For the edit domain name, according to the requirements, we should have the ability to update the IP address that the domain is pointing to and that should be a free operation (excluding gas costs).</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/9ff2f66540210c858854dd4e84e8ec5d.js\"></script><figcaption>Edit domain name function — DDNS</figcaption></figure>\n\n\n\n<p><strong>Transfer domain</strong></p>\n\n\n\n<p>Transferring the domain name ownership is a trivial task as you’ve probably guessed. There are only a few things that are worth mentioning here:</p>\n\n\n\n<ul><li>first, we check with the <strong><em>isDomainOwner</em></strong> modifier if the transaction initiator (msg.sender) is the owner of the domain</li><li>second, important thing we do is to check whether the new owner’s address is not set to 0x0 address — to prevent domain ownership loss</li><li>the rest is easy — get the domain unique id &gt; update the ownership property with new owner’s address &gt; log the change.</li></ul>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/974b7f5bf5bb37e6458b507ce73840d3.js\"></script><figcaption>Transfer domain name ownership — DDNS</figcaption></figure>\n\n\n\n<p><strong>Getters</strong></p>\n\n\n\n<p>We need to have few getters for accessing the data stored on the blockchain and also for the UI later.</p>\n\n\n\n<p>We will implement functions for getting the current IP of a domain is pointed to — <strong><em>getIp</em></strong>, a function to get the list or receipt <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del\" id=\"3\" data-gr-id=\"3\">ids</g> for certain account &#8211;<strong><em>getReceiptList</em></strong>, and a single receipt details getter — <strong><em><g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"5\" data-gr-id=\"5\">getReceipt</g>.</em></strong></p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/c8dfeaba171d832401c4464d58014ae0.js\"></script><figcaption>Get IP of the provided domain — DDNS</figcaption></figure>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/94b09d8d718dd1cbf450e238a11d1754.js\"></script><figcaption>Get receipt list function — DDNS</figcaption></figure>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/d543b1cb9a724489edca06cdc9a7ce4b.js\"></script><figcaption>Get single receipt details function — DDNS</figcaption></figure>\n\n\n\n<p><strong>Withdraw</strong></p>\n\n\n\n<p>Finally, we want to have a function which is allowing the owner of the decentralized domain name system to be able to withdraw the ETH (funds) collected from domain registration/renewal payments.</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/bed65a6e4f29cf050d004888f85b86be.js\"></script><figcaption>Withdraw function — DDNS</figcaption></figure>\n\n\n\n<h4>Finally — here is our smart contract:</h4>\n\n\n\n<p>And here’s the whole smart contract for the DDNS:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/e4d9407e2ccfacb8a0b4f8f821ddf55d.js\"></script><figcaption>Decentralized Domain Name System &#8211; Smart Contract</figcaption></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>If you are interested in seeing the whole project in action — you can check the whole working project — <a href=\"https://github.com/mradkov/decentralized-dns\" rel=\"noreferrer noopener\" target=\"_blank\">decentralized DNS</a> in Github.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Stay tuned! Part two and three where we will be focusing on unit tests and UI implementation of the decentralized domain name system (DDNS) are coming soon&nbsp;…</p></blockquote>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Continue&nbsp;…</h3>\n\n\n\n<ul><li>Part two: Unit testing and deploying</li><li>Part three: Building user interface (UI) for our dApp</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<p>If you want to be informed for our next events and meet-ups — join us:</p>\n\n\n\n<p><strong>Blockchain Developers Meet-up Group</strong>:<a href=\"https://meetup.com/Blockchain-Developers-Meetup-Bulgaria\"><strong>Blockchain Developers Meet-up (Bulgaria)</strong><br><em>In this group, we will share knowledge about blockchain and smart contract development. We will talk about Ethereum…</em>meetup.com</a></p>\n\n\n\n<p><strong>Blockchain Developers Facebook Group</strong>:<a href=\"https://www.facebook.com/groups/BlockchainDevelopersMeetup\"><strong>Log into Facebook | Facebook</strong><br><em>Log into Facebook to start sharing and connecting with your friends, family, and people you know.</em>www.facebook.com</a></p>\n\n\n\n<p><strong>Follow us on social media:</strong></p>\n\n\n\n<ul><li><a href=\"https://twitter.com/hack_bg\" rel=\"noreferrer noopener\" target=\"_blank\">Twitter</a></li><li><a href=\"https://facebook.com/hackbg\" rel=\"noreferrer noopener\" target=\"_blank\">Facebook</a></li><li><a href=\"https://www.linkedin.com/company/hackbg-blockchain-web-software-solutions/\" rel=\"noreferrer noopener\" target=\"_blank\">LinkedIn</a></li></ul>\n","excerpt":"<p>Intro Nowadays it is quite popular to build a decentralized application (dApp). If you are familiar with the blockchain smart contracts development and you’ve already developed something cool, probably there is no need for me to tell you that in this field the demand for good developers is quite high. But for you to be [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"}],"author":{"name":"Milen Radkov","path":"/author/milen/"}}},{"node":{"date":"2018-11-09T16:10:52","id":"395","title":"Blockchain Developers Meetup Bulgaria- #0x04  - Introduction to Solidity Assembly","path":"/blog/blockchain-developers-meetup-bulgaria-0x04-introduction-to-solidity-assembly/","content":"\n<p>Four months had passed since the kick off of our awesome blockchain developers meetup. So far we’ve had very good speakers and topics. Moreover, we are happy to see new faces in the rows and to see our community growing.</p>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2019/01/2b818-1YBU7COOCqWsP6CSpe2E5Wg.jpeg\" alt=\"\"/><figcaption>Blockchain Developers Meetup Bulgaria — 04</figcaption></figure></div>\n\n\n\n<p>This time we had a small technical issue, the youtube live stream crashed a few times and we were unable to fix it on time, so we couldn’t record the whole session and we would like to apologize for that to the people watching us online. In this post, we will share with you the essence of yesterday’s meet-up.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>The event went as follows.</p>\n\n\n\n<h4>In the first&nbsp;part</h4>\n\n\n\n<p>We covered crypto related news covering Forks, Security, and technology advancements, without going into many technical details. In the second part we have our fantastic speaker <a href=\"https://pmihaylov.com/\" data-href=\"https://pmihaylov.com/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Preslav Mihaylov</strong></a>, head of blockchain training at <a href=\"https://softuni.bg\" data-href=\"https://softuni.bg\" target=\"_blank\" rel=\"noopener noreferrer\">Software University</a> (SoftUni Sofia), introduce the public to <strong>Solidity Assembly</strong>.</p>\n\n\n\n<p>Let’s look more into the details&nbsp;…</p>\n\n\n\n<p>Our CEO <a href=\"https://medium.com/u/23eaffb29922\" data-href=\"https://medium.com/u/23eaffb29922\" data-anchor-type=\"2\" data-user-id=\"23eaffb29922\" data-action-value=\"23eaffb29922\" data-action=\"show-user-card\" data-action-type=\"hover\" target=\"_blank\" rel=\"noopener noreferrer\">Milen Radkov</a> went to meet with some cool guys at <a href=\"https://websummit.com\" data-href=\"https://websummit.com\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Web Summit</strong></a> in Lisbon, so this time our Business Development Manager Hristo led the party — it was about time someone else to do so.</p>\n\n\n\n<p>We spoke about the recently released <strong>Cardano Rust Project,</strong> which is basically an API allowing third-party developers to dive into <a href=\"https://www.cardano.org/en/home/\" data-href=\"https://www.cardano.org/en/home/\" target=\"_blank\" rel=\"noopener noreferrer\">Cardano</a>. It is worth mentioning that the project is a toolkit compatible for iOS, Web, and Android.</p>\n\n\n\n<p>Secondly, we discussed the rise of the <strong>Bitcoin</strong> <strong>sidechains</strong> with the release of <a href=\"https://blockstream.com/liquid/\" data-href=\"https://blockstream.com/liquid/\" target=\"_blank\" rel=\"noopener noreferrer\">Blockstream’s Liquid Network</a>. An alternative to the <strong>Lightning network </strong>but with focus on exchanges and the big financial institutions(worth having a look at).</p>\n\n\n\n<p>We did not miss to mention the unsuccessful release of Constantinople Hard Fork that did not manage to sync after launch with the Testnet. Few reasons were mentioned by <a href=\"https://twitter.com/5chdn\" data-href=\"https://twitter.com/5chdn\" target=\"_blank\" rel=\"noopener noreferrer\">Afri Schoedon</a>, Parity dev and the takeaway is that the fork will be delayed until sometime in 2019.</p>\n\n\n\n<p>Next, we looked at a rather worrisome report saying that over 54% of the 100 top daily volume exchanges have security issues. And the most common issues are related to:</p>\n\n\n\n<ul><li>Console errors</li><li>User Account Security</li><li>Registar and Domain Security</li><li>Web Protocol Security</li></ul>\n\n\n\n<p>Next topic was the exiting release of Sapling, Zcash hard fork allowing shielded transfers to be completed with 100 times less memory (around 40mb) and probably six or more times faster. With this upgrade Zcash confidential transactions are getting mobile friendly because one does not need to run a full node anymore to run them. Zcash are bringing to us their awesome technology that will lead to us to the era of “privacy-by-default”.</p>\n\n\n\n<p>Just before the end of the news review, we mentioned the first Truckload Shipment Using Bitcoin Smart Contracts with Rootstock (RSK). During the shipment, the Funds for the transaction were held in escrow by the smart contract on the integrated RSK platform and were automatically released to the carrier upon delivery.</p>\n\n\n\n<p>And lastly, we discussed a recent EOS report pointing out the EOS has misled the public on the number of transaction that it can handle. The study was funded by the Bounties Network which is led by Brent Xu of ConsenSys and for this purpose replicated the EOS network to analyze its performance during two months of testing. The conclusions it reached are fairly damning. They say, for example:</p>\n\n\n\n<p>— “EOS is not a blockchain, rather a distributed homogeneous database management system, a clear distinction in that their transactions are not cryptographically validated.”</p>\n\n\n\n<p>— “The performance metrics observed when factors such as real-world network latency and packet loss are implemented indicate that TPS in EOS approaches levels comparable to Ethereum.”</p>\n\n\n\n<p>— Various forms of consensus failure were shown in the network testing. Consensus is entirely dependent upon the voting mechanism which is based on social consensus, not algorithmic BFT consensus.”</p>\n\n\n\n<h4>Getting more technical</h4>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2019/01/a6980-12CAfLFUMbeGI-hVp3_cd0w.jpeg\" alt=\"\"/><figcaption>Preslav Mihaylov</figcaption></figure></div>\n\n\n\n<p>Before we dive into Assembly, Preslav gave to the audience an overview of Assembly Language and the Programming Language Types.</p>\n\n\n\n<p>We discussed what are the advantages and the disadvantages of Compiled Languages over Interpreted Languages VM based Languages.</p>\n\n\n\n<p>We also looked at how they actually work:</p>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2019/01/ea65c-10AtGU2tDpnSaIwwClCkQgw.png\" alt=\"\"/><figcaption>from assembly via Assembler directly to Machine&nbsp;code</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2019/01/9878f-1JfdOizhMyyJuRmXL-Yk_Dw.png\" alt=\"\"/><figcaption>Compiled Languages — Best Performance/ Lack of portability</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2019/01/33b93-1diwTxtzARUa00gyLjmzc8w.png\" alt=\"\"/><figcaption>Comfortable high-level features/ Worst Performance</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2019/01/668ba-1GKLDAUFVWXjyoE4U7xlV2A.png\" alt=\"\"/><figcaption>a mix between compiled and interpreted languages</figcaption></figure></div>\n\n\n\n<p>We also discussed how the EVM is working and what are its benefits</p>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2019/01/a4a23-1KZIljUvcBOiH4fhCb8-HlA.png\" alt=\"\"/><figcaption>platform independent</figcaption></figure></div>\n\n\n\n<p>Preslav explained the benefits of using Solidity Assembly, but also did not miss to explain the risks related to using it. Using Assembly to achieve features that are not yet introduced into Solidity can come to a high price if one messes up the opcode.</p>\n\n\n\n<p>During the Live Demo, we have been introduced to Basic Operations in Assembly aiming to boost developers confidence when they encounter Assembly at work.</p>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2019/01/ac280-1Ox5mVFGc1rkUEct4y-ypUw.png\" alt=\"\"/><figcaption>Basic operations in&nbsp;Assembly</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2019/01/76c77-1gqbWtp2FZIAu_wK7wPNbyA.jpeg\" alt=\"\"/><figcaption>using jump to implement for loop in&nbsp;Assembly</figcaption></figure></div>\n\n\n\n<p>At the last part of Preslav&#8217;s presentation, we discussed the different types of memory in the EVM and their particularities.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Looking forward to meeting you on our next&nbsp;meetup.</p></blockquote>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>If you liked this article don&#8217;t hesitate to follow us on Medium. We are committed to developing<strong> the best Blockchain Developers Community in Europe</strong>!</p>\n\n\n\n<p>Special thanks to our guest lecturer Preslav Mihaylov and to the host of our fourth meetup SoftUni.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Watch the meetup session here:</p>\n\n\n\n<figure class=\"wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/BPdc_apZRWM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div><figcaption>Introduction to Solidity Assembly &#8211; 0x04 [Blockchain Developers Meetup]</figcaption></figure>\n\n\n\n<h3><strong>References and Resources</strong></h3>\n\n\n\n<ul><li><a href=\"https://speakerdeck.com/pmihaylov/introduction-to-solidity-assembly?fbclid=IwAR1fCr9mdYOmpZVv-GiZBeV_Xl1LFSkV_mVpGu_YFAONlv6D8td4QMSNsI4\" data-href=\"https://speakerdeck.com/pmihaylov/introduction-to-solidity-assembly?fbclid=IwAR1fCr9mdYOmpZVv-GiZBeV_Xl1LFSkV_mVpGu_YFAONlv6D8td4QMSNsI4\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Preslav Mihaylov’s</strong> presentation</a></li><li><a href=\"https://speakerdeck.com/radkov/blockchain-developers-meetup-04\" data-href=\"https://speakerdeck.com/radkov/blockchain-developers-meetup-04\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Hristo Georgiev’s</strong> presentation</a></li><li><a href=\"https://www.youtube.com/watch?v=BPdc_apZRWM\" data-href=\"https://www.youtube.com/watch?v=BPdc_apZRWM\" target=\"_blank\" rel=\"noopener noreferrer\">Video recording</a></li></ul>\n\n\n\n<p><strong>News Sources mentioned in the meetup</strong></p>\n\n\n\n<ul><li><strong>Cardano</strong> &#8211;  <a rel=\"noreferrer noopener\" href=\"https://smartereum.com/37313/cardano-future-forecast-cardano-ada-takes-its-blockchain-to-a-whole-new-level-with-a-new-toolkit-ada-news-today/\" target=\"_blank\">https://smartereum.com/37313/cardano-future-forecast-cardano-ada-takes-its-blockchain-to-a-whole-new-level-with-a-new-toolkit-ada-news-today/</a></li><li><strong>Liquid Network</strong>  &#8211; <a rel=\"noreferrer noopener\" href=\"https://www.ccn.com/liquid-network-blockstreams-bitcoin-sidechain-is-now-live/\" target=\"_blank\">https://www.ccn.com/liquid-network-blockstreams-bitcoin-sidechain-is-now-live/</a></li><li><strong>ETH hard fork </strong> &#8211; <a rel=\"noreferrer noopener\" href=\"https://ethereumworldnews.com/ethereum-constantinople-blockchain-upgrade-delayed-until-2019/\" target=\"_blank\">https://ethereumworldnews.com/ethereum-constantinople-blockchain-upgrade-delayed-until-2019/</a></li><li><strong>Exchanges security</strong>  &#8211; <a data-href=\"https://www.ccn.com/over-half-of-all-crypto-exchanges-have-security-vulnerabilities-report/amp/\" rel=\"noopener noreferrer\" href=\"https://www.ccn.com/over-half-of-all-crypto-exchanges-have-security-vulnerabilities-report/amp/\" target=\"_blank\">https://www.ccn.com/over-half-of-all-crypto-exchanges-have-security-vulnerabilities-report/amp/</a></li><li><strong>Zcash - Sapling </strong> &#8211;  <a data-href=\"https://www.coindesk.com/zcashs-next-upgrade-to-make-private-transactions-100x-lighter-and-6x-faster/\" rel=\"noopener noreferrer\" href=\"https://www.coindesk.com/zcashs-next-upgrade-to-make-private-transactions-100x-lighter-and-6x-faster/\" target=\"_blank\">https://www.coindesk.com/zcashs-next-upgrade-to-make-private-transactions-100x-lighter-and-6x-faster/</a></li><li><strong>Smarter Bitcoin RSK</strong>  &#8211; <a data-href=\"https://www.ccn.com/logistics-firm-completes-first-truckload-shipment-using-bitcoin-smart-contracts/\" rel=\"noopener noreferrer\" href=\"https://www.ccn.com/logistics-firm-completes-first-truckload-shipment-using-bitcoin-smart-contracts/\" target=\"_blank\">https://www.ccn.com/logistics-firm-completes-first-truckload-shipment-using-bitcoin-smart-contracts/</a></li><li><strong>EOS Report </strong> &#8211;  <a data-href=\"https://www.trustnodes.com/2018/11/05/eos-misled-the-public-on-the-number-of-transactions-it-can-handle-says-new-study\" rel=\"noopener noreferrer\" href=\"https://www.trustnodes.com/2018/11/05/eos-misled-the-public-on-the-number-of-transactions-it-can-handle-says-new-study\" target=\"_blank\">https://www.trustnodes.com/2018/11/05/eos-misled-the-public-on-the-number-of-transactions-it-can-handle-says-new-study</a></li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>If you are <strong>interested in talking</strong> on some cool topic, or you want to <strong>propose some topic</strong> to be discussed — just <strong>drop us a line at </strong><a href=\"mailto:events@hack.bg\" data-href=\"mailto:events@hack.bg\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>events@hack.bg</strong></a> or write down a comment / reply.</p>\n\n\n\n<p>If you want to be informed for our next events and meetups — join us:</p>\n\n\n\n<p><strong>Blockchain Developers Meetup Group</strong>:</p>\n\n\n<style type=\"text/css\">#meetup_oembed .mu_clearfix:after { visibility: hidden; display: block; font-size: 0; content: \" \"; clear: both; height: 0; }* html #meetup_oembed .mu_clearfix, *:first-child+html #meetup_oembed .mu_clearfix { zoom: 1; }#meetup_oembed { background:#eee;border:1px solid #ccc;padding:10px;-moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;margin:0; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 12px; }#meetup_oembed h3 { font-weight:normal; margin:0 0 10px; padding:0; line-height:26px; font-family:Georgia,Palatino,serif; font-size:24px }#meetup_oembed p { margin: 0 0 10px; padding:0; line-height:16px; }#meetup_oembed img { border:none; margin:0; padding:0; }#meetup_oembed a, #meetup_oembed a:visited, #meetup_oembed a:link { color: #1B76B3; text-decoration: none; cursor: hand; cursor: pointer; }#meetup_oembed a:hover { color: #1B76B3; text-decoration: underline; }#meetup_oembed a.mu_button { font-size:14px; -moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;border:2px solid #A7241D;color:white!important;text-decoration:none;background-color: #CA3E47; background-image: -moz-linear-gradient(top, #ca3e47, #a8252e); background-image: -webkit-gradient(linear, left bottom, left top, color-stop(0, #a8252e), color-stop(1, #ca3e47));disvplay:inline-block;padding:5px 10px; }#meetup_oembed a.mu_button:hover { color: #fff!important; text-decoration: none; }#meetup_oembed .photo { width:50px; height:50px; overflow:hidden;background:#ccc;float:left;margin:0 5px 0 0;text-align:center;padding:1px; }#meetup_oembed .photo img { height:50px }#meetup_oembed .number { font-size:18px; }#meetup_oembed .thing { text-transform: uppercase; color: #555; }</style>\n<div id=\"meetup_oembed\" style=\"height:423px\">\n<div style=\"overflow:hidden;max-height:383px\">\n<h3>Blockchain Developers Meetup (Bulgaria)</h3>\n<p style=\"margin:0 0 10px;font-size:12px;line-height:16px;\">Sofia, BG <br />          <span style=\"font-size:14px;font-weight:bold;\">144</span> <em>Developers</em></p>\n<p>          <a href=\"https://www.meetup.com/Blockchain-Developers-Meetup-Bulgaria/\" target=\"_blank\"><img src=\"https://secure.meetupstatic.com/photos/event/6/0/a/7/600_472464743.jpeg\" style=\"float:right;max-width:150px;margin-right:0;\" /></a>                          </p>\n<div style=\"margin-right:170px;line-height:16px;\">In this group, we will share knowledge about blockchain and smart contract development. We will talk about Ethereum, Aeternity, Polkadot, NEO, EOS, RSK, Hyperledger and other &#8230;</div>\n<p style=\"font-size:16px;margin:10px 0 5px;line-height:18px;\">Next Meetup</p>\n<p style=\"margin-bottom:2px;line-height:16px;font-size:14px;\"><a href=\"https://www.meetup.com/Blockchain-Developers-Meetup-Bulgaria/events/260215703/\" target=\"_blank\">0x09. TBA</a></p>\n<p style=\"line-height:18px;\">Thursday, Apr 25, 2019,  7:00 PM<br /><span style=\"color:#4F8A10;\">1 Attending</span></p>\n</p></div>\n<p style=\"margin:10px 0 5px;\"><a href=\"https://www.meetup.com/Blockchain-Developers-Meetup-Bulgaria/\" target=\"_blank\" class=\"mu_button\">Check out this Meetup Group &rarr;</a></p>\n</div>\n\n\n\n<p><strong>Blockchain Developers Facebook Group</strong>:</p>\n\n\n\n<ul><li><a href=\"http://facebook.com/groups/BlockchainDevelopersMeetup\">Blockchain Developers Meetup Facebook Group</a></li></ul>\n\n\n\n<p><strong>Website</strong>: <a href=\"https://hack.bg\" data-href=\"https://hack.bg\" target=\"_blank\" rel=\"noopener noreferrer\">https://hack.bg</a></p>\n\n\n\n<p><strong>Follow us on social media:</strong></p>\n\n\n\n<ul><li><a href=\"https://twitter.com/hack_bg\" data-href=\"https://twitter.com/hack_bg\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a></li><li><a href=\"https://facebook.com/hackbg\" data-href=\"https://facebook.com/hackbg\" target=\"_blank\" rel=\"noopener noreferrer\">Facebook</a></li><li><a href=\"https://www.linkedin.com/company/hackbg-blockchain-web-software-solutions/\" data-href=\"https://www.linkedin.com/company/hackbg-blockchain-web-software-solutions/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a></li></ul>\n","excerpt":"<p>Four months had passed since the kick off of our awesome blockchain developers meetup. So far we’ve had very good speakers and topics. Moreover, we are happy to see new faces in the rows and to see our community growing. This time we had a small technical issue, the youtube live stream crashed a few [&hellip;]</p>\n","categories":[{"id":"5","title":"Events","path":"/category/events/"},{"id":"71","title":"Meet-ups","path":"/category/meetups/"}],"author":{"name":"Hristo Georgiev","path":"/author/hgeorgiev/"}}}]}}},"context":{}}