{"hash":"4d4e9c5907444b026e43a64dd24660bb5eaf59e2","data":{"tag":{"title":"Tutorial","belongsTo":{"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"date":"2020-03-29T21:36:50","id":"1667","title":"From zero to a fully-fledged aeternity decentralized application in less than 10 minutes","path":"/blog/from-zero-to-fully-fledged-decentralized-application-in-less-than-10-minutes/","content":"\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"453\" src=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-1024x453.png\" alt=\"\" class=\"wp-image-1775\" srcset=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-1024x453.png 1024w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-300x133.png 300w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-768x340.png 768w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.38.18-2-1038x459.png 1038w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h2>Intro</h2>\n\n\n\n<p>Let&#8217;s be honest and put the cards down &#8211; if you really need to build a production-ready decentralized application 10 minutes won&#8217;t be nearly enough for sure, and if you are not familiar with the technology you might need some assistance with the <a href=\"https://hack.bg/dlt-blockchain-development-services/smart-contracts-development/\">smart contracts development</a> and setup.  </p>\n\n\n\n<p>Developing such a <a href=\"https://hack.bg/dlt-blockchain-development-services/decentralized-applications-development/\">decentralized application</a> will be a combination of planning and structuring the architecture of the project, drafting and designing the user interface (UI), writing, testing and deploying the smart contracts needed for the dapp to run its business logic â€¦ and combining all this together. This also involves a wide variety of technology stack options, depending on the desired outcome and use-case.</p>\n\n\n\n<p>For the purpose of this tutorial though, we will develop an app from scratch to a working decentralized application on aeternity blockchain with a simple frontend.</p>\n\n\n\n<p>Now let the timer start:</p>\n\n\n\n<h3>1. Initialize our project</h3>\n\n\n\n<p>We will use the <a href=\"https://github.com/aeternity/aepp-aeproject-js\">aeproject</a> tool which will allow us to easily set up the development environment locally.</p>\n\n\n\n<ul><li>dependencies<ul><li>docker</li><li>npm &amp; node</li></ul></li></ul>\n\n\n\n<p>Install globally</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g aeproject</code></pre>\n\n\n\n<p>Initialize project</p>\n\n\n\n<pre class=\"wp-block-code\"><code>aeproject init</code></pre>\n\n\n\n<h3>2. Write our smart contract(s)</h3>\n\n\n\n<p>In this step, we will develop a simple smart contract that is only storing an integer (number) in its state on the blockchain.</p>\n\n\n\n<p>Let&#8217;s also add a getter method which will allow us to read from the contract state.</p>\n\n\n\n<p>Usually, we will do something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@compiler >= 4\n\ncontract MyContract =\n   record state = { number: int }\n   entrypoint init() : state = { number = 0 }\n   stateful entrypoint set(x: int) = put(state{number = x})\n   stateful entrypoint get() : int = state.number</code></pre>\n\n\n\n<p>In our case, we can further simplify our contract since we are only storing a single integer value. As we know Sophia contracts have restricted mutable state and it is a strongly typed language so we need to define it initially.</p>\n\n\n\n<p>In this case, we can define our <code>state</code> to be of <code>type</code> <code>int</code> as we don&#8217;t need the whole <code>record</code> structure for this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@compiler >= 4\n\ncontract MyContract =\n   type state = int\n   entrypoint init() : state = 0\n   stateful entrypoint set(x: int) = put(x)\n   stateful entrypoint get() : int = state</code></pre>\n\n\n\n<p>Here is the same contract, written in Solidity, on Ethereum blockchain just for comparison if you are more familiar with Solidity &#8230; or not:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pragma solidity >=0.5.0 &lt;0.6.0; \n\ncontract MyContract {\n    uint256 number;\n    constructor() public {\n        number = 0;\n    }\n    function set(uint256 _number) public {\n        number = _number;\n    }\n    function get() public view returns (uint256) {\n        return number;    \n    }\n}</code></pre>\n\n\n\n<h3>3. Deploy</h3>\n\n\n\n<p>In order for us to deploy to an actual <code>testnet</code> or <code>mainnet</code> we need to have some AE tokens on the selected network, so we can pay the mining fee for the transactions we will make to the blockchain.</p>\n\n\n\n<p>Note: We could also deploy it on a local testnet which can be started via <code>aeproject node</code></p>\n\n\n\n<h4>3.1. Create a wallet</h4>\n\n\n\n<p>If we do not yet have a wallet which will be used for deployment we need to generate ourselves one:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>aecli account create &lt;WALLET_NAME></code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Note: To quickly test all of Aeternity's blockchain features from your Terminal, you can Install and use our NodeJS CLI by running:\n\nnpm i -g @aeternity/aepp-cli\naecli --help</code></pre>\n\n\n\n<h4>3.2. Fund the wallet</h4>\n\n\n\n<p>We will get some testnet AE tokens from the <a href=\"https://faucet.testnet.aepps.com\">faucet</a>, so we can deploy the contract.</p>\n\n\n\n<h4>3.3. Get our private key</h4>\n\n\n\n<p>We are going to be deploying via the command-line interface (CLI), so we will need to have our private key to pass it to the deployer.</p>\n\n\n\n<p>Get our private key:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>aecli account address &lt;WALLET_NAME> --privateKey</code></pre>\n\n\n\n<h4>3.4. Deploy to testnet</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>aeproject deploy -n testnet -s &lt;SECRET_KEY> --compiler https://latest.compiler.aepps.com</code></pre>\n\n\n\n<h3>4. Interaction with the contract</h3>\n\n\n\n<p>There are multiple we can interact with our contract. The first and most easier is to use one of the online IDEs available out there &#8211; contracts.aeternity.art, fireeditor etc.</p>\n\n\n\n<h4>4.1. Online IDE.</h4>\n\n\n\n<ol><li>contracts.aeternity.art &#8211; we put our contract code in the editor and we can access our contract by adding the address in the <code>&lt;Address&gt;</code> field so we can interact with it.<br> <code>set</code> &#8211; for setting a new value in the smart contract we have to make a stateful call (which modifies the state and costs gas)<br><code>get</code> &#8211; our getter we can access by calling static function.<br></li><li>fireeditor.nikitafuchs.de &#8211; Same as above we can put our contract code and access the freshly deployed contract <strong>at address</strong>.<br></li></ol>\n\n\n\n<h4>4.2. via the SDK</h4>\n\n\n\n<p>We can access our contract instance via this simple command and start interacting with it.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>await sdk.getContractInstance(CONTRACT_SOURCE, { contractAddress: OUR_CONTRACT_ADDRESS} );</code></pre>\n\n\n\n<p>Of course we will first have to set up our project and intialize the SDK there.</p>\n\n\n\n<h3>5. Fully-fledged Decentralized app</h3>\n\n\n\n<h4>5.1. Set up frontend</h4>\n\n\n\n<p>In order to setup our simple fronted we will use the waellet boilerplate repo which is pre-configured to communicate with the waellet extension and has the aeternity javascript sdk already prepared there. </p>\n\n\n\n<pre class=\"wp-block-code\"><code>git clone https://github.com/waellet/waellet-aepp-boilerplate &amp;&amp; cd\nnpm install</code></pre>\n\n\n\n<h4>5.2. Add the contract interface (or the full contract code)</h4>\n\n\n\n<p>We need to add our contract interface in the app, so we can call the correct methods and encode the transactions properly. This is similar to the ABI in Solidity for example.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"460\" src=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-1024x460.png\" alt=\"\" class=\"wp-image-1763\" srcset=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-1024x460.png 1024w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-300x135.png 300w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-768x345.png 768w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25-1038x466.png 1038w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-19-at-8.06.25.png 1310w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>https://github.com/waellet/waellet-aepp-boilerplate/blob/23419a910f668069990f96b775bd119aba70f8d3/src/views/Home/Index.vue#L204-L216</figcaption></figure>\n\n\n\n<h4>5.3. Setup function calls </h4>\n\n\n\n<p>We also need to setup the contract methods calls in the app. </p>\n\n\n\n<h4>5.4. run</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>npm run serve</code></pre>\n\n\n\n<p>We can now access our app at <code>localhost:3000</code>:</p>\n\n\n\n<p>We can interact with the contract with the two sample buttons there.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"909\" src=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-1024x909.png\" alt=\"\" class=\"wp-image-1769\" srcset=\"https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-1024x909.png 1024w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-300x266.png 300w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-768x682.png 768w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41-649x576.png 649w, https://hack.bg/wp-content/uploads/2020/03/Screenshot-2020-03-29-at-21.30.41.png 1376w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n","excerpt":"<p>Intro Let&#8217;s be honest and put the cards down &#8211; if you really need to build a production-ready decentralized application [&hellip;]</p>\n","categories":[{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/"},{"id":"4","title":"Tutorials","path":"/category/tutorials/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-01-23T20:11:11","id":"533","title":"Building Voting Ã¦pp with Sophia ML on Ã¦ternity blockchain","path":"/blog/building-voting-aepp-with-sophia-ml-on-aeternity-blockchain/","content":"\n<p>Time is passing by and we are getting more experienced in writing smart contracts with Sophia ML language on Ã¦<g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\">ternity</g> blockchain.</p>\n\n\n\n<p>In this tutorial, I&#8217;d like to share with you a simple voting decentralized <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aepp</g> solution that we&#8217;ve built during the Ã¦pps summit in Turkey, which I took part in.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"960\" height=\"540\" src=\"https://hack.bg/wp-content/uploads/2019/01/aepps-summit.jpg\" alt=\"\" class=\"wp-image-542\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/aepps-summit.jpg 960w, https://hack.bg/wp-content/uploads/2019/01/aepps-summit-300x169.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/aepps-summit-768x432.jpg 768w\" sizes=\"(max-width: 960px) 100vw, 960px\" /><figcaption>photo by nikita fuchs</figcaption></figure></div>\n\n\n\n<p>This was one of my first times interacting with Sophia ML smart contracts, and while at the Ã¦pps summit I&#8217;ve gathered some cool and enthusiastic people, and made ourselves sort of a studying group. We decided to brainstorm and learn together while developing this voting <g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\">aepp</g>. This is the short summary of what we&#8217;ve decided our voting <g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"7\" data-gr-id=\"7\">aepp</g> will be doing:</p>\n\n\n\n<ol><li>Add candidates to vote for</li><li>Allow users to give their vote for a certain candidate</li><li>Count the votes that every candidate gathered</li></ol>\n\n\n\n<p class=\"note\">You can <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">try</g> push the <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aepp&#8217;s</g> functionalities further, with more sophisticated functions and use case, you can try doing it <g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"7\" data-gr-id=\"7\">yourself,</g> <g class=\"gr_ gr_25 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"25\" data-gr-id=\"25\">like</g> we did. Try it &#8211; its fun.</p>\n\n\n\n<h2>Setting up project and development <g class=\"gr_ gr_109 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace gr-progress\" id=\"109\" data-gr-id=\"109\">environment</g></h2>\n\n\n\n<p><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">First</g> we have to initialize our project where we will write <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"4\" data-gr-id=\"4\">the smart</g> contract. In order to do that we will be using <code>forgae</code>. Take a look at the <a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\">Build first </a><g class=\"gr_ gr_92 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"92\" data-gr-id=\"92\"><a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\">aeternity</a></g><a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\"> application with Sophia ML tutorial</a> and follow the steps to initialize your project.</p>\n\n\n\n<h2>Smart contract</h2>\n\n\n\n<p>As you probably already know (if you&#8217;ve followed the previous tutorial), in <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">Sophia</g> ML we have a <strong>state</strong> which is the place where we store data on-chain, and it is the only thing in the smart contract that can be mutated (overwritten).</p>\n\n\n\n<p>The first thing we do is to define our variables and types that we are going to use in the smart contract. And <g class=\"gr_ gr_217 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"217\" data-gr-id=\"217\">the </g><code>init()</code><g class=\"gr_ gr_217 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"217\" data-gr-id=\"217\"> function</g> which is the constructor basically, if we compare this to a Solidity smart contract.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>contract Vote =\n   type candidate = address\n   type votes = list(address)\n\n   record state = \n      { vote : map(candidate, votes) }\n\n   public function init() : state = \n      { vote = { } }</code></pre>\n\n\n\n<p>We are defining <g class=\"gr_ gr_263 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"263\" data-gr-id=\"263\">the </g><code>candidate</code><g class=\"gr_ gr_263 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"263\" data-gr-id=\"263\"> type</g> as address, and votes as a <strong>list</strong> of addresses. And the <code>state</code> record will be storing a map (key-value-pair) of <code>candidate</code> to <code>votes</code>.<br></p>\n\n\n\n<p><del>Starting with the first functionality for the aepp &#8211; adding candidates:</del></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><del>  public stateful function add_candidate(candidate: address) : bool =       is_candidate(candidate)       true</del></code></pre>\n\n\n\n<p><del>What this does is passing the candidate to the </del><code><del>is_candiate()</del></code><del> function &#8211; taking a candidate&#8217;s address as a parameter, checking if there is a candidate defined at with this address and saving it to the </del><strong><del>votes</del></strong><del> mapping in the state with the initial empty list of voters if not.</del><br></p>\n\n\n\n<p><del>Here are the helper functions we are using for this:</del></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><del>   private stateful function is_candidate(candidate: address) =       let candidate_found = lookupByAddress(candidate, state.votes, { voters = [] })       if (size(candidate_found.voters) == 0)          put(state{             votes[candidate] = { voters = [] } })    private function lookupByAddress(k : address, m, v) =       switch(Map.lookup(k,m))          None => v          Some(x) => x</del></code></pre>\n\n\n\n<p>We are doing this because in Sophia ML we don&#8217;t have a default value of 0x0/false as in Solidity for example. So, in order for us to cast a vote, we need to first have added the candidates which we can vote for.</p>\n\n\n\n<p class=\"note\">If we don&#8217;t add the candidate first, before voting, we will hit <code>out of gas</code> error.</p>\n\n\n\n<p>Next we create the vote function which looks like this:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>public stateful function vote(vote_for: candidate) =\n      put(state{ vote[vote_for = []] @ vs = Call.caller :: vs })</code></pre>\n\n\n\n<p>We access the transaction initiator&#8217;s address by the <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">built </g><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\"><g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">in</g> </g><code>Call.caller</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> and</g> prepend <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">it </g><code>::</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> to</g> the current list of voters. Using this <g class=\"gr_ gr_23 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"23\" data-gr-id=\"23\">syntx</g> we <g class=\"gr_ gr_32 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"32\" data-gr-id=\"32\">dont</g> need to worry whether the candidate was initialized or not.</p>\n\n\n\n<p><g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"9\" data-gr-id=\"9\">Last</g> thing is the get votes count function.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>public function count_votes(count_for : candidate) =\n      length(state.vote[count_for = []])</code></pre>\n\n\n\n<p>Here we are using a custom <code>length</code> function which we define as a helper function below. Here is the code and below we can see the explanation.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>private function length(l : list('a)) : int = length'(l, 0)\n</code></pre>\n\n\n\n<p>This is where things get a bit more complicated, so I will try to explain what is happening here.</p>\n\n\n\n<p>Since in Sophia ML we don&#8217;t have <code>.count</code> or <code>.length</code> to get the list length, we need to make ourselves a helper function which will make a recursion and will iterate over the list while incrementing a counter.</p>\n\n\n\n<p>The <code>length</code> function is defined to accept a list <g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"9\" data-gr-id=\"9\">of </g><code>'a</code><g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"9\" data-gr-id=\"9\"> which</g> is the convention for a generic <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">type,</g> and a return <g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"11\" data-gr-id=\"11\">type </g><code>int</code><g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"11\" data-gr-id=\"11\"> .</g> In the function&#8217;s <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">body</g> we are calling <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"10\" data-gr-id=\"10\">the </g><code>length'</code><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\"> </g><g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"7\" data-gr-id=\"7\"><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\">function</g>,</g> while passing the list and an initial value for the counter.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>private function length'(l : list('a), x : int) : int =       switch(l)          [] => x          _ :: l' => length'(l', x + 1)</code></pre>\n\n\n\n<p>And here the magic happens, we use <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"6\" data-gr-id=\"6\">the </g><code>switch</code><g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"6\" data-gr-id=\"6\"> statement</g> with 2 cases <code>[] => x</code> &#8211; which returns the value of the counter and breaks the recursion if the list is empty. And <code>_ :: l' => length'(l', x+1)</code> &#8211; meaning we are using a pattern matching and we are separating the first element from the list and the remainder and then recursively passing the list&#8217;s remainder to the same <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">function,</g> while incrementing the counter.</p>\n\n\n\n<p>The whole smart contract code looks like this in the end</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/d05aeb76c59e2098d54dc900e94aaa41.js\"></script><figcaption>Sophia ML basic voting aepp</figcaption></figure>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>It is fairly simple to create a basic aepp on Ã¦ternity blockchain using Sophia ML. In our case with the ae-vote we stumbled upon some tricky parts like the recursive iteration, we had to make above, but when you familiarize yourself with the language it is easier.</p>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<ul><li><a href=\"https://github.com/mradkov/ae-vote\">Github repo of the project</a></li><li><a href=\"https://github.com/aeternity/protocol/blob/master/contracts/sophia.md\">Sophia documentation</a></li><li><a href=\"https://dev.aepps.com/\">Ã¦ternity documentation</a></li></ul>\n","excerpt":"<p>Time is passing by and we are getting more experienced in writing smart contracts with Sophia ML language on Ã¦ternity [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"},{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/"}],"author":{"name":"Milen","path":"/author/milen/"}}}]}}},"context":{}}