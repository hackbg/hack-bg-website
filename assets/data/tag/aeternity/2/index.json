{"hash":"9ebf49f48fb2e48bddd0de8872a49da072e6dff7","data":{"tag":{"title":"Aeternity","belongsTo":{"pageInfo":{"totalPages":2,"currentPage":2},"edges":[{"node":{"date":"2019-01-23T20:11:11","id":"533","title":"Building Voting æpp with Sophia ML on æternity blockchain","path":"/blog/building-voting-aepp-with-sophia-ml-on-aeternity-blockchain/","content":"\n<p>Time is passing by and we are getting more experienced in writing smart contracts with Sophia ML language on æ<g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\">ternity</g> blockchain.</p>\n\n\n\n<p>In this tutorial, I&#8217;d like to share with you a simple voting decentralized <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aepp</g> solution that we&#8217;ve built during the æpps summit in Turkey, which I took part in.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"960\" height=\"540\" src=\"https://hack.bg/wp-content/uploads/2019/01/aepps-summit.jpg\" alt=\"\" class=\"wp-image-542\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/aepps-summit.jpg 960w, https://hack.bg/wp-content/uploads/2019/01/aepps-summit-300x169.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/aepps-summit-768x432.jpg 768w\" sizes=\"(max-width: 960px) 100vw, 960px\" /><figcaption>photo by nikita fuchs</figcaption></figure></div>\n\n\n\n<p>This was one of my first times interacting with Sophia ML smart contracts, and while at the æpps summit I&#8217;ve gathered some cool and enthusiastic people, and made ourselves sort of a studying group. We decided to brainstorm and learn together while developing this voting <g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\">aepp</g>. This is the short summary of what we&#8217;ve decided our voting <g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"7\" data-gr-id=\"7\">aepp</g> will be doing:</p>\n\n\n\n<ol><li>Add candidates to vote for</li><li>Allow users to give their vote for a certain candidate</li><li>Count the votes that every candidate gathered</li></ol>\n\n\n\n<p class=\"note\">You can <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">try</g> push the <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aepp&#8217;s</g> functionalities further, with more sophisticated functions and use case, you can try doing it <g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"7\" data-gr-id=\"7\">yourself,</g> <g class=\"gr_ gr_25 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"25\" data-gr-id=\"25\">like</g> we did. Try it &#8211; its fun.</p>\n\n\n\n<h2>Setting up project and development <g class=\"gr_ gr_109 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace gr-progress\" id=\"109\" data-gr-id=\"109\">environment</g></h2>\n\n\n\n<p><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">First</g> we have to initialize our project where we will write <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"4\" data-gr-id=\"4\">the smart</g> contract. In order to do that we will be using <code>forgae</code>. Take a look at the <a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\">Build first </a><g class=\"gr_ gr_92 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"92\" data-gr-id=\"92\"><a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\">aeternity</a></g><a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\"> application with Sophia ML tutorial</a> and follow the steps to initialize your project.</p>\n\n\n\n<h2>Smart contract</h2>\n\n\n\n<p>As you probably already know (if you&#8217;ve followed the previous tutorial), in <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">Sophia</g> ML we have a <strong>state</strong> which is the place where we store data on-chain, and it is the only thing in the smart contract that can be mutated (overwritten).</p>\n\n\n\n<p>The first thing we do is to define our variables and types that we are going to use in the smart contract. And <g class=\"gr_ gr_217 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"217\" data-gr-id=\"217\">the </g><code>init()</code><g class=\"gr_ gr_217 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"217\" data-gr-id=\"217\"> function</g> which is the constructor basically, if we compare this to a Solidity smart contract.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>contract Vote =\n   type candidate = address\n   type votes = list(address)\n\n   record state = \n      { vote : map(candidate, votes) }\n\n   public function init() : state = \n      { vote = { } }</code></pre>\n\n\n\n<p>We are defining <g class=\"gr_ gr_263 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"263\" data-gr-id=\"263\">the </g><code>candidate</code><g class=\"gr_ gr_263 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"263\" data-gr-id=\"263\"> type</g> as address, and votes as a <strong>list</strong> of addresses. And the <code>state</code> record will be storing a map (key-value-pair) of <code>candidate</code> to <code>votes</code>.<br></p>\n\n\n\n<p><del>Starting with the first functionality for the aepp &#8211; adding candidates:</del></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><del>  public stateful function add_candidate(candidate: address) : bool =       is_candidate(candidate)       true</del></code></pre>\n\n\n\n<p><del>What this does is passing the candidate to the </del><code><del>is_candiate()</del></code><del> function &#8211; taking a candidate&#8217;s address as a parameter, checking if there is a candidate defined at with this address and saving it to the </del><strong><del>votes</del></strong><del> mapping in the state with the initial empty list of voters if not.</del><br></p>\n\n\n\n<p><del>Here are the helper functions we are using for this:</del></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><del>   private stateful function is_candidate(candidate: address) =       let candidate_found = lookupByAddress(candidate, state.votes, { voters = [] })       if (size(candidate_found.voters) == 0)          put(state{             votes[candidate] = { voters = [] } })    private function lookupByAddress(k : address, m, v) =       switch(Map.lookup(k,m))          None => v          Some(x) => x</del></code></pre>\n\n\n\n<p>We are doing this because in Sophia ML we don&#8217;t have a default value of 0x0/false as in Solidity for example. So, in order for us to cast a vote, we need to first have added the candidates which we can vote for.</p>\n\n\n\n<p class=\"note\">If we don&#8217;t add the candidate first, before voting, we will hit <code>out of gas</code> error.</p>\n\n\n\n<p>Next we create the vote function which looks like this:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>public stateful function vote(vote_for: candidate) =\n      put(state{ vote[vote_for = []] @ vs = Call.caller :: vs })</code></pre>\n\n\n\n<p>We access the transaction initiator&#8217;s address by the <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">built </g><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\"><g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">in</g> </g><code>Call.caller</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> and</g> prepend <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">it </g><code>::</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> to</g> the current list of voters. Using this <g class=\"gr_ gr_23 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"23\" data-gr-id=\"23\">syntx</g> we <g class=\"gr_ gr_32 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"32\" data-gr-id=\"32\">dont</g> need to worry whether the candidate was initialized or not.</p>\n\n\n\n<p><g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"9\" data-gr-id=\"9\">Last</g> thing is the get votes count function.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>public function count_votes(count_for : candidate) =\n      length(state.vote[count_for = []])</code></pre>\n\n\n\n<p>Here we are using a custom <code>length</code> function which we define as a helper function below. Here is the code and below we can see the explanation.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>private function length(l : list('a)) : int = length'(l, 0)\n</code></pre>\n\n\n\n<p>This is where things get a bit more complicated, so I will try to explain what is happening here.</p>\n\n\n\n<p>Since in Sophia ML we don&#8217;t have <code>.count</code> or <code>.length</code> to get the list length, we need to make ourselves a helper function which will make a recursion and will iterate over the list while incrementing a counter.</p>\n\n\n\n<p>The <code>length</code> function is defined to accept a list <g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"9\" data-gr-id=\"9\">of </g><code>'a</code><g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"9\" data-gr-id=\"9\"> which</g> is the convention for a generic <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">type,</g> and a return <g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"11\" data-gr-id=\"11\">type </g><code>int</code><g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"11\" data-gr-id=\"11\"> .</g> In the function&#8217;s <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">body</g> we are calling <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"10\" data-gr-id=\"10\">the </g><code>length'</code><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\"> </g><g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"7\" data-gr-id=\"7\"><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\">function</g>,</g> while passing the list and an initial value for the counter.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>private function length'(l : list('a), x : int) : int =       switch(l)          [] => x          _ :: l' => length'(l', x + 1)</code></pre>\n\n\n\n<p>And here the magic happens, we use <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"6\" data-gr-id=\"6\">the </g><code>switch</code><g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"6\" data-gr-id=\"6\"> statement</g> with 2 cases <code>[] => x</code> &#8211; which returns the value of the counter and breaks the recursion if the list is empty. And <code>_ :: l' => length'(l', x+1)</code> &#8211; meaning we are using a pattern matching and we are separating the first element from the list and the remainder and then recursively passing the list&#8217;s remainder to the same <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">function,</g> while incrementing the counter.</p>\n\n\n\n<p>The whole smart contract code looks like this in the end</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/d05aeb76c59e2098d54dc900e94aaa41.js\"></script><figcaption>Sophia ML basic voting aepp</figcaption></figure>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>It is fairly simple to create a basic aepp on æternity blockchain using Sophia ML. In our case with the ae-vote we stumbled upon some tricky parts like the recursive iteration, we had to make above, but when you familiarize yourself with the language it is easier.</p>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<ul><li><a href=\"https://github.com/mradkov/ae-vote\">Github repo of the project</a></li><li><a href=\"https://github.com/aeternity/protocol/blob/master/contracts/sophia.md\">Sophia documentation</a></li><li><a href=\"https://dev.aepps.com/\">æternity documentation</a></li></ul>\n","excerpt":"<p>Time is passing by and we are getting more experienced in writing smart contracts with Sophia ML language on æternity [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"},{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-01-10T10:59:33","id":"449","title":"Build your first decentralized application (aepp) on Aeternity blockchain &#8211; Sophia ML smart contract &#8211; Address Book","path":"/blog/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/","content":"\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-1024x576.jpg\" alt=\"Sophia aeternity\" class=\"wp-image-500\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-1024x576.jpg 1024w, https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-300x169.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-768x432.jpg 768w, https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-1025x576.jpg 1025w, https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity.jpg 1334w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Sophia aeternity</figcaption></figure>\n\n\n\n<p class=\"has-drop-cap has-text-align-left\">Æternity blockchain is live after long period of waiting, the community is big and the core developers are top skilled. The project offers smart contracts development platform for decentralized applications dapps or how they call them &#8211; æpps.</p>\n\n\n\n<p class=\"has-text-align-left\">In this tutorial we are going to create a simple smart contract in Sophia ML programming language &#8211; address book <g class=\"gr_ gr_4 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"4\" data-gr-id=\"4\">aepp</g>. We will create, compile, test and deploy the smart contract.<br></p>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<ul><li><a href=\"https://docs.docker.com/compose/install/\">Docker</a></li><li><s>Forgae</s> <a href=\"https://www.npmjs.com/package/aeproject\">AEproject</a></li><li><a href=\"https://github.com/aeternity/aepp-cli-js\">Aecli</a> * (optional if we want to do something with the sdk like encode/decode address by publicKey or signTx)</li></ul>\n\n\n\n<p class=\"has-text-align-left\">Docker we need for running local aeternity node for compiling, testing and development environment. Assuming you already have <g class=\"gr_ gr_52 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"52\" data-gr-id=\"52\">docker</g> installed on your machine we move on, if not &#8211; please follow the guide in their official website and then continue with the steps below.</p>\n\n\n\n<p class=\"has-text-align-left\"><g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\"><s>Forgae</s> AEproject</g> is <g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"14\" data-gr-id=\"14\">an æternity</g> development framework which helps with setting up a project. The framework makes the development of smart contracts in the <g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\">aeternity</g> network pretty easily. It provides commands for the compilation of smart contracts, running a local Epoch and unit testing the contracts.<br></p>\n\n\n\n<p class=\"has-text-align-left\">We install it globally via:</p>\n\n\n\n<pre><code>npm install -g aeproject</code></pre>\n\n\n\n<p class=\"has-text-align-left\">After installing <s>forgae</s> AEproject we can verify everything went well with <code>aeproject --help</code> which will also get us familiarize with the commands and options it has.</p>\n\n\n\n<pre><code>Usage: aeproject [options] [command]\n\nOptions:\n  -V, --version      output the version number\n  -h, --help         output usage information\n\nCommands:\n  init [options]     Initialize AEProject\n  compile [options]  Compile contracts\n  test [options]     Running the tests\n  node [options]     Running a local node. Without any argument node will be runned with --start argument\n  deploy [options]   Run deploy script</code></pre>\n\n\n\n<p class=\"has-text-align-left\">We are almost done with the setup. The last tool we need is <code>aecli</code> which is æternity&#8217;s JavaScript SDK command-line interface. It is still not available as <g class=\"gr_ gr_693 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"693\" data-gr-id=\"693\">a <g class=\"gr_ gr_691 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"691\" data-gr-id=\"691\">npm</g></g> package, so for us to use it we should clone the repository, install from source and then link it to our local <g class=\"gr_ gr_587 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling\" id=\"587\" data-gr-id=\"587\">npm</g> manually.<br></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>git clone https://github.com/aeternity/aepp-cli-js.git</code></pre>\n\n\n\n<p class=\"has-text-align-left\">We then need to enter into the cloned repository with:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>cd aepp-cli-js</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Run <code>npm link</code> in order to link the AECLI to <code>aecli/bin/aecli.js</code> (<em>If you have any folder permission issues, try running with sudo <code>sudo npm link</code></em>)</p>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p><code>npm link</code> <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins doubleReplace replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">command</g> will create a symlink in the global node_modules folder and expose the CLI binary to be used through the terminal.</p><cite>npm link</cite></blockquote>\n\n\n\n<p class=\"has-text-align-left\">and lastly we should run<code>npm install</code> so npm update its packages and symlinks.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Now if everything went well our environment is set and ready to start developing sophia smart contracts on æternity. </p>\n\n\n\n<h3>Project init</h3>\n\n\n\n<p class=\"has-text-align-left\">As always, first we need to create a directory where our project files will be placed:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>mkdir addressbook-aepp</code><br><code>cd addressbook-aepp</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Then we initialize our project with <code>aeproject init</code> which will create for us all the necessary files and directories.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject init</code></pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp.png\" alt=\"Initialization of aeternity aepp with forgae\" class=\"wp-image-461\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>Initialization of aeternity aepp with forgae</figcaption></figure></div>\n\n\n\n<p class=\"has-text-align-left\">If we look at our project directory we will see that we now have <strong>contracts</strong>, <strong>deployment</strong>, <strong>test</strong> directories where our focus will mainly be, as well as other config files like package.json and docker-compose.yml.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory.png\" alt=\"forgae init project directory\" class=\"wp-image-470\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>forgae init project directory</figcaption></figure></div>\n\n\n\n<p class=\"has-text-align-left\">Now we need to <strong>start docker</strong> and then start our local node with:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject node</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p>The <strong>node</strong> command help developers run their <g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"11\" data-gr-id=\"11\">local  network</g> on docker. The local network contains 3 nodes. To spawn a fully functional <g class=\"gr_ gr_12 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"12\" data-gr-id=\"12\">network  takes</g> <g class=\"gr_ gr_8 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"8\" data-gr-id=\"8\">couple</g> of minutes. At the end of this <g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"9\" data-gr-id=\"9\">command</g> you will <g class=\"gr_ gr_13 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"13\" data-gr-id=\"13\">be  presented</g> with accounts that you can use in your unit tests.</p><cite>documentation</cite></blockquote>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-node.png\" alt=\"forgae node initialized successfully\" class=\"wp-image-468\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-node.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>forgae node initialized successfully</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding.png\" alt=\"forgae node gives us preset test accounts\" class=\"wp-image-469\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>forgae node gives us preset test accounts</figcaption></figure></div>\n\n\n\n<p class=\"has-text-align-left\">To stop the local node, simply run</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject node --stop</code></pre>\n\n\n\n<p>Additionally we need to start the local compiler the same way as we start the node.</p>\n\n\n\n<p><code>aeproject compiler</code></p>\n\n\n\n<h2>Write Sophia ML smart contracts</h2>\n\n\n\n<p class=\"has-text-align-left\">When we initialized our project with <code>aeproject init</code> it automatically created for us an <code>ExampleContract.aes</code> file, which name speaks for what it is. Its content looks like this:<br></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>@compiler &gt;= 4\ncontract ExampleContract =\n    type state = ()\n    function main(x : int) = x</code></pre>\n\n\n\n<p class=\"has-text-align-left\">This example contract has one function which accepts a single argument of <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\">type </g><code>int</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> and</g> returns the value of the passed <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">argument </g><code>x</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\">.</g></p>\n\n\n\n<p class=\"has-text-align-left\">If this is your first time looking at Sophia smart contract, you probably notice that it is quite different from Solidity for example, and looks much similar to Python. </p>\n\n\n\n<p class=\"has-text-align-left\"><g class=\"gr_ gr_4 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"4\" data-gr-id=\"4\">Aeternity&#8217;s</g> Sophia is <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar multiReplace\" id=\"5\" data-gr-id=\"5\">a ML</g>-family language. It is strongly typed and has restricted mutable state. <a href=\"https://github.com/aeternity/protocol/blob/master/contracts/sophia.md\">Sophia</a> is developed to be used for creating smart contracts on Aeternity Blockchain, so some of the conventional languages&#8217; features are missing, but other blockchain specific primitives, types and constructions are added and supported.</p>\n\n\n\n<p class=\"has-text-align-left\">Okay, we move on to the fun part. We now hit the delete button and get rid of the <code>ExampleContract.aes</code>. </p>\n\n\n\n<p class=\"has-text-align-left\">We create our <code>AddressBook.aes</code> sophia smart contract in the <code>contracts</code>folder and open it with our favorite editor (in my case VIM).</p>\n\n\n\n<p class=\"has-text-align-left\">We define the name of our smart contract, following the example above:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>contract AddressBook =<br><br></code></pre>\n\n\n\n<p class=\"note\">Note: Indentation is important in Sophia language, so keep that in mind.</p>\n\n\n\n<p class=\"has-text-align-left\">Sophia uses Python-style layout rules to group declarations and statements. A\nlayout block with more than one element must start on a separate line and be\nindented more than the currently enclosing layout block. Blocks with a single\nelement can be written on the same line as the previous token.</p>\n\n\n\n<p class=\"has-text-align-left\">Each element of the block must share the same indentation and no part of an element may be indented less than the indentation of the block.</p>\n\n\n\n<p class=\"has-text-align-left\">Okay, the first thing we do after that is defining our person and state records and create the <code>init</code>function.<br></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>@compiler >= 4\ncontract AddressBook =\n\n   record person =\n     { first_name : string\n     , last_name : string\n     , age : int }\n\n   record state  = { people : map(address, person) }\n\n   entrypoint init() = { people = {} }</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Let us focus on some info from the sophia documentation so we know what we&#8217;ve done so far:</p>\n\n\n\n<p class=\"has-text-align-left\">Sophia does not have arbitrary mutable state, but only a limited form of\nstate associated with each contract instance.</p>\n\n\n\n<ul><li>Each contract defines a type <code>state</code> encapsulating its mutable state.</li><li>The initial state of a contract is computed by the contract&#8217;s <code>init</code>\nfunction. The <code>init</code> function is <em>pure</em> and returns the initial state as its\nreturn value. At contract creation time, the <code>init</code> function is executed and\nits result is stored as the contract state.</li><li>The value of the state is accessible from inside the contract\nthrough an implicitly bound variable <code>state</code>.</li><li>State updates are performed by calling a function <code>put : state =&gt; ()</code>.</li><li>Aside from the <code>put</code> function (and similar functions for transactions\nand events), the language is purely functional.</li><li>Functions modifying the state need to be annotated with the <code>stateful</code> keyword.</li></ul>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p>A contract may define a type state encapsulating its local state. The state must be initialised when instantiating a contract. This is done by the init function which can take arbitrary arguments and is called on contract instance creation.<br></p><cite>sophia documentation</cite></blockquote>\n\n\n\n<p class=\"has-text-align-left\">We now have to create setter function for saving person&#8217;s details, and getter functions for getting them.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>   stateful entrypoint add_person(person_address: address, first_name': string, last_name': string, age: int) =\n      let new_person : person =\n         { first_name = first_name',\n           last_name = last_name',\n           age = age }\n      put(state{ people[person_address] = new_person })</code></pre>\n\n\n\n<p class=\"has-text-align-left\"><s>For</s> our <s>getter </s><g class=\"gr_ gr_31 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"31\" data-gr-id=\"31\"><s>functions</s></g><s> we will need a helper function which will allow us to easily search in </s><g class=\"gr_ gr_149 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-del replaceWithoutSep\" id=\"149\" data-gr-id=\"149\"><s>the </s></g><code>map</code><g class=\"gr_ gr_149 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-del replaceWithoutSep\" id=\"149\" data-gr-id=\"149\"> <s>we</s></g><s>&#8216;ve created</s>.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><strike>function lookupByAddress(k : address, m, v) =\n      switch(Map.lookup(k, m))\n         None    =&gt; v\n         Some(x) =&gt; x</strike></code></pre>\n\n\n\n<p class=\"has-text-align-left\">and our getters:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>   entrypoint get_person(person_address : <em>address</em>) : person = \n      switch(Map.lookup(person_address, <em>state</em>.people))\n         <em>None</em> =&gt; abort(\"No data for that person\")\n         <em>Some</em>(person_found) =&gt; person_found</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Now we are done with the smart contract. It should look like this:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/87bd736e39440155873a973426a548a8.js\"></script><figcaption>AddressBook.aes &#8211; aeternity smart contract</figcaption></figure>\n\n\n\n<h2>Compile Sophia ML contracts</h2>\n\n\n\n<p class=\"has-text-align-left\">Compiling sophia smart contracts is done via:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject compile</code></pre>\n\n\n\n<p class=\"has-text-align-left\">And if everything went well we should see a similar output</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"793\" height=\"543\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-compile-output.png\" alt=\"Compiling sophia smart contract\" class=\"wp-image-486\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-compile-output.png 793w, https://hack.bg/wp-content/uploads/2019/01/forgae-compile-output-300x205.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-compile-output-768x526.png 768w\" sizes=\"(max-width: 793px) 100vw, 793px\" /><figcaption>Compiling sophia smart contract</figcaption></figure></div>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p><g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"14\" data-gr-id=\"14\">The </g><strong><code>compile</code></strong><g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"14\" data-gr-id=\"14\"> command</g> compiles Sophia contract. It&#8217;s recommended to <g class=\"gr_ gr_31 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"31\" data-gr-id=\"31\">use </g><strong><code>.aes</code></strong><g class=\"gr_ gr_31 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"31\" data-gr-id=\"31\"> <g class=\"gr_ gr_30 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep\" id=\"30\" data-gr-id=\"30\">file</g></g> extension. <g class=\"gr_ gr_52 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep\" id=\"52\" data-gr-id=\"52\">Default</g> directory <g class=\"gr_ gr_60 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"60\" data-gr-id=\"60\">is </g><code>$projectDir/contracts</code><g class=\"gr_ gr_60 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"60\" data-gr-id=\"60\">.</g> The result of the compilation is the contract bytecode printed in the console. <g class=\"gr_ gr_44 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins doubleReplace replaceWithoutSep\" id=\"44\" data-gr-id=\"44\">Additional</g> <strong><code>--path</code></strong> parameter is available, which can specify the path to the contract to be compiled.</p></blockquote>\n\n\n\n<h2>Writing Unit Tests<br></h2>\n\n\n\n<p class=\"has-text-align-left\">First, we need to edit our deployment script, so it knows which contracts should be using. We only replace <g class=\"gr_ gr_170 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"170\" data-gr-id=\"170\"><g class=\"gr_ gr_104 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del\" id=\"104\" data-gr-id=\"104\">the</g> </g><code>ExampleContract</code><g class=\"gr_ gr_170 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"170\" data-gr-id=\"170\"> with</g> our <g class=\"gr_ gr_171 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"171\" data-gr-id=\"171\">own </g><code>AddressBook</code><g class=\"gr_ gr_171 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"171\" data-gr-id=\"171\"> </g><g class=\"gr_ gr_172 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"172\" data-gr-id=\"172\"><g class=\"gr_ gr_171 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"171\" data-gr-id=\"171\">in</g> </g><code>./deployments/deploy.js</code><g class=\"gr_ gr_172 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"172\" data-gr-id=\"172\">.</g> It should now look like this:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/6040c299a84fea0c81217e8721d11fd8.js\"></script><figcaption>AddressBook.aes deployment script</figcaption></figure>\n\n\n\n<p style=\"text-align:left\"><strike>You probably have noticed that we pass the <code>address</code> as <code>0xe9bbf604e611b5460a3b3999e9771b6f60417d73ce7c5519e12f7e127a1225ca</code> instead of aeternity&#8217;s <code>ak_2mwRmUeYmfuW93ti9HMSUJzCk1EYcQEfikVSzgo6k2VghsWhgU</code>. That is because sophia is using the bytes hex representation of our base58 encoded address. We can use <code>aecli</code> to decode our address and prepend <code>0x</code> afterwards :</strike></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><strike><code>aecli crypto decode ak_2mwRmUeYmfuW93ti9HMSUJzCk1EYcQEfikVSzgo6k2VghsWhgU</code></strike></pre>\n\n\n\n<p class=\"has-text-align-left\"><s>We should receive this output:</s></p>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p><strike>Decoded address (hex): e9bbf604e611b5460a3b3999e9771b6f60417d73ce7c5519e12f7e127a1225ca</strike></p></blockquote>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"809\" height=\"349\" src=\"https://hack.bg/wp-content/uploads/2019/01/aecli-crypto-decode.png\" alt=\"aecli crypto decode aeternity address\" class=\"wp-image-493\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/aecli-crypto-decode.png 809w, https://hack.bg/wp-content/uploads/2019/01/aecli-crypto-decode-300x129.png 300w, https://hack.bg/wp-content/uploads/2019/01/aecli-crypto-decode-768x331.png 768w\" sizes=\"(max-width: 809px) 100vw, 809px\" /><figcaption>aecli crypto decode aeternity address</figcaption></figure></div>\n\n\n\n<p class=\"has-text-align-left\">Writing unit test for aeternity sophia smart contract is similar to writing unit tests for Ethereum solidity smart contract.</p>\n\n\n\n<p class=\"has-text-align-left\"><strike>The interesting and thing is passing arguments to functions. As you can see, we are now passing <g class=\"gr_ gr_12 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-del replaceWithoutSep\" id=\"12\" data-gr-id=\"12\">the our</g> args<code>address</code><g class=\"gr_ gr_17 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"17\" data-gr-id=\"17\">,</g><code>first_name</code><g class=\"gr_ gr_17 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"17\" data-gr-id=\"17\">,</g><code>last_name</code><g class=\"gr_ gr_17 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"17\" data-gr-id=\"17\">,</g> <g class=\"gr_ gr_25 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"25\" data-gr-id=\"25\">and </g><code>age</code><g class=\"gr_ gr_25 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"25\" data-gr-id=\"25\"> as</g> tuple string.</strike></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><strike>      args: `(${address}, \"${first_name}\", \"${last_name}\", ${age})`,</strike></pre>\n\n\n\n<p class=\"note\"><em>Note</em>: If you are passing <g class=\"gr_ gr_13 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins doubleReplace replaceWithoutSep\" id=\"13\" data-gr-id=\"13\">string</g>, do not forget to add quotes (<code>\"</code>) around the string too (<code>(\"Some string\")</code>). More than one parameter can be passed separated by coma (<code>(\"Some string\", 123, 45, \"Other string\")</code>))deploy</p>\n\n\n\n<p class=\"has-text-align-left\"><strike>Another quite handy thing is that the function call result comes with <g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"5\" data-gr-id=\"5\">built </g><g class=\"gr_ gr_91 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"91\" data-gr-id=\"91\"><g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"5\" data-gr-id=\"5\">in</g> </g><code>decode()</code><g class=\"gr_ gr_91 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"91\" data-gr-id=\"91\"> function</g>, which you can use for decoding the function output by passing the type you want to decode it to e.g. primitives like <code>int</code> , <code>string</code> <g class=\"gr_ gr_93 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"93\" data-gr-id=\"93\">or </g><code>bool</code><g class=\"gr_ gr_93 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"93\" data-gr-id=\"93\">.</g> This is quite important for our unit tests so we know how we are going to <code>assert</code> the results.</strike></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><s>    const addPersonResult = await addPerson.decode('bool');</s></pre>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/2d679aadd9cabc1ac296399354c87562.js\"></script><figcaption>AddressBook aepp unit tests</figcaption></figure>\n\n\n\n<p class=\"has-text-align-left\">Now if we run <code>aeproject test</code> we should see our unit tests output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject test</code></pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests.png\" alt=\"forgae test output - addressbook aepp\" class=\"wp-image-491\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>forgae test output &#8211; addressbook aepp</figcaption></figure></div>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p class=\"has-text-align-left\">Writing smart contracts on Sophia is very intuitive if you have previous experience writing smart contracts or experience with programming languages like Python.<br></p>\n\n\n\n<p class=\"has-text-align-left\">We will continue this series with some more sophisticated examples which will include deployment on testnet and mainnet and more soon. If you don&#8217;t want to miss the new content &#8211; join our <a href=\"http://eepurl.com/gcxyRj\">newsletter</a> to receive all our new content.</p>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<ul><li><a href=\"https://meetup.com/blockchain-developers-meetup-bulgaria\">Blockchain Developers Meetup</a></li><li><a href=\"https://facebook.com/BlockchainDevelopersMeetup\">FacebookGroup</a></li><li><a href=\"http://linkedin.com/company/hack-blockchain-development/\">LinkedIn</a></li><li><a href=\"https://twitter.com/hack_bg\">Twitter</a></li></ul>\n\n\n\n<h4>Resources</h4>\n\n\n\n<ul><li><a href=\"http://github.com/mradkov/addressbook-aepp-aeternity\">AddressBook <g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\">aepp</g> &#8211; Github Repo of the project</a></li><li><a href=\"https://github.com/aeternity/protocol\">Aeternity protocol <g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"7\" data-gr-id=\"7\">github</g></a></li><li><a href=\"http://forum.aeternity.com/\">Aeternity forum</a></li></ul>\n","excerpt":"<p>Æternity blockchain is live after long period of waiting, the community is big and the core developers are top skilled. [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2018-07-17T12:52:35","id":"151","title":"Aeternity Starfleet Incubator: Demo Day 2 — a sip of inspiration","path":"/blog/aeternity-starfleet-incubator-demo-day-2-a-sip-of-inspiration/","content":"\n<p>Last saturday we went to watch the second demo day and pitching of the projects participated in the first <a href=\"https://medium.com/@aeventures\" target=\"_blank\" rel=\"noopener\" data-href=\"https://medium.com/@aeventures\"><strong>Æternity Ventures Starfleet Incubator</strong></a>.</p>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2018/12/3e24a-1WXUQMCKasBJ4cX6N0ev9CA.jpeg\" alt=\"\"/><figcaption>Image credits: Aeternity Ventures&nbsp;Twitter</figcaption></figure></div>\n\n\n\n<h3>Æternity is a blockchain 3.0</h3>\n\n\n\n<p>Æternity Blockchain is a new blockchain technology platform for scalable smart contracts founded by <strong><a href=\"https://twitter.com/noyyy\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">Yanislav Malahov</a></strong> also known as the “<a rel=\"noopener\" data-href=\"https://medium.com/@yanislav/king-of-bitcoin-godfather-of-ethereum-a9af9ecf56d5\" href=\"https://medium.com/@yanislav/king-of-bitcoin-godfather-of-ethereum-a9af9ecf56d5\" target=\"_blank\">Godfather of Ethereum</a>”. They are offering very tempting and long way needed new features in the blockchain for security and scalability of the decentralized applications, such as <strong>built-in decentralized</strong> <strong>oracles </strong>allowing world data to flow into the blockchain, <strong>state channels </strong>and turing-complete <strong>smart contracts</strong>.</p>\n\n\n\n<p>Also it is worth to mention the Æternity blockchain is incorporating the <strong>Bitcoin NG protocol </strong>— a next generation blockchain protocol designed to scale, and the <strong>Cuckoo Cycle</strong> Proof-of-Work (POW) algorithm which is a memory-intensive mining algorithm that improves mining decentralization.</p>\n\n\n\n<p>They are launching their <strong>Mainnet</strong> soon, so stay tuned for their great project.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Æternity Starfleet — series of incubator and accelerator programs</h3>\n\n\n\n<p>You may know about the initiative the company started and the first wave of the <strong>blockchain incubator</strong> which was in Sofia, Bulgaria.</p>\n\n\n\n<p>The 10 best teams from all over the world were pitching their projects:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>&#8211; <a href=\"https://www.facebook.com/tipme.org/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.facebook.com/tipme.org/\">Tip me</a>&nbsp;: transparent workers tipping based on blockcain(Berlin,GER)<br>&#8211; <a href=\"https://www.facebook.com/ampnetproject/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.facebook.com/ampnetproject/\">AMPnet</a>: blockchain platform for trading electricity (Zagreb,CRO)<br>&#8211; The Noble Company: blockchain based referal system for recruitment(Sofia,BG)&nbsp;<br>&#8211; <a href=\"https://www.facebook.com/tradexsocial/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.facebook.com/tradexsocial/\">TraDEXsocial</a>: frictionaless way to introduce people to crypto(Sofija,BG)<br>&#8211; <a href=\"https://www.facebook.com/ututrust/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.facebook.com/ututrust/\">UTU</a>: trust infrastructure for the sharing economy(Nairobi, Kenya)<br>&#8211; <a href=\"https://www.facebook.com/RideSafeAfrica/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.facebook.com/RideSafeAfrica/\">RideSafe</a>: micro-insurance platform for motorcycle riders (Nairobi,Kenya)<br>&#8211; <a href=\"https://www.facebook.com/yair.berlin/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.facebook.com/yair.berlin/\">YAIR Berlin</a>: platform for trading and experiencing art (Berlin,Germany)<br>&#8211; Data2Honey&nbsp;: decentralised IOT data marketplace(Ljubljana,SLO)<br>&#8211; <a href=\"https://www.facebook.com/tribecreationplatform/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.facebook.com/tribecreationplatform/\">Tribe Creation Platform</a>: decentralized music crowdfuding platform (Vienna, Austria)&nbsp;<br>&#8211; <a href=\"https://www.facebook.com/BeeSmartTechnologies/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.facebook.com/BeeSmartTechnologies/\">Bee Smart Technologies</a>: blockchain based pollination marketplace (Sofia, BG)</p></blockquote>\n\n\n\n<p>All of those projects were great, but it was clear that some of them stood out infront of the others.</p>\n\n\n\n<p>Some of them got our attention as well with their briliant and inovative ideas.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Æternity Team gave a few minutes talk with some update on the aeternity blockchain development, which was great.</p>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2018/12/3d699-1D7aj5YbApugEX1ZwZyuT1Q@2x.jpeg\" alt=\"\"/><figcaption>Æternity blockchain</figcaption></figure></div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>We also met with Karoline von Tschurtschenthaler — Managing Director of <a href=\"http://dstoq.com/\" target=\"_blank\" rel=\"noopener\" data-href=\"http://dstoq.com/\"><strong>DSTOQ</strong></a> and discussed some interesting topics. Also we got ourselves a priority card for their MVP so we can test it out.</p>\n\n\n\n<p>For those of you who doesn’t know about DSTOQ — they are regulated securities exchange where you can invest real-world assets using crypto. You can learn more at their website.</p>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2018/12/b7644-1NKc-nex8PpiQbphS_HvptA@2x.jpeg\" alt=\"\"/><figcaption>Karoline von Tschurtschenthaler from DSTOQ is talking about their goals and achievments</figcaption></figure></div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3><strong>The winners</strong></h3>\n\n\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">Time for great news!! Congratulations to team <a href=\"https://twitter.com/UTU_trust?ref_src=twsrc%5Etfw\">@UTU_trust</a> for securing a funding of $200 000 from us!! Not just that but our partner network will also invest additional $50 000!!! Congrats guys!!! We can’t wait to see you evolve 👌🤘 <a href=\"https://t.co/TBtQGmy18D\">pic.twitter.com/TBtQGmy18D</a></p>\n<p>&mdash; æternity Ventures (@aeventures) <a href=\"https://twitter.com/aeventures/status/1018141461311840257?ref_src=twsrc%5Etfw\">July 14, 2018</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">It is not a final if we don’t include team Croatia🤘🇭🇷Congrats are in line also for team AMPNet!! They will receive $100 000 funding to get their project running!! <a href=\"https://twitter.com/hashtag/blockchaintechnology?src=hash&amp;ref_src=twsrc%5Etfw\">#blockchaintechnology</a> <a href=\"https://twitter.com/hashtag/blockchain?src=hash&amp;ref_src=twsrc%5Etfw\">#blockchain</a> <a href=\"https://twitter.com/hashtag/startup?src=hash&amp;ref_src=twsrc%5Etfw\">#startup</a> <a href=\"https://twitter.com/hashtag/aeternitystarfleet?src=hash&amp;ref_src=twsrc%5Etfw\">#aeternitystarfleet</a> <a href=\"https://t.co/HG2V8U2Nkl\">pic.twitter.com/HG2V8U2Nkl</a></p>\n<p>&mdash; æternity Ventures (@aeventures) <a href=\"https://twitter.com/aeventures/status/1018141804414361602?ref_src=twsrc%5Etfw\">July 14, 2018</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\n\n<p>And the rest of the projects (7) received a pool of a 1 000 000 $, funds which will be splitted among all of them.</p>\n\n\n\n<div class=\"wp-block-image wp-caption\"><figure class=\"aligncenter\"><img src=\"https://hack.bg/wp-content/uploads/2018/12/a1691-18Pr1MUHhdWqnJLNcP3p-Qw.jpeg\" alt=\"\"/><figcaption>Image credits: Aeternity Ventures&nbsp;Twitter</figcaption></figure></div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Was a great day, great event and great initiative!</p>\n","excerpt":"<p>Last saturday we went to watch the second demo day and pitching of the projects participated in the first Æternity [&hellip;]</p>\n","categories":[{"id":"7","title":"News","path":"/category/news/"},{"id":"52","title":"Apperances","path":"/category/apperances/"}],"author":{"name":"Milen","path":"/author/milen/"}}}]}}},"context":{}}