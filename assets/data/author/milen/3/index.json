{"hash":"03ecf60e0b3906b2c4222f0a39c860d56b92073b","data":{"author":{"name":"Milen","id":"1","path":"/author/milen/","description":"Milen Radkov has experience building and delivering successful complex software systems and projects for both big enterprises and small startups. Being actively developing across different blockchain protocols, platforms and projects for the past 5 years, he has gained extensive experience in blockchain development, architectures, consensus algorithms and token economics. Milen is a well-known figure in the blockchain space.","avatars":{"avatar96":"https://secure.gravatar.com/avatar/63bdbea3561bd85c90aae3479975040a?s=96&d=identicon&r=g"},"belongsTo":{"pageInfo":{"totalPages":5,"currentPage":3},"edges":[{"node":{"date":"2019-03-26T20:00:10","id":"849","title":"hack partners with WeAreDevelopers","path":"/blog/hack-partners-with-wearedevelopers/","content":"\n<ul class=\"wp-block-gallery aligncenter columns-1 is-cropped\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"800\" height=\"529\" src=\"https://hack.bg/wp-content/uploads/2018/12/9e4e9-189_upggrFy2lWJHAchWPhQ.jpeg\" alt=\"\" data-id=\"173\" data-link=\"https://hack.bg/blog/events/blockchain-developers-meetup-0x03%e2%80%8a-%e2%80%8alivecoding-workshop/attachment/9e4e9-189_upggrfy2lwjhachwphq/\" class=\"wp-image-173\" srcset=\"https://hack.bg/wp-content/uploads/2018/12/9e4e9-189_upggrFy2lWJHAchWPhQ.jpeg 800w, https://hack.bg/wp-content/uploads/2018/12/9e4e9-189_upggrFy2lWJHAchWPhQ-300x198.jpeg 300w, https://hack.bg/wp-content/uploads/2018/12/9e4e9-189_upggrFy2lWJHAchWPhQ-768x508.jpeg 768w, https://hack.bg/wp-content/uploads/2018/12/9e4e9-189_upggrFy2lWJHAchWPhQ-408x270.jpeg 408w, https://hack.bg/wp-content/uploads/2018/12/9e4e9-189_upggrFy2lWJHAchWPhQ-250x165.jpeg 250w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Blockchain Developers Meetup Bulgaria</figcaption></figure></li></ul>\n\n\n\n<p>The most important value of our developer community <g class=\"gr_ gr_217 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"217\" data-gr-id=\"217\">are</g> the people like you, the ones reading this article and the ones taking part in our meetups, helping us spread the word about blockchain technology not only in Bulgaria but also around the world. Without <g class=\"gr_ gr_441 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"441\" data-gr-id=\"441\">you</g> we would not have gone so far. On those <g class=\"gr_ gr_552 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"552\" data-gr-id=\"552\">meetups</g> we met wonderful people and got exiting conversations. </p>\n\n\n\n<p>We have been organizing the <a href=\"https://hack.bg/events/\">Blockchain Developers Meetup</a> in Bulgaria for almost a year now and our community has grown rapidly, contributing to the whole global blockchain ecosystem, gathering great developers as well as technical and business people.</p>\n\n\n\n<p>Despite being locally organized just in Sofia, Bulgaria, our events are having a global reach and are attended by people from all over the world &#8211; Argentina, Germany, Spain, USA, and South Korea. It is needless to say that every next meetup of ours is a new thrilling adventure.</p>\n\n\n\n<p>Since we started building this community, lots of different people, companies, and organizations have been contacting us with different requests and opportunities. One of them was &#8211; <a href=\"http://wearedevelopers.com\">WeAreDevelopers</a> &#8211; World&#8217;s largest Developers Congress.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Developers congress</h3>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"800\" height=\"484\" src=\"https://hack.bg/wp-content/uploads/2019/03/wearedevelopers-berlin-2019.jpg\" alt=\"\" class=\"wp-image-856\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/wearedevelopers-berlin-2019.jpg 800w, https://hack.bg/wp-content/uploads/2019/03/wearedevelopers-berlin-2019-300x182.jpg 300w, https://hack.bg/wp-content/uploads/2019/03/wearedevelopers-berlin-2019-768x465.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>WeAreDevelopers World Congress &#8211; CityCube Berlin</figcaption></figure></div>\n\n\n\n<p>Dubbed as &#8220;Woodstock of Developers&#8221;, since inception in 2015, <g class=\"gr_ gr_131 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"131\" data-gr-id=\"131\">WeAreDevelopers</g> congress has been bringing together developers, engineers, IT decision-makers, and enthusiasts to share their challenges, knowledge, and experiences with one another.</p>\n\n\n\n<figure class=\"wp-block-embed-youtube aligncenter wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/WMPpOY_a900?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div><figcaption>WeAreDevelopers Congress</figcaption></figure>\n\n\n\n<p>The congress was attended by the most innovative and tech-driving people such as <a href=\"http://twitter.com/stevewoz\">Steve Wozniak</a> (co-founder of <a href=\"http://apple.com\">Apple</a>), <a href=\"http://twitter.com/aantonop\">Andreas Antonopoulos</a> (<a href=\"https://github.com/bitcoinbook/bitcoinbook\">Mastering Bitcoin </a>author), various tech companies developers &#8211; <a href=\"http://microsoft.com\">Microsoft</a>, <a href=\"http://github.com\">Github</a>, Google, <a href=\"http://netflix.com\">Netflix</a> <g class=\"gr_ gr_279 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"279\" data-gr-id=\"279\">and</g> others.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>With <strong>10,000 people,</strong>more than <strong>200 speakers </strong>on various stages, the WeAreDevelopers World Congress 2019 is the largest of its kind. The CityCube at Messe Berlin will host workshops, talks, panel discussions and live coding sessions with top speakers. Deepen your knowledge about topics like <strong>IoT, Blockchain, Gaming, Robotics &amp; AI</strong>. Experience the latest technologies live &amp; network directly with local developers on the largest developer playground! </p></blockquote>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>So why are we telling you all this?<br></p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Partnership</h2>\n\n\n\n<p>WeAreDevelopers reached out to us to help them maximize the impact of the Congress and strengthen tech community network within the CEE region.</p>\n\n\n\n<p>This partnership brings a special treat for our community as well.</p>\n\n\n\n<p>We have <strong>2 tickets</strong> for this year&#8217;s WeAreDevelopers World Congress 2019, happening on June 6-7 in Berlin, Germany, <strong>to give away</strong> to two lucky members of our community (you?).</p>\n\n\n\n<p>Here&#8217;s what the ticket includes:</p>\n\n\n\n<ul><li>Admission to both days</li><li>Access to all keynotes</li><li>Access to 96 workshops (pre-registration required)</li><li>Admission to the official afterparty</li><li>Entry to the expo area</li><li>Entry to our developer playground</li><li>Free co-working space</li><li>Startup Pitching</li><li>Congress goodies</li><li>Access to the official recorded talks</li></ul>\n\n\n\n<h3>Participate</h3>\n\n\n\n<p>Hopefully, we&#8217;ve got your attention and you are now wondering how to participate?</p>\n\n\n\n<p>There are two ways you can participate in the give away:</p>\n\n\n\n<ol><li>First &#8211; share your <g class=\"gr_ gr_11 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling multiReplace\" id=\"11\" data-gr-id=\"11\">favourite</g> content from our blog in your social media channels with a short text (answering the question &#8220;Why?&#8221;) and tag us adding the <strong>#hacktribe</strong> hashtag. (be creative)</li><li>Second &#8211; create <g class=\"gr_ gr_167 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"167\" data-gr-id=\"167\">valuable</g> piece of content for our community and send it to us at events@hack.bg. Example could be a tutorial, guest blog post related to <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep\" id=\"10\" data-gr-id=\"10\">blockchain</g>, video explainer or something else. 🙂</li></ol>\n\n\n\n<p>We will announce the winners on the first of May (01.05.2019).</p>\n\n\n\n<p>Those of you who are impatient to wait or don&#8217;t believe in their luck can book their tickets directly. Our community members can use a <strong>-25% discount code</strong> by entering (<strong>BLOCKCHAIN-DEVELOPERS-25</strong>).</p>\n\n\n\n<p>Thank you for being part of our great community!</p>\n","excerpt":"<p>The most important value of our developer community are the people like you, the ones reading this article and the [&hellip;]</p>\n","categories":[{"id":"5","title":"Events","path":"/category/events/"},{"id":"71","title":"Meet-ups","path":"/category/meetups/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-03-26T12:22:06","id":"757","title":"How to run your own Aeternity node on Amazon AWS","path":"/blog/how-to-run-your-own-aeternity-node-on-amazon-aws/","content":"\n<p>Hey there,</p>\n\n\n\n<p>So you are new to <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\"><g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\"><a href=\"http://aeternity.com\">aeternity</a></g></g> blockchain and want to run a node of your own, but you don&#8217;t have powerful enough hardware or you don&#8217;t want to bully your laptop.</p>\n\n\n\n<p>After thinking a while you decide to run it on an Amazon AWS VPS instance, but you are not sure how to set everything up &#8211; well you&#8217;ve come to the right place.</p>\n\n\n\n<p>After registering, setting up your account and logging in for the first time you are presented with this AWS Management Console screen. </p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.00-1024x640.png\" alt=\"\" class=\"wp-image-758\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.00-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.00-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.00-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.00-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.00.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>Scroll down a bit and select &#8220;<strong>Launch a virtual machine</strong>&#8220;.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.19-1024x640.png\" alt=\"\" class=\"wp-image-759\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.19-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.19-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.19-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.19-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.19.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>Then in the search bar type &#8220;ubuntu&#8221; and hit enter.</p>\n\n\n\n<p>Aeternity has a node release for ubuntu so Ubuntu 18.04 will be best suitable for the purpose of launching our own node without much headaches.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.59-1024x640.png\" alt=\"\" class=\"wp-image-760\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.59-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.59-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.59-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.59-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.24.59.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>After the search loads, we select Ubuntu Server 18.04 (the first one).</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.24-1024x640.png\" alt=\"\" class=\"wp-image-761\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.24-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.24-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.24-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.24-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.24.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>As you may know, Amazon gives you 12 months of free tier usage for some of its services and as it happens t2.micro tier <g class=\"gr_ gr_4 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"4\" data-gr-id=\"4\">vps</g> type is eligible for this.</p>\n\n\n\n<p><strong>BUT</strong></p>\n\n\n\n<p>It is worth mentioning that if we choose the free tier we won&#8217;t have enough CPU time (<g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"5\" data-gr-id=\"5\">amazon</g> has limited the <g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"7\" data-gr-id=\"7\">cpu</g> time that the free tier can use) to sync with the whole <g class=\"gr_ gr_112 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"112\" data-gr-id=\"112\">aeternity</g> blockchain.</p>\n\n\n\n<p>So we now have a few options here:</p>\n\n\n\n<ul><li>proceed with the free t2.micro tier, sync the blockchain on our local pc and then upload it to the AWS instance </li><li>proceed with the free t2.micro tier, set everything up and then upgrade the tier when we hit the CPU time limit</li><li>or the easiest one &#8211; just select t3.nano or above we are good to go (it won&#8217;t cost <g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del\" id=\"5\" data-gr-id=\"5\">us</g> much, as it charges only on usage).</li></ul>\n\n\n\n<p>For the purpose of this tutorial I will be proceeding with the second option as it will give you a better overview of the whole procedure than the rest.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.36-1024x640.png\" alt=\"\" class=\"wp-image-762\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.36-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.36-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.36-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.36-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.25.36.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>After selecting the tier type we click &#8220;Review and Launch&#8221; button to continue.<br></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.16-1024x640.png\" alt=\"\" class=\"wp-image-764\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.16-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.16-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.16-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.16-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.16.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>Then we click the &#8220;Launch&#8221; button. We are being asked to choose a keypair that will be used for SSH-ing into the instance or create a new one.</p>\n\n\n\n<p>Select &#8220;Create a new key pair&#8221; and then name it as you like. I named mine <code>aeternity</code>, so if you&#8217;ve selected another name, adjust the next commands accordingly. </p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.40-1024x640.png\" alt=\"\" class=\"wp-image-765\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.40-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.40-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.40-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.40-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.40.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption><br></figcaption></figure></div>\n\n\n\n<p>Download the key pair and click &#8220;Launch instance&#8221;.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.58-1024x640.png\" alt=\"\" class=\"wp-image-766\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.58-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.58-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.58-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.58-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.26.58.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>Our new vps instance is now launching.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.15-1024x640.png\" alt=\"\" class=\"wp-image-767\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.15-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.15-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.15-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.15-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.15.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.18-1024x640.png\" alt=\"\" class=\"wp-image-768\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.18-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.18-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.18-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.18-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.18.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.38-1024x640.png\" alt=\"\" class=\"wp-image-769\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.38-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.38-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.38-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.38-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.38.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>While waiting for our AWS EC2 instance to fire, we can visit the <a href=\"http://github.com/aeternity/aeternity\">Aeternity blockchain Github repo</a> and search for the latest <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aeternity</g> node <a href=\"http://github.com/aeternity/aeternity/releases/latest\">release</a>.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.50-1024x640.png\" alt=\"\" class=\"wp-image-770\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.50-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.50-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.50-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.50-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.27.50.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>Our AWS instance is already up and running. Now we need to connect to it via SSH and start setting up our aeternity node.</p>\n\n\n\n<p>Select the instance and click &#8220;Connect&#8221;.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.28.53-1024x640.png\" alt=\"\" class=\"wp-image-771\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.28.53-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.28.53-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.28.53-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.28.53-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.28.53.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>We are now provided with instructions on how to connect to our vps via SSH. If you are using Windows machine &#8211; you can use PuTTY or another SSH client that you are used to.</p>\n\n\n\n<p>I&#8217;m running on OSx, so I will proceed with the tutorial via Mac&#8217;s terminal. It should be the same so don&#8217;t worry.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.03-1024x640.png\" alt=\"\" class=\"wp-image-772\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.03-1024x640.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.03-300x188.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.03-768x480.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.03-922x576.png 922w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.03.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>Amazon asks us to change the<code>chmod</code>level of the file so the first thing we do is:</p>\n\n\n\n<p><code>chmod 400 aeternity.pem</code></p>\n\n\n\n<p>Note that the key pair file I&#8217;ve downloaded to my home folder so if you&#8217;ve downloaded your somewhere else &#8211; adjust this accordingly to your path.</p>\n\n\n\n<p>The next command also should be adjusted according to your <code>.pem</code> file location and the public DNS that Amazon provided for your instance.</p>\n\n\n\n<p>You should be able to see the exact commands on the screen above.</p>\n\n\n\n<p><code>ssh -i \"aeternity.pem\" ubuntu@ec2-54-159-117.255.compute-1.amazonaws.com</code></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"581\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.38.png\" alt=\"\" class=\"wp-image-773\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.38.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.38-300x189.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.38-768x485.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.29.38-912x576.png 912w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"581\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.11.png\" alt=\"\" class=\"wp-image-774\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.11.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.11-300x189.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.11-768x485.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.11-912x576.png 912w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<p>Now we are into our fresh launched Amazon AWS instance.</p>\n\n\n\n<p>In order for us to run aeternity node on Ubuntu 18.04 we need to install a few libraries beforehand.</p>\n\n\n\n<p><code>sudo apt-get install libsodium23</code></p>\n\n\n\n<p><code>sudo apt-get install libssl1.0.0</code></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"598\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.51.png\" alt=\"\" class=\"wp-image-775\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.51.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.51-300x195.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.51-768x499.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.31.51-886x576.png 886w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<p>Then we download the latest node release from the aeternity&#8217;s github that we checked in the beginning.</p>\n\n\n\n<p><code>wget https://github.com/aeternity/aeternity/releases/download/v5.5.0/aeternity-5.5.0-ubuntu-x86_64.tar.gz</code></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"598\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.41.44.png\" alt=\"\" class=\"wp-image-776\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.41.44.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.41.44-300x195.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.41.44-768x499.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.41.44-886x576.png 886w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<p>We need to create a directory where our aeternity node will be placed:</p>\n\n\n\n<p><code>mkdir aeternity</code></p>\n\n\n\n<p>and then extract the release archive in it:</p>\n\n\n\n<p> <code>tar -xvzf aeternity-5.5.0-ubuntu-x86_64.tar.gz -C aeternity</code></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"598\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.35.png\" alt=\"\" class=\"wp-image-780\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.35.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.35-300x195.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.35-768x499.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.35-886x576.png 886w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"598\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.54.png\" alt=\"\" class=\"wp-image-781\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.54.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.54-300x195.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.54-768x499.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.54-886x576.png 886w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<p>Enter the directory via <code>cd aeternity</code>.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"598\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.58.png\" alt=\"\" class=\"wp-image-782\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.58.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.58-300x195.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.58-768x499.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.43.58-886x576.png 886w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<p>We now can start our aeternity node via:</p>\n\n\n\n<p><code>bin/aeternity start</code></p>\n\n\n\n<p>As you can see we can get a warning related to the maximum number of open files, so we execute <code>ulimit -n 24576</code> and then start again.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"598\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.03.png\" alt=\"\" class=\"wp-image-784\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.03.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.03-300x195.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.03-768x499.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.03-886x576.png 886w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<p>For stopping the node we execute <code>bin/aeternity stop</code></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"598\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.13.png\" alt=\"\" class=\"wp-image-785\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.13.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.13-300x195.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.13-768x499.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.13-886x576.png 886w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<p>If we want to see if our node is up and running we can make a simple <code>curl</code> request:</p>\n\n\n\n<p><code>curl http://127.0.0.1:3013/v2/blocks/top</code></p>\n\n\n\n<p>If you get some JSON like this &#8211; it means we are good to go.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"920\" height=\"598\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.53.png\" alt=\"\" class=\"wp-image-786\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.53.png 920w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.53-300x195.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.53-768x499.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.46.53-886x576.png 886w\" sizes=\"(max-width: 920px) 100vw, 920px\" /></figure></div>\n\n\n\n<p>As you can notice the Aeternity node is working on TCP port <code>3013</code> so we need to allow that in our instance&#8217;s network settings.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"645\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.01-1024x645.png\" alt=\"\" class=\"wp-image-787\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.01-1024x645.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.01-300x189.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.01-768x484.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.01-914x576.png 914w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.01.png 1386w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>We select the instance then click &#8220;Actions&#8221; and navigate to &#8220;Networking&#8221; -&gt; &#8220;Change Security Groups&#8221;.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"645\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.33-1024x645.png\" alt=\"\" class=\"wp-image-788\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.33-1024x645.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.33-300x189.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.33-768x484.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.33-914x576.png 914w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.50.33.png 1386w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>We create <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"4\" data-gr-id=\"4\">new</g> security group called &#8220;<g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aeternity</g>&#8221; and add new Custom TCP rule in the Inbound traffic tab for the <g class=\"gr_ gr_57 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"57\" data-gr-id=\"57\">port </g><code>3013</code><g class=\"gr_ gr_57 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"57\" data-gr-id=\"57\">.</g></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"645\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.07-1024x645.png\" alt=\"\" class=\"wp-image-789\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.07-1024x645.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.07-300x189.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.07-768x484.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.07-914x576.png 914w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.07.png 1386w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"645\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.19-1024x645.png\" alt=\"\" class=\"wp-image-790\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.19-1024x645.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.19-300x189.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.19-768x484.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.19-914x576.png 914w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.51.19.png 1386w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"645\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.11-1024x645.png\" alt=\"\" class=\"wp-image-792\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.11-1024x645.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.11-300x189.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.11-768x484.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.11-914x576.png 914w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.11.png 1386w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>Then we add this to our instance.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"645\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.30-1024x645.png\" alt=\"\" class=\"wp-image-791\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.30-1024x645.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.30-300x189.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.30-768x484.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.30-914x576.png 914w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.30.png 1386w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>We can check if it&#8217;s working by accessing it in our browser at the following address:<br><br><code>our_instance_public_dns_that_amazon_provided_for_us:3013/v2/status</code></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"645\" src=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.38-1024x645.png\" alt=\"\" class=\"wp-image-793\" srcset=\"https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.38-1024x645.png 1024w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.38-300x189.png 300w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.38-768x484.png 768w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.38-914x576.png 914w, https://hack.bg/wp-content/uploads/2019/03/Screenshot-2019-03-14-at-16.52.38.png 1386w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p>You now have a running Aeternity node on AWS. Cheers ! 🙂</p>\n","excerpt":"<p>Hey there, So you are new to aeternity blockchain and want to run a node of your own, but you [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"},{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-02-28T22:31:17","id":"715","title":"Parachains and Smart Contracts &#8211; 03. [Sofia Polkadot]","path":"/blog/parachains-and-smart-contracts-03-sofia-polkadot/","content":"\n<p>Time goes by and this week we have reached the time for our 3rd Polkadot meetup. </p>\n\n\n\n<p>We are always happy to share with our community cutting edge technologies and best practices when using specific tools and protocols.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0553-1024x678.jpg\" alt=\"\" class=\"wp-image-720\" srcset=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0553-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/02/DSC_0553-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/02/DSC_0553-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/02/DSC_0553-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Milen Radkov presenting at Polkadot Sofia meetup</figcaption></figure></div>\n\n\n\n<h2>Parachains and Smart Contracts</h2>\n\n\n\n<p>This time the focus was on <strong>parachains</strong> and more specifically how they differ from the typical smart contracts, that we all are used to. What are the benefits? How to develop them and what are they good for? <br></p>\n\n\n\n<p>Milen Radkov had prepared for us some exciting presentation. Let&#8217;s find out!<br></p>\n\n\n\n<p>For those of you who could not attend we would like to give you the meetup plan. This time we had 2 parts. On the first <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">part</g> we <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">talked</g> how things in Polkadot work in theory and on the second part we focused on the code and the tools that are doing the magic.<br></p>\n\n\n\n<p>We started with the well know to all blockchain developers Smart Contracts functions. When we think about it &#8211; it is really cool that one can write a dApp and push it to the network without permission, knowing that this app will live “forever” without worrying that somebody is going to change his logic, but we all know that the current solutions are not perfect. We are also limited by the computational complexity and the price that we have to pay for it. Not to mention that your code is good to go forever but only on one chain.<br></p>\n\n\n\n<blockquote style=\"text-align:center\" class=\"wp-block-quote is-style-large\"><p> So what are the alternatives? </p></blockquote>\n\n\n\n<p>And why are we excited to follow the development of projects like Polkadot.</p>\n\n\n\n<ul><li>In Polkadot transactions are unmetered /so you can have extremely complex state transition functions and never have to think about running out of gas/</li><li>Parachains are like building your own blockchain and not have to think about security, because of the shared security mechanism that Polkadot provides</li><li>One can trust the Polkadot validator set that they are securing the chain</li><li>Interoperability &#8211; you can message between all the different <g class=\"gr_ gr_9 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"9\" data-gr-id=\"9\">parachains</g> /message passing/ async</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>In the second part of the meetup, we deep dived into the code to discover the advantages of using Polakot and Substrate. For those of you who are new to Polkadot, Substrate is a framework allowing us to build entirely new blockchain only in few commands, stepping up on Polkadot&#8217;s development and helping us developers to focus on our business logic.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0564-1024x678.jpg\" alt=\"\" class=\"wp-image-721\" srcset=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0564-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/02/DSC_0564-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/02/DSC_0564-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/02/DSC_0564-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Substrate module example</figcaption></figure></div>\n\n\n\n<p>During the code review, <a href=\"http://twitter.com/milen_radkov\">Milen</a> showed us how quick it is to run a custom <g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"5\" data-gr-id=\"5\">parachain</g> with a simple betting game ruining on it. (this was first shown by Gavin Wood at the Web3 Summit in Berlin a few months ago &#8211; see the <a href=\"https://substrate.readme.io/docs/creating-a-custom-substrate-chain\">full tutorial</a>).</p>\n\n\n\n<p>He walked us trough the code and explained briefly with the syntax and structure of the substrate project.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Watch the recording of the session here:</p>\n\n\n\n<figure class=\"wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<figure><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9dSlsW6yMNU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></figure>\n</div></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Resources</h2>\n\n\n\n<ul><li><a href=\"https://docs.google.com/presentation/d/11HAdR3WOqaPiBjCi2XbJYiYptCf53pXQnwXWaTwf9kE/edit?usp=sharing\">Presentation</a></li><li><a href=\"https://substrate.readme.io/\">Substrate documentation</a></li><li><a href=\"http://polkadot.network\">Polkadot website</a></li><li><a href=\"https://youtu.be/9dSlsW6yMNU\">Video recording</a></li><li><a href=\"https://www.meetup.com/sofia-polkadot/\">Polkadot Sofia Meetup</a></li></ul>\n\n\n\n<p></p>\n","excerpt":"<p>Time goes by and this week we have reached the time for our 3rd Polkadot meetup. We are always happy [&hellip;]</p>\n","categories":[{"id":"5","title":"Events","path":"/category/events/"},{"id":"71","title":"Meet-ups","path":"/category/meetups/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-02-21T12:18:59","id":"694","title":"0x07. Aeternity Sophia ML workshop &#8211; [Blockchain Developers Meetup]","path":"/blog/0x07-aeternity-sophia-ml-workshop-blockchain-developers-meetup/","content":"\n<p>Hey guys, </p>\n\n\n\n<p>Yesterday we had our 7th Blockchain Developers Meetup this time dedicated to <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">Aeternity&#8217;s</g> Sophia smart contract language.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0512-1024x678.jpg\" alt=\"\" class=\"wp-image-698\" srcset=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0512-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/02/DSC_0512-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/02/DSC_0512-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/02/DSC_0512-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Blockchain Developers Meetup 0x07 Aeternity Sophia workshop</figcaption></figure></div>\n\n\n\n<p>For those of you who couldn&#8217;t attend or miss it &#8211; here is a brief summary of what we discussed and what we covered, also all of the resources.</p>\n\n\n\n<h2>Blockchain developers digest</h2>\n\n\n\n<p>As usual we&#8217;ve started our meetup with an overview of the blockchain ecosystem from the developers perspective.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0516-1024x678.jpg\" alt=\"\" class=\"wp-image-699\" srcset=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0516-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/02/DSC_0516-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/02/DSC_0516-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/02/DSC_0516-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Hristo&#8217;s blockchain developers digest</figcaption></figure></div>\n\n\n\n<p><a href=\"http://twitter.com/HG34470538\">Hristo</a> walked us <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">trought</g> the recent blockchain developers news digest,  and explained some of the most important ones:</p>\n\n\n\n<ul><li>Ethereum Hard Fork &#8211; Constantinople and Petersburg</li><li><a href=\"http://aeternity.com\">Aeternity</a> Minerva Protocol Update Release</li><li>Bitcoin BIP174 &#8211; Partially Signed Bitcoin Transaction (PSBT)</li><li>LeapDAO MVP /More Viable Plasma/</li><li>Monoplasma&nbsp;</li><li>Baidu Blockchain Engine (BBE) Platform</li><li><a href=\"http://weidex.market\">WeiDex &nbsp;Developments</a></li></ul>\n\n\n\n<p>After the blockchain developers news digest, it was time to step into Sophia ML. </p>\n\n\n\n<h2>Sophia ML presentation</h2>\n\n\n\n<p><a href=\"http://twitter.com/milen_radkov\">Milen</a> covered the specifications of the language, showing a simple smart contract, and talking about the different types and built-in functions we have in Sophia.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0523-1024x678.jpg\" alt=\"\" class=\"wp-image-700\" srcset=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0523-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/02/DSC_0523-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/02/DSC_0523-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/02/DSC_0523-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Sophia types and Built-in functions</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"572\" src=\"https://hack.bg/wp-content/uploads/2019/02/solidity-sophia-comparison-1024x572.png\" alt=\"\" class=\"wp-image-696\" srcset=\"https://hack.bg/wp-content/uploads/2019/02/solidity-sophia-comparison-1024x572.png 1024w, https://hack.bg/wp-content/uploads/2019/02/solidity-sophia-comparison-300x168.png 300w, https://hack.bg/wp-content/uploads/2019/02/solidity-sophia-comparison-768x429.png 768w, https://hack.bg/wp-content/uploads/2019/02/solidity-sophia-comparison-1031x576.png 1031w, https://hack.bg/wp-content/uploads/2019/02/solidity-sophia-comparison.png 1278w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Solidity vs Sophia smart contract comparison</figcaption></figure></div>\n\n\n\n<p>He talked about what <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">improvemets</g> can we expect to be introduced with the following Minerva update &#8211; such as safe arithmetical operations and more.</p>\n\n\n\n<h2>Workshop</h2>\n\n\n\n<p>For the workshop part, <a href=\"http://twitter.com/milen_radkov\">Milen</a> had prepared an Auction smart contract both in Solidity and in Sophia and walked us through every single detail, explaining and comparing the two of them.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0527-1024x678.jpg\" alt=\"\" class=\"wp-image-701\" srcset=\"https://hack.bg/wp-content/uploads/2019/02/DSC_0527-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/02/DSC_0527-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/02/DSC_0527-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/02/DSC_0527-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Milen showing the differences between Solidity and Sophia</figcaption></figure></div>\n\n\n\n<p>The auction had functions for placing a bid, refunding losing bids, withdrawing the winning bid by the owner of the auction and a function to cancel the auction.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"700\" src=\"https://hack.bg/wp-content/uploads/2019/02/auction-aepp-partial-1024x700.png\" alt=\"\" class=\"wp-image-697\" srcset=\"https://hack.bg/wp-content/uploads/2019/02/auction-aepp-partial-1024x700.png 1024w, https://hack.bg/wp-content/uploads/2019/02/auction-aepp-partial-300x205.png 300w, https://hack.bg/wp-content/uploads/2019/02/auction-aepp-partial-768x525.png 768w, https://hack.bg/wp-content/uploads/2019/02/auction-aepp-partial-842x576.png 842w, https://hack.bg/wp-content/uploads/2019/02/auction-aepp-partial.png 1056w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Sophia Auction aepp &#8211; partial code</figcaption></figure></div>\n\n\n\n<p>Milen covered the syntax specifics of the Sophia Language. Function definitions and how can we create ourselves helper functions to use as modifiers and more.</p>\n\n\n\n<p>The whole code you can get from the <g class=\"gr_ gr_85 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"85\" data-gr-id=\"85\">github</g> repo provided below in the resources.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Watch the recording here:</p>\n\n\n\n<figure class=\"wp-block-embed-youtube aligncenter wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/d0poB9Lznig?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div><figcaption>Aeternity Sophia Language Workshop &#8211; 0x07 [Blockchain Developers Meetup]</figcaption></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Resources</h3>\n\n\n\n<ul><li>Hristo&#8217;s presentation &#8211; <a href=\"https://docs.google.com/presentation/d/1otzLc6VgEHt2ynJJeQ9mCMy0HhmfcYxflN9V1UtvL7Q/edit?usp=sharing\">blockchain developers digest</a></li><li>Milen&#8217;s presentation &#8211; <a class=\"\" href=\"https://docs.google.com/presentation/d/1-uO8caNV2HytPKNDh53WGkYBjqfmKShC310WDSIfdDg/edit?usp=sharing\"><g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\">Aeternity&#8217;s</g> Sophia Language</a></li><li>Github repo of the workshop&#8217;s project &#8211; <a href=\"https://github.com/mradkov/auction-aepp\">Auction <g class=\"gr_ gr_9 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"9\" data-gr-id=\"9\">aepp</g> with Sophia</a></li><li><a href=\"https://github.com/aeternity/protocol/blob/minerva/contracts/sophia.md\">Sophia specification/documentation</a></li><li><a href=\"https://hack.bg/blog/blockchain-tech-talks/aeternity-sophia-language-visual-studio-code-extension/\">Sophia Visual Studio Code syntax highlighter extension</a></li><li><a href=\"https://youtu.be/d0poB9Lznig\">Video recording of the meetup</a></li></ul>\n\n\n\n<h3>Follow us</h3>\n\n\n\n<ul><li><a href=\"https://meetup.com/blockchain-developers-meetup-bulgaria\">Blockchain Developers Meetup</a></li><li><a href=\"https://twitter.com/hack_bg\">Twitter</a></li><li><a href=\"https://linkedin.com/in/company/hack-blockchain-development\">Linkedin</a></li><li><a href=\"https://hack.bg\">Website</a></li></ul>\n","excerpt":"<p>Hey guys, Yesterday we had our 7th Blockchain Developers Meetup this time dedicated to Aeternity&#8217;s Sophia smart contract language. For [&hellip;]</p>\n","categories":[{"id":"71","title":"Meet-ups","path":"/category/meetups/"},{"id":"5","title":"Events","path":"/category/events/"},{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-02-19T11:42:04","id":"678","title":"Aeternity Sophia Language &#8211; Visual Studio Code Extension","path":"/blog/aeternity-sophia-language-visual-studio-code-extension/","content":"\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://hack.bg/wp-content/uploads/2019/02/aeternity-sophia-lang-vscode-extension-1024x576.png\" alt=\"Aeternity Sophia Language Visual Studio Code Extension\" class=\"wp-image-688\" srcset=\"https://hack.bg/wp-content/uploads/2019/02/aeternity-sophia-lang-vscode-extension-1024x576.png 1024w, https://hack.bg/wp-content/uploads/2019/02/aeternity-sophia-lang-vscode-extension-300x169.png 300w, https://hack.bg/wp-content/uploads/2019/02/aeternity-sophia-lang-vscode-extension-768x432.png 768w, https://hack.bg/wp-content/uploads/2019/02/aeternity-sophia-lang-vscode-extension.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Aeternity Sophia Language Visual Studio Code Extension</figcaption></figure>\n\n\n\n<h3>Just a quick update.</h3>\n\n\n\n<blockquote class=\"wp-block-quote is-style-large\"><p>We&#8217;ve created a Visual Studio code extension for Aeternity&#8217;s Sophia Language.</p></blockquote>\n\n\n\n<p>We felt the need for this, after having to write some Sophia smart contracts in visual studio code.</p>\n\n\n\n<p>After searching a while, we didn&#8217;t find anything released nor developed yet in regards to helping to highlight the code or show typos, so we decided to create it and help the community of blockchain developers out there, that might be struggling writing Aeternity&#8217;s Sophia smart contracts.</p>\n\n\n\n<p>Currently the extension only supports syntax highlighting the code, but we have planned some features for the nearest future to be added:</p>\n\n\n\n<ul><li>Syntax highlighting</li><li>Code snippets</li><li>Shortcut for fast compilation of the current <g class=\"gr_ gr_81 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"81\" data-gr-id=\"81\">sophia</g> smart contract</li><li>Shortcut for compiling all smart contracts in the project directory</li><li>Code completion</li><li>Default project structure</li><li>and more&#8230;</li></ul>\n\n\n\n<p>The extension could be found in the vscode marketplace and also here:</p>\n\n\n\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=MilenRadkov.sophia\">https://marketplace.visualstudio.com/items?itemName=MilenRadkov.sophia</a></p>\n\n\n\n<p>Also &#8211; this extension is open source, so any contributions, ideas <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-ins replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">and</g> suggestions are more than welcome here in the github repo:</p>\n\n\n\n<p><a href=\"https://github.com/mradkov/vscode-sophia\">https://github.com/mradkov/vscode-sophia</a></p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p><em>Update</em>: People wanted to donate some tokens for our efforts in the <g class=\"gr_ gr_92 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"92\" data-gr-id=\"92\">aeternity</g> community, so we are providing here a public address for this:<br><br><a href=\"https://www.aeknow.org/address/wallet/ak_2VjbtcY2jNj3zg3BXzDA2bNBAqT78NFsfBorER9mPg9gCXtcxa\">ak_2VjbtcY2jNj3zg3BXzDA2bNBAqT78NFsfBorER9mPg9gCXtcxa</a></p>\n","excerpt":"<p>Just a quick update. We&#8217;ve created a Visual Studio code extension for Aeternity&#8217;s Sophia Language. We felt the need for [&hellip;]</p>\n","categories":[{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/"},{"id":"7","title":"News","path":"/category/news/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-01-31T01:48:38","id":"589","title":"Blockchain Developers Meetup 0x06 &#8211; Jump Oriented Programming in Ethereum Smart Contract","path":"/blog/blockchain-developers-meetup-0x06-jump-oriented-programming-in-ethereum-smart-contract/","content":"\n<p>Hey you, fellow blockchain developer. If you&#8217;ve missed out our 0x06 monthly meetup which happened last week (22.01.2019) &#8211; here is some interesting stuff for you to catch up.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2246-1024x678.jpg\" alt=\"\" class=\"wp-image-591\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2246-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/01/DSC_2246-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/DSC_2246-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/01/DSC_2246-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Blockchain Developers Meetup 0x06 &#8211; Jump Oriented Programming in Ethereum Smart Contract</figcaption></figure></div>\n\n\n\n<h2>What happened recently</h2>\n\n\n\n<p>As always we discussed what interesting happened from developers perspective during the month. We got out focus on the last minute postponed Constantinople Ethereum fork.</p>\n\n\n\n<h3>Constantinople Ethereum fork postponed</h3>\n\n\n\n<p>As it turns out <a href=\"http://chainsecurity.com\">Chain Security</a>, a company focused on research and security of smart contracts, found a vulnerability that might result <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar multiReplace\" id=\"5\" data-gr-id=\"5\">to</g> bigger issues and re-enabling <g class=\"gr_ gr_67 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling\" id=\"67\" data-gr-id=\"67\">re-entrancy</g> attacks on some smart contracts after the fork.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"488\" height=\"256\" src=\"https://hack.bg/wp-content/uploads/2019/01/fork.png\" alt=\"\" class=\"wp-image-592\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/fork.png 488w, https://hack.bg/wp-content/uploads/2019/01/fork-300x157.png 300w\" sizes=\"(max-width: 488px) 100vw, 488px\" /><figcaption>fork</figcaption></figure></div>\n\n\n\n<p>Summarizing this &#8211; <a href=\"https://eips.ethereum.org/EIPS/eip-1283\">EIP1283</a> which is introducing cheaper gas costs <g class=\"gr_ gr_163 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"163\" data-gr-id=\"163\">for </g><code>SSTORE</code><g class=\"gr_ gr_163 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"163\" data-gr-id=\"163\"> operations</g> may result in reentrancy vulnerability for some smart contracts.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Contracts that increase their probability to being vulnerable are contracts that utilize a <em>transfer()</em> or <em>send()</em>  function followed by a state-changing operation. An example of such a  contract would be one where two parties jointly receive funds, decide on  how to split said funds, and initiate a payout of those funds.</p></blockquote>\n\n\n\n<p>And the brief explanation: The issue is that when a <code>CALL</code> is made to transfer funds, even if the caller hasn&#8217;t specified additional gas, will spend 2300 gas. <g class=\"gr_ gr_268 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"268\" data-gr-id=\"268\">Solidity&#8217;s </g><code>.transfer()</code><g class=\"gr_ gr_268 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"268\" data-gr-id=\"268\"> function</g> does this and provides no option for the user to override that.</p>\n\n\n\n<p>And this has not been an issue previously, because even though with 2300 gas the caller could make a <code>CALL</code> from the callee<g class=\"gr_ gr_20 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep\" id=\"20\" data-gr-id=\"20\">,</g><g class=\"gr_ gr_20 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style replaceWithoutSep\" id=\"20\" data-gr-id=\"20\">but</g> there was no way to change a storage entry <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\">when </g><code>SSTORE</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> costs</g> 5000 gas.</p>\n\n\n\n<p>But now after Constantinople and the EIP-<g class=\"gr_ gr_35 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"35\" data-gr-id=\"35\">1283</g> the <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">cheapest </g><code>SSTORE</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> operation</g> is 200 gas, which opens up a non-zero possibility of <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">re-entrancy</g> attacks on some smart contracts.  </p>\n\n\n\n<h2>Jump Oriented Programming in Ethereum<br></h2>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2250-1024x678.jpg\" alt=\"\" class=\"wp-image-590\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2250-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/01/DSC_2250-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/DSC_2250-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/01/DSC_2250-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Exploiting Acoraida Monica game</figcaption></figure></div>\n\n\n\n<p>As the title suggests it &#8211; the whole topic that we went through is quite catchy. We initially saw this thing called Jump Oriented Programming in Ethereum last month, is quite well explained in a couple of great videos by LiveOverflow in his YouTube channel. So we got in touch with him and Milen Radkov presented this at the meetup.</p>\n\n\n\n<p>We saw how we can make a Solidity smart contract misbehave, making it acting different, hiding what exactly is it doing.</p>\n\n\n\n<p>The whole thing is based on carefully selected function names, and specifically chosen address in order for the execution to succeed (in this case making it possible to withdraw and drain the whole contract).<br></p>\n\n\n\n<h3>Resources</h3>\n\n\n\n<ul><li><a href=\"https://gist.github.com/LiveOverflow/21c8a505ca176e5bb20bc94eb23acdf1\">Github repo with all the example code</a></li><li><a href=\"https://www.youtube.com/watch?v=ozqOlUVKL1s&amp;t=1s\">LiveOverflow video part one</a></li><li><a href=\"https://www.youtube.com/watch?v=RfL3FcnVbJg\">LiveOverflow video part two</a></li><li>video recording of the meetup coming soon</li></ul>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<ul><li><a href=\"https://meetup.com/blockchain-developers-meetup-bulgaria\">Blockchain Developers Meetup</a></li><li><a href=\"https://hack.bg\">Website</a></li></ul>\n","excerpt":"<p>Hey you, fellow blockchain developer. If you&#8217;ve missed out our 0x06 monthly meetup which happened last week (22.01.2019) &#8211; here [&hellip;]</p>\n","categories":[{"id":"5","title":"Events","path":"/category/events/"},{"id":"71","title":"Meet-ups","path":"/category/meetups/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-01-28T09:36:38","id":"433","title":"How to setup our environment for developing on Ethereum","path":"/blog/how-to-setup-our-environment-for-developing-on-ethereum/","content":"\n<p class=\"has-drop-cap\">There are lots of tutorials on the Internet for developing decentralized applications, smart contracts and write unit test with Solidity on the Ethereum blockchain. Including a <a href=\"https://hack.bg/category/blog/tutorials/\">few of our own</a>, for that matter. </p>\n\n\n\n<p>BUT a large part of them lack the initial environment setup, that is needed for someone just arriving in the blockchain space with a bag full of questions, wondering where the heck to start from. </p>\n\n\n\n<p>So, after a series of questions received regarding this topic, I&#8217;m writing this, hoping, to help you out setup your ethereum solidity development environment if you are completely new to this space.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<ul><li>Windows, macOS, Linux computer or laptop</li><li>Internet connection</li><li>patience &#8230; 🙂</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>macOS <g class=\"gr_ gr_34 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling\" id=\"34\" data-gr-id=\"34\">se</g>tup<br></h2>\n\n\n\n<p>For macOS, ensure that you have the latest version of\n<a href=\"https://developer.apple.com/xcode/download/\">Xcode installed</a>.\nThis contains the <a href=\"https://en.wikipedia.org/wiki/Clang\">Clang C++ compiler</a>, the\n<a href=\"https://en.wikipedia.org/wiki/Xcode\">Xcode IDE</a> and other Apple development\ntools which are required for building C++ applications on OS X.\nIf you are installing Xcode for the first time, or have just installed a new\nversion then you will need to agree to the license before you can do\ncommand-line builds:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>sudo xcodebuild -license accept</code></pre>\n\n\n\n<p>Ethereum Solidity OS X builds require you have <a href=\"http://brew.sh\">Homebrew</a> package manager installed for installing external dependencies.</p>\n\n\n\n<p>Install Homebrew:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>brew update</code></pre>\n\n\n\n<p>Install node and NPM (Node Package Manager) using brew &#8211; npm will be automatically installed with node:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>brew install node</code></pre>\n\n\n\n<p>Then we can proceed with installing <code>solc</code> which is the Solidity command-line compiler.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g solc</code></pre>\n\n\n\n<p>After that we install <code>truffle</code> framework and <code>ganache-cli</code> which will be our primary tools for compiling, testing and deployment.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g truffle</code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install -g ganache-cli</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Windows setup</h2>\n\n\n\n<p>We need to install several things for a windows environment. The first one is git for windows &#8211; it&#8217;s a command-line tool for retrieving source code from Github. <g class=\"gr_ gr_112 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"112\" data-gr-id=\"112\">Next</g> we need to have CMake installed, which is a cross-platform build file generator. And last we have to have a C++ compiler which we can get from Visual Studio Build Tools. The links for these three are below:</p>\n\n\n\n<ul><li><a href=\"https://git-scm.com/download/win\">Git for <g class=\"gr_ gr_48 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"48\" data-gr-id=\"48\">Windows</g></a></li><li><a href=\"https://cmake.org/download/\">CMake</a></li><li><a href=\"https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017\">Visual Studio 2017 Build Tools</a></li></ul>\n\n\n\n<p>After <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">that</g> we can proceed with installing node and <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">then </g><code>solc</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> <g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"14\" data-gr-id=\"14\"><g class=\"gr_ gr_63 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"63\" data-gr-id=\"63\">,</g></g></g><g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"14\" data-gr-id=\"14\"><g class=\"gr_ gr_63 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"63\" data-gr-id=\"63\"> </g></g><code>truffle</code><g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"14\" data-gr-id=\"14\"><g class=\"gr_ gr_63 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"63\" data-gr-id=\"63\"> ,</g></g> <code>ganache-cli</code> like shown in the macOS setup.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><br> Then we can proceed with installing <code>solc</code> which is the Solidity command-line compiler.<br> <br> <br> <code>npm install -g solc</code><br> <br> <br> After that we install <code>truffle</code> framework and <code>ganache-cli</code> which will be our primary tools for compiling, testing and deployment.<br> <br> <br> <code>npm install -g truffle</code><br> <br> <br> <code>npm install -g ganache-cli</code> </p></blockquote>\n","excerpt":"<p>There are lots of tutorials on the Internet for developing decentralized applications, smart contracts and write unit test with Solidity [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"},{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-01-25T22:54:44","id":"570","title":"Polkadot Sofia Meetup #02 &#8211; Recent Development","path":"/blog/polkadot-sofia-meetup-02-recent-development/","content":"\n<p>Dear blockchain fellows, with the kick off of the new year we continue our tradition to deliver interesting, informative and pragmatic content to all of you. Our goal to showcase innovative blockchain technologies led us to the 2nd special Polkadot Sofia meetup that happened earlier this week (21.01.2019). We were honored to have <a href=\"http://twitter.com/ivshti\">Ivo</a> from <a href=\"http://adex.network\">AdEx</a> walking us through their Polkadot Substrate implementation.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2068-1024x678.jpg\" alt=\"\" class=\"wp-image-572\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2068-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/01/DSC_2068-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/DSC_2068-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/01/DSC_2068-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Ivo Georgiev (AdEx) presenting their substrate implementation</figcaption></figure></div>\n\n\n\n<p>For those of you who were not with us at the event, I&#8217;d like to share with you some details. <br></p>\n\n\n\n<p>In the first part we discussed Polkadot&#8217;s past, present and future development and then we left the stage to Ivo to show us more about his work in code.<br></p>\n\n\n\n<h2>Past</h2>\n\n\n\n<p>To get to know what really Polkadot is doing and what it is trying to achieve we collected some data. And as we can see the team has come a long way in a very short period of time. In only thirteen months the team managed to deliver over 68,000 lines of core code and more than 100k lines altogether. They have launched several testnets each of them to support and test all new features. <br></p>\n\n\n\n<h2>Present</h2>\n\n\n\n<p><g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"7\" data-gr-id=\"7\">Currently</g> the team has been working on 1.0 beta of the third generation of <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">blockchain</g> technology stack, Substate. Another cool thing that Polkdot&#8217;s team has been working on is the release of “Alexander” test net. The team is considering this their third major milestone. “Alexander” test net is important because it&#8217;s going to feature the audit-ready GRANDPA finalization algorithm, an overhaul to the cryptography and further improved governance logic including lock-voting and delayed-enactment.<br></p>\n\n\n\n<h2>Future</h2>\n\n\n\n<p>With all the previous development the team is already ahead of schedule but <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">nevertheless</g> there is one more key milestone to reach: </p>\n\n\n\n<p>ICMP or, to the uninitiated, Inter-Chain Message Passing. scheduled to happen over the first three months of 2019, with a test net incorporating it, scheduled to be launched in April. </p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2062-1024x678.jpg\" alt=\"\" class=\"wp-image-575\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2062-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/01/DSC_2062-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/DSC_2062-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/01/DSC_2062-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption> Milen Radkov talking at polkadot sofia</figcaption></figure></div>\n\n\n\n<p>Simultaneously, the team has been <g class=\"gr_ gr_4 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling multiReplace\" id=\"4\" data-gr-id=\"4\">finalising</g> the “nominated proof-of-stake” scheme and building in <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">parachain</g> consensus into Substrate, allowing Substrate chains to plug <g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling multiReplace\" id=\"5\" data-gr-id=\"5\">in to</g> the global blockchain network that is Polkadot.</p>\n\n\n\n<p>After this is done and the key features are implemented, there’s going to be a period of around six months of extensive testing before we can see the launch of Polkadot 1.0. Uhhuu, Exciting future for blockchain technology.<br></p>\n\n\n\n<p>After learning a bit more about the project and its goals we had to see some code, to understand it&#8217;s full power. We had the pleasure to have Ivo to show us what they have been building at AdEx.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"1024\" height=\"678\" src=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2077-1024x678.jpg\" alt=\"\" class=\"wp-image-574\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/DSC_2077-1024x678.jpg 1024w, https://hack.bg/wp-content/uploads/2019/01/DSC_2077-300x199.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/DSC_2077-768x509.jpg 768w, https://hack.bg/wp-content/uploads/2019/01/DSC_2077-870x576.jpg 870w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\n\n\n<p><del>For those of you who didn&#8217;t <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar multiReplace\" id=\"3\" data-gr-id=\"3\">managed</g> to attend, video recording will be uploaded soon.</del></p>\n\n\n\n<p>You can watch the video recording here:</p>\n\n\n\n<figure class=\"wp-block-embed-youtube wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\n<figure>\n<iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VSEnoqA3t68\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><figcaption>Recent Developments &#8211; 02 [Polkadot Sofia Meetup]</figcaption></figure>\n</div></figure>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<ul><li><a href=\"http://polkadot.network/\">Polkadot website</a></li><li><a href=\"https://github.com/w3f/Web3-wiki/wiki/Polkadot\">Polkadot wiki</a></li><li><a href=\"http://adex.network\">AdEx</a></li><li><a href=\"https://www.meetup.com/sofia-polkadot/\">Polkadot Sofia</a></li><li><a href=\"https://www.meetup.com/Blockchain-Developers-Meetup-Bulgaria/\">Blockchain Developers Meetup</a></li></ul>\n","excerpt":"<p>Dear blockchain fellows, with the kick off of the new year we continue our tradition to deliver interesting, informative and [&hellip;]</p>\n","categories":[{"id":"71","title":"Meet-ups","path":"/category/meetups/"},{"id":"5","title":"Events","path":"/category/events/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-01-23T20:11:11","id":"533","title":"Building Voting æpp with Sophia ML on æternity blockchain","path":"/blog/building-voting-aepp-with-sophia-ml-on-aeternity-blockchain/","content":"\n<p>Time is passing by and we are getting more experienced in writing smart contracts with Sophia ML language on æ<g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\">ternity</g> blockchain.</p>\n\n\n\n<p>In this tutorial, I&#8217;d like to share with you a simple voting decentralized <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aepp</g> solution that we&#8217;ve built during the æpps summit in Turkey, which I took part in.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"960\" height=\"540\" src=\"https://hack.bg/wp-content/uploads/2019/01/aepps-summit.jpg\" alt=\"\" class=\"wp-image-542\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/aepps-summit.jpg 960w, https://hack.bg/wp-content/uploads/2019/01/aepps-summit-300x169.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/aepps-summit-768x432.jpg 768w\" sizes=\"(max-width: 960px) 100vw, 960px\" /><figcaption>photo by nikita fuchs</figcaption></figure></div>\n\n\n\n<p>This was one of my first times interacting with Sophia ML smart contracts, and while at the æpps summit I&#8217;ve gathered some cool and enthusiastic people, and made ourselves sort of a studying group. We decided to brainstorm and learn together while developing this voting <g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\">aepp</g>. This is the short summary of what we&#8217;ve decided our voting <g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"7\" data-gr-id=\"7\">aepp</g> will be doing:</p>\n\n\n\n<ol><li>Add candidates to vote for</li><li>Allow users to give their vote for a certain candidate</li><li>Count the votes that every candidate gathered</li></ol>\n\n\n\n<p class=\"note\">You can <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">try</g> push the <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">aepp&#8217;s</g> functionalities further, with more sophisticated functions and use case, you can try doing it <g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"7\" data-gr-id=\"7\">yourself,</g> <g class=\"gr_ gr_25 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"25\" data-gr-id=\"25\">like</g> we did. Try it &#8211; its fun.</p>\n\n\n\n<h2>Setting up project and development <g class=\"gr_ gr_109 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace gr-progress\" id=\"109\" data-gr-id=\"109\">environment</g></h2>\n\n\n\n<p><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">First</g> we have to initialize our project where we will write <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"4\" data-gr-id=\"4\">the smart</g> contract. In order to do that we will be using <code>forgae</code>. Take a look at the <a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\">Build first </a><g class=\"gr_ gr_92 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"92\" data-gr-id=\"92\"><a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\">aeternity</a></g><a href=\"https://hack.bg/blog/tutorials/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/\"> application with Sophia ML tutorial</a> and follow the steps to initialize your project.</p>\n\n\n\n<h2>Smart contract</h2>\n\n\n\n<p>As you probably already know (if you&#8217;ve followed the previous tutorial), in <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">Sophia</g> ML we have a <strong>state</strong> which is the place where we store data on-chain, and it is the only thing in the smart contract that can be mutated (overwritten).</p>\n\n\n\n<p>The first thing we do is to define our variables and types that we are going to use in the smart contract. And <g class=\"gr_ gr_217 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"217\" data-gr-id=\"217\">the </g><code>init()</code><g class=\"gr_ gr_217 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"217\" data-gr-id=\"217\"> function</g> which is the constructor basically, if we compare this to a Solidity smart contract.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>contract Vote =\n   type candidate = address\n   type votes = list(address)\n\n   record state = \n      { vote : map(candidate, votes) }\n\n   public function init() : state = \n      { vote = { } }</code></pre>\n\n\n\n<p>We are defining <g class=\"gr_ gr_263 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"263\" data-gr-id=\"263\">the </g><code>candidate</code><g class=\"gr_ gr_263 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"263\" data-gr-id=\"263\"> type</g> as address, and votes as a <strong>list</strong> of addresses. And the <code>state</code> record will be storing a map (key-value-pair) of <code>candidate</code> to <code>votes</code>.<br></p>\n\n\n\n<p><del>Starting with the first functionality for the aepp &#8211; adding candidates:</del></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><del>  public stateful function add_candidate(candidate: address) : bool =       is_candidate(candidate)       true</del></code></pre>\n\n\n\n<p><del>What this does is passing the candidate to the </del><code><del>is_candiate()</del></code><del> function &#8211; taking a candidate&#8217;s address as a parameter, checking if there is a candidate defined at with this address and saving it to the </del><strong><del>votes</del></strong><del> mapping in the state with the initial empty list of voters if not.</del><br></p>\n\n\n\n<p><del>Here are the helper functions we are using for this:</del></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><del>   private stateful function is_candidate(candidate: address) =       let candidate_found = lookupByAddress(candidate, state.votes, { voters = [] })       if (size(candidate_found.voters) == 0)          put(state{             votes[candidate] = { voters = [] } })    private function lookupByAddress(k : address, m, v) =       switch(Map.lookup(k,m))          None => v          Some(x) => x</del></code></pre>\n\n\n\n<p>We are doing this because in Sophia ML we don&#8217;t have a default value of 0x0/false as in Solidity for example. So, in order for us to cast a vote, we need to first have added the candidates which we can vote for.</p>\n\n\n\n<p class=\"note\">If we don&#8217;t add the candidate first, before voting, we will hit <code>out of gas</code> error.</p>\n\n\n\n<p>Next we create the vote function which looks like this:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>public stateful function vote(vote_for: candidate) =\n      put(state{ vote[vote_for = []] @ vs = Call.caller :: vs })</code></pre>\n\n\n\n<p>We access the transaction initiator&#8217;s address by the <g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">built </g><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\"><g class=\"gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"3\" data-gr-id=\"3\">in</g> </g><code>Call.caller</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> and</g> prepend <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">it </g><code>::</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> to</g> the current list of voters. Using this <g class=\"gr_ gr_23 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"23\" data-gr-id=\"23\">syntx</g> we <g class=\"gr_ gr_32 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"32\" data-gr-id=\"32\">dont</g> need to worry whether the candidate was initialized or not.</p>\n\n\n\n<p><g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"9\" data-gr-id=\"9\">Last</g> thing is the get votes count function.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>public function count_votes(count_for : candidate) =\n      length(state.vote[count_for = []])</code></pre>\n\n\n\n<p>Here we are using a custom <code>length</code> function which we define as a helper function below. Here is the code and below we can see the explanation.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>private function length(l : list('a)) : int = length'(l, 0)\n</code></pre>\n\n\n\n<p>This is where things get a bit more complicated, so I will try to explain what is happening here.</p>\n\n\n\n<p>Since in Sophia ML we don&#8217;t have <code>.count</code> or <code>.length</code> to get the list length, we need to make ourselves a helper function which will make a recursion and will iterate over the list while incrementing a counter.</p>\n\n\n\n<p>The <code>length</code> function is defined to accept a list <g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"9\" data-gr-id=\"9\">of </g><code>'a</code><g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"9\" data-gr-id=\"9\"> which</g> is the convention for a generic <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">type,</g> and a return <g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"11\" data-gr-id=\"11\">type </g><code>int</code><g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"11\" data-gr-id=\"11\"> .</g> In the function&#8217;s <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">body</g> we are calling <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"10\" data-gr-id=\"10\">the </g><code>length'</code><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\"> </g><g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"7\" data-gr-id=\"7\"><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\">function</g>,</g> while passing the list and an initial value for the counter.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>private function length'(l : list('a), x : int) : int =       switch(l)          [] => x          _ :: l' => length'(l', x + 1)</code></pre>\n\n\n\n<p>And here the magic happens, we use <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"6\" data-gr-id=\"6\">the </g><code>switch</code><g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"6\" data-gr-id=\"6\"> statement</g> with 2 cases <code>[] => x</code> &#8211; which returns the value of the counter and breaks the recursion if the list is empty. And <code>_ :: l' => length'(l', x+1)</code> &#8211; meaning we are using a pattern matching and we are separating the first element from the list and the remainder and then recursively passing the list&#8217;s remainder to the same <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">function,</g> while incrementing the counter.</p>\n\n\n\n<p>The whole smart contract code looks like this in the end</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/d05aeb76c59e2098d54dc900e94aaa41.js\"></script><figcaption>Sophia ML basic voting aepp</figcaption></figure>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>It is fairly simple to create a basic aepp on æternity blockchain using Sophia ML. In our case with the ae-vote we stumbled upon some tricky parts like the recursive iteration, we had to make above, but when you familiarize yourself with the language it is easier.</p>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<ul><li><a href=\"https://github.com/mradkov/ae-vote\">Github repo of the project</a></li><li><a href=\"https://github.com/aeternity/protocol/blob/master/contracts/sophia.md\">Sophia documentation</a></li><li><a href=\"https://dev.aepps.com/\">æternity documentation</a></li></ul>\n","excerpt":"<p>Time is passing by and we are getting more experienced in writing smart contracts with Sophia ML language on æternity [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"},{"id":"53","title":"Tech Talks","path":"/category/blockchain-tech-talks/"}],"author":{"name":"Milen","path":"/author/milen/"}}},{"node":{"date":"2019-01-10T10:59:33","id":"449","title":"Build your first decentralized application (aepp) on Aeternity blockchain &#8211; Sophia ML smart contract &#8211; Address Book","path":"/blog/build-your-first-decentralized-application-aepp-on-aeternity-blockchain-sophia-smart-contract-address-book/","content":"\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-1024x576.jpg\" alt=\"Sophia aeternity\" class=\"wp-image-500\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-1024x576.jpg 1024w, https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-300x169.jpg 300w, https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-768x432.jpg 768w, https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity-1025x576.jpg 1025w, https://hack.bg/wp-content/uploads/2019/01/sveta_sofia_aeternity.jpg 1334w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Sophia aeternity</figcaption></figure>\n\n\n\n<p class=\"has-drop-cap has-text-align-left\">Æternity blockchain is live after long period of waiting, the community is big and the core developers are top skilled. The project offers smart contracts development platform for decentralized applications dapps or how they call them &#8211; æpps.</p>\n\n\n\n<p class=\"has-text-align-left\">In this tutorial we are going to create a simple smart contract in Sophia ML programming language &#8211; address book <g class=\"gr_ gr_4 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"4\" data-gr-id=\"4\">aepp</g>. We will create, compile, test and deploy the smart contract.<br></p>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<ul><li><a href=\"https://docs.docker.com/compose/install/\">Docker</a></li><li><s>Forgae</s> <a href=\"https://www.npmjs.com/package/aeproject\">AEproject</a></li><li><a href=\"https://github.com/aeternity/aepp-cli-js\">Aecli</a> * (optional if we want to do something with the sdk like encode/decode address by publicKey or signTx)</li></ul>\n\n\n\n<p class=\"has-text-align-left\">Docker we need for running local aeternity node for compiling, testing and development environment. Assuming you already have <g class=\"gr_ gr_52 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"52\" data-gr-id=\"52\">docker</g> installed on your machine we move on, if not &#8211; please follow the guide in their official website and then continue with the steps below.</p>\n\n\n\n<p class=\"has-text-align-left\"><g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\"><s>Forgae</s> AEproject</g> is <g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"14\" data-gr-id=\"14\">an æternity</g> development framework which helps with setting up a project. The framework makes the development of smart contracts in the <g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\">aeternity</g> network pretty easily. It provides commands for the compilation of smart contracts, running a local Epoch and unit testing the contracts.<br></p>\n\n\n\n<p class=\"has-text-align-left\">We install it globally via:</p>\n\n\n\n<pre><code>npm install -g aeproject</code></pre>\n\n\n\n<p class=\"has-text-align-left\">After installing <s>forgae</s> AEproject we can verify everything went well with <code>aeproject --help</code> which will also get us familiarize with the commands and options it has.</p>\n\n\n\n<pre><code>Usage: aeproject [options] [command]\n\nOptions:\n  -V, --version      output the version number\n  -h, --help         output usage information\n\nCommands:\n  init [options]     Initialize AEProject\n  compile [options]  Compile contracts\n  test [options]     Running the tests\n  node [options]     Running a local node. Without any argument node will be runned with --start argument\n  deploy [options]   Run deploy script</code></pre>\n\n\n\n<p class=\"has-text-align-left\">We are almost done with the setup. The last tool we need is <code>aecli</code> which is æternity&#8217;s JavaScript SDK command-line interface. It is still not available as <g class=\"gr_ gr_693 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"693\" data-gr-id=\"693\">a <g class=\"gr_ gr_691 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"691\" data-gr-id=\"691\">npm</g></g> package, so for us to use it we should clone the repository, install from source and then link it to our local <g class=\"gr_ gr_587 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling\" id=\"587\" data-gr-id=\"587\">npm</g> manually.<br></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>git clone https://github.com/aeternity/aepp-cli-js.git</code></pre>\n\n\n\n<p class=\"has-text-align-left\">We then need to enter into the cloned repository with:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>cd aepp-cli-js</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Run <code>npm link</code> in order to link the AECLI to <code>aecli/bin/aecli.js</code> (<em>If you have any folder permission issues, try running with sudo <code>sudo npm link</code></em>)</p>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p><code>npm link</code> <g class=\"gr_ gr_3 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins doubleReplace replaceWithoutSep\" id=\"3\" data-gr-id=\"3\">command</g> will create a symlink in the global node_modules folder and expose the CLI binary to be used through the terminal.</p><cite>npm link</cite></blockquote>\n\n\n\n<p class=\"has-text-align-left\">and lastly we should run<code>npm install</code> so npm update its packages and symlinks.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>npm install</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Now if everything went well our environment is set and ready to start developing sophia smart contracts on æternity. </p>\n\n\n\n<h3>Project init</h3>\n\n\n\n<p class=\"has-text-align-left\">As always, first we need to create a directory where our project files will be placed:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>mkdir addressbook-aepp</code><br><code>cd addressbook-aepp</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Then we initialize our project with <code>aeproject init</code> which will create for us all the necessary files and directories.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject init</code></pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp.png\" alt=\"Initialization of aeternity aepp with forgae\" class=\"wp-image-461\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-aepp-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>Initialization of aeternity aepp with forgae</figcaption></figure></div>\n\n\n\n<p class=\"has-text-align-left\">If we look at our project directory we will see that we now have <strong>contracts</strong>, <strong>deployment</strong>, <strong>test</strong> directories where our focus will mainly be, as well as other config files like package.json and docker-compose.yml.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory.png\" alt=\"forgae init project directory\" class=\"wp-image-470\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-init-project-directory-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>forgae init project directory</figcaption></figure></div>\n\n\n\n<p class=\"has-text-align-left\">Now we need to <strong>start docker</strong> and then start our local node with:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject node</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p>The <strong>node</strong> command help developers run their <g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"11\" data-gr-id=\"11\">local  network</g> on docker. The local network contains 3 nodes. To spawn a fully functional <g class=\"gr_ gr_12 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"12\" data-gr-id=\"12\">network  takes</g> <g class=\"gr_ gr_8 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"8\" data-gr-id=\"8\">couple</g> of minutes. At the end of this <g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"9\" data-gr-id=\"9\">command</g> you will <g class=\"gr_ gr_13 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"13\" data-gr-id=\"13\">be  presented</g> with accounts that you can use in your unit tests.</p><cite>documentation</cite></blockquote>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-node.png\" alt=\"forgae node initialized successfully\" class=\"wp-image-468\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-node.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>forgae node initialized successfully</figcaption></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding.png\" alt=\"forgae node gives us preset test accounts\" class=\"wp-image-469\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-node-funding-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>forgae node gives us preset test accounts</figcaption></figure></div>\n\n\n\n<p class=\"has-text-align-left\">To stop the local node, simply run</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject node --stop</code></pre>\n\n\n\n<p>Additionally we need to start the local compiler the same way as we start the node.</p>\n\n\n\n<p><code>aeproject compiler</code></p>\n\n\n\n<h2>Write Sophia ML smart contracts</h2>\n\n\n\n<p class=\"has-text-align-left\">When we initialized our project with <code>aeproject init</code> it automatically created for us an <code>ExampleContract.aes</code> file, which name speaks for what it is. Its content looks like this:<br></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>@compiler &gt;= 4\ncontract ExampleContract =\n    type state = ()\n    function main(x : int) = x</code></pre>\n\n\n\n<p class=\"has-text-align-left\">This example contract has one function which accepts a single argument of <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"4\" data-gr-id=\"4\">type </g><code>int</code><g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"4\" data-gr-id=\"4\"> and</g> returns the value of the passed <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">argument </g><code>x</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\">.</g></p>\n\n\n\n<p class=\"has-text-align-left\">If this is your first time looking at Sophia smart contract, you probably notice that it is quite different from Solidity for example, and looks much similar to Python. </p>\n\n\n\n<p class=\"has-text-align-left\"><g class=\"gr_ gr_4 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"4\" data-gr-id=\"4\">Aeternity&#8217;s</g> Sophia is <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar multiReplace\" id=\"5\" data-gr-id=\"5\">a ML</g>-family language. It is strongly typed and has restricted mutable state. <a href=\"https://github.com/aeternity/protocol/blob/master/contracts/sophia.md\">Sophia</a> is developed to be used for creating smart contracts on Aeternity Blockchain, so some of the conventional languages&#8217; features are missing, but other blockchain specific primitives, types and constructions are added and supported.</p>\n\n\n\n<p class=\"has-text-align-left\">Okay, we move on to the fun part. We now hit the delete button and get rid of the <code>ExampleContract.aes</code>. </p>\n\n\n\n<p class=\"has-text-align-left\">We create our <code>AddressBook.aes</code> sophia smart contract in the <code>contracts</code>folder and open it with our favorite editor (in my case VIM).</p>\n\n\n\n<p class=\"has-text-align-left\">We define the name of our smart contract, following the example above:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>contract AddressBook =<br><br></code></pre>\n\n\n\n<p class=\"note\">Note: Indentation is important in Sophia language, so keep that in mind.</p>\n\n\n\n<p class=\"has-text-align-left\">Sophia uses Python-style layout rules to group declarations and statements. A\nlayout block with more than one element must start on a separate line and be\nindented more than the currently enclosing layout block. Blocks with a single\nelement can be written on the same line as the previous token.</p>\n\n\n\n<p class=\"has-text-align-left\">Each element of the block must share the same indentation and no part of an element may be indented less than the indentation of the block.</p>\n\n\n\n<p class=\"has-text-align-left\">Okay, the first thing we do after that is defining our person and state records and create the <code>init</code>function.<br></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>@compiler >= 4\ncontract AddressBook =\n\n   record person =\n     { first_name : string\n     , last_name : string\n     , age : int }\n\n   record state  = { people : map(address, person) }\n\n   entrypoint init() = { people = {} }</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Let us focus on some info from the sophia documentation so we know what we&#8217;ve done so far:</p>\n\n\n\n<p class=\"has-text-align-left\">Sophia does not have arbitrary mutable state, but only a limited form of\nstate associated with each contract instance.</p>\n\n\n\n<ul><li>Each contract defines a type <code>state</code> encapsulating its mutable state.</li><li>The initial state of a contract is computed by the contract&#8217;s <code>init</code>\nfunction. The <code>init</code> function is <em>pure</em> and returns the initial state as its\nreturn value. At contract creation time, the <code>init</code> function is executed and\nits result is stored as the contract state.</li><li>The value of the state is accessible from inside the contract\nthrough an implicitly bound variable <code>state</code>.</li><li>State updates are performed by calling a function <code>put : state =&gt; ()</code>.</li><li>Aside from the <code>put</code> function (and similar functions for transactions\nand events), the language is purely functional.</li><li>Functions modifying the state need to be annotated with the <code>stateful</code> keyword.</li></ul>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p>A contract may define a type state encapsulating its local state. The state must be initialised when instantiating a contract. This is done by the init function which can take arbitrary arguments and is called on contract instance creation.<br></p><cite>sophia documentation</cite></blockquote>\n\n\n\n<p class=\"has-text-align-left\">We now have to create setter function for saving person&#8217;s details, and getter functions for getting them.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>   stateful entrypoint add_person(person_address: address, first_name': string, last_name': string, age: int) =\n      let new_person : person =\n         { first_name = first_name',\n           last_name = last_name',\n           age = age }\n      put(state{ people[person_address] = new_person })</code></pre>\n\n\n\n<p class=\"has-text-align-left\"><s>For</s> our <s>getter </s><g class=\"gr_ gr_31 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"31\" data-gr-id=\"31\"><s>functions</s></g><s> we will need a helper function which will allow us to easily search in </s><g class=\"gr_ gr_149 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-del replaceWithoutSep\" id=\"149\" data-gr-id=\"149\"><s>the </s></g><code>map</code><g class=\"gr_ gr_149 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-del replaceWithoutSep\" id=\"149\" data-gr-id=\"149\"> <s>we</s></g><s>&#8216;ve created</s>.</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code><strike>function lookupByAddress(k : address, m, v) =\n      switch(Map.lookup(k, m))\n         None    =&gt; v\n         Some(x) =&gt; x</strike></code></pre>\n\n\n\n<p class=\"has-text-align-left\">and our getters:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>   entrypoint get_person(person_address : <em>address</em>) : person = \n      switch(Map.lookup(person_address, <em>state</em>.people))\n         <em>None</em> =&gt; abort(\"No data for that person\")\n         <em>Some</em>(person_found) =&gt; person_found</code></pre>\n\n\n\n<p class=\"has-text-align-left\">Now we are done with the smart contract. It should look like this:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/87bd736e39440155873a973426a548a8.js\"></script><figcaption>AddressBook.aes &#8211; aeternity smart contract</figcaption></figure>\n\n\n\n<h2>Compile Sophia ML contracts</h2>\n\n\n\n<p class=\"has-text-align-left\">Compiling sophia smart contracts is done via:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject compile</code></pre>\n\n\n\n<p class=\"has-text-align-left\">And if everything went well we should see a similar output</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"793\" height=\"543\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-compile-output.png\" alt=\"Compiling sophia smart contract\" class=\"wp-image-486\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-compile-output.png 793w, https://hack.bg/wp-content/uploads/2019/01/forgae-compile-output-300x205.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-compile-output-768x526.png 768w\" sizes=\"(max-width: 793px) 100vw, 793px\" /><figcaption>Compiling sophia smart contract</figcaption></figure></div>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p><g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"14\" data-gr-id=\"14\">The </g><strong><code>compile</code></strong><g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"14\" data-gr-id=\"14\"> command</g> compiles Sophia contract. It&#8217;s recommended to <g class=\"gr_ gr_31 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"31\" data-gr-id=\"31\">use </g><strong><code>.aes</code></strong><g class=\"gr_ gr_31 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"31\" data-gr-id=\"31\"> <g class=\"gr_ gr_30 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep\" id=\"30\" data-gr-id=\"30\">file</g></g> extension. <g class=\"gr_ gr_52 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep\" id=\"52\" data-gr-id=\"52\">Default</g> directory <g class=\"gr_ gr_60 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"60\" data-gr-id=\"60\">is </g><code>$projectDir/contracts</code><g class=\"gr_ gr_60 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"60\" data-gr-id=\"60\">.</g> The result of the compilation is the contract bytecode printed in the console. <g class=\"gr_ gr_44 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins doubleReplace replaceWithoutSep\" id=\"44\" data-gr-id=\"44\">Additional</g> <strong><code>--path</code></strong> parameter is available, which can specify the path to the contract to be compiled.</p></blockquote>\n\n\n\n<h2>Writing Unit Tests<br></h2>\n\n\n\n<p class=\"has-text-align-left\">First, we need to edit our deployment script, so it knows which contracts should be using. We only replace <g class=\"gr_ gr_170 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"170\" data-gr-id=\"170\"><g class=\"gr_ gr_104 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del\" id=\"104\" data-gr-id=\"104\">the</g> </g><code>ExampleContract</code><g class=\"gr_ gr_170 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"170\" data-gr-id=\"170\"> with</g> our <g class=\"gr_ gr_171 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"171\" data-gr-id=\"171\">own </g><code>AddressBook</code><g class=\"gr_ gr_171 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"171\" data-gr-id=\"171\"> </g><g class=\"gr_ gr_172 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"172\" data-gr-id=\"172\"><g class=\"gr_ gr_171 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"171\" data-gr-id=\"171\">in</g> </g><code>./deployments/deploy.js</code><g class=\"gr_ gr_172 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"172\" data-gr-id=\"172\">.</g> It should now look like this:</p>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/6040c299a84fea0c81217e8721d11fd8.js\"></script><figcaption>AddressBook.aes deployment script</figcaption></figure>\n\n\n\n<p style=\"text-align:left\"><strike>You probably have noticed that we pass the <code>address</code> as <code>0xe9bbf604e611b5460a3b3999e9771b6f60417d73ce7c5519e12f7e127a1225ca</code> instead of aeternity&#8217;s <code>ak_2mwRmUeYmfuW93ti9HMSUJzCk1EYcQEfikVSzgo6k2VghsWhgU</code>. That is because sophia is using the bytes hex representation of our base58 encoded address. We can use <code>aecli</code> to decode our address and prepend <code>0x</code> afterwards :</strike></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><strike><code>aecli crypto decode ak_2mwRmUeYmfuW93ti9HMSUJzCk1EYcQEfikVSzgo6k2VghsWhgU</code></strike></pre>\n\n\n\n<p class=\"has-text-align-left\"><s>We should receive this output:</s></p>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p><strike>Decoded address (hex): e9bbf604e611b5460a3b3999e9771b6f60417d73ce7c5519e12f7e127a1225ca</strike></p></blockquote>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"809\" height=\"349\" src=\"https://hack.bg/wp-content/uploads/2019/01/aecli-crypto-decode.png\" alt=\"aecli crypto decode aeternity address\" class=\"wp-image-493\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/aecli-crypto-decode.png 809w, https://hack.bg/wp-content/uploads/2019/01/aecli-crypto-decode-300x129.png 300w, https://hack.bg/wp-content/uploads/2019/01/aecli-crypto-decode-768x331.png 768w\" sizes=\"(max-width: 809px) 100vw, 809px\" /><figcaption>aecli crypto decode aeternity address</figcaption></figure></div>\n\n\n\n<p class=\"has-text-align-left\">Writing unit test for aeternity sophia smart contract is similar to writing unit tests for Ethereum solidity smart contract.</p>\n\n\n\n<p class=\"has-text-align-left\"><strike>The interesting and thing is passing arguments to functions. As you can see, we are now passing <g class=\"gr_ gr_12 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-del replaceWithoutSep\" id=\"12\" data-gr-id=\"12\">the our</g> args<code>address</code><g class=\"gr_ gr_17 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"17\" data-gr-id=\"17\">,</g><code>first_name</code><g class=\"gr_ gr_17 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"17\" data-gr-id=\"17\">,</g><code>last_name</code><g class=\"gr_ gr_17 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"17\" data-gr-id=\"17\">,</g> <g class=\"gr_ gr_25 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"25\" data-gr-id=\"25\">and </g><code>age</code><g class=\"gr_ gr_25 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"25\" data-gr-id=\"25\"> as</g> tuple string.</strike></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><strike>      args: `(${address}, \"${first_name}\", \"${last_name}\", ${age})`,</strike></pre>\n\n\n\n<p class=\"note\"><em>Note</em>: If you are passing <g class=\"gr_ gr_13 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins doubleReplace replaceWithoutSep\" id=\"13\" data-gr-id=\"13\">string</g>, do not forget to add quotes (<code>\"</code>) around the string too (<code>(\"Some string\")</code>). More than one parameter can be passed separated by coma (<code>(\"Some string\", 123, 45, \"Other string\")</code>))deploy</p>\n\n\n\n<p class=\"has-text-align-left\"><strike>Another quite handy thing is that the function call result comes with <g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"5\" data-gr-id=\"5\">built </g><g class=\"gr_ gr_91 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"91\" data-gr-id=\"91\"><g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"5\" data-gr-id=\"5\">in</g> </g><code>decode()</code><g class=\"gr_ gr_91 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"91\" data-gr-id=\"91\"> function</g>, which you can use for decoding the function output by passing the type you want to decode it to e.g. primitives like <code>int</code> , <code>string</code> <g class=\"gr_ gr_93 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"93\" data-gr-id=\"93\">or </g><code>bool</code><g class=\"gr_ gr_93 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"93\" data-gr-id=\"93\">.</g> This is quite important for our unit tests so we know how we are going to <code>assert</code> the results.</strike></p>\n\n\n\n<pre class=\"wp-block-preformatted\"><s>    const addPersonResult = await addPerson.decode('bool');</s></pre>\n\n\n\n<figure><script src=\"https://gist.github.com/mradkov/2d679aadd9cabc1ac296399354c87562.js\"></script><figcaption>AddressBook aepp unit tests</figcaption></figure>\n\n\n\n<p class=\"has-text-align-left\">Now if we run <code>aeproject test</code> we should see our unit tests output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\"><code>aeproject test</code></pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"837\" height=\"587\" src=\"https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests.png\" alt=\"forgae test output - addressbook aepp\" class=\"wp-image-491\" srcset=\"https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests.png 837w, https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests-300x210.png 300w, https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests-768x539.png 768w, https://hack.bg/wp-content/uploads/2019/01/forgae-test-sophia-unit-tests-821x576.png 821w\" sizes=\"(max-width: 837px) 100vw, 837px\" /><figcaption>forgae test output &#8211; addressbook aepp</figcaption></figure></div>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p class=\"has-text-align-left\">Writing smart contracts on Sophia is very intuitive if you have previous experience writing smart contracts or experience with programming languages like Python.<br></p>\n\n\n\n<p class=\"has-text-align-left\">We will continue this series with some more sophisticated examples which will include deployment on testnet and mainnet and more soon. If you don&#8217;t want to miss the new content &#8211; join our <a href=\"http://eepurl.com/gcxyRj\">newsletter</a> to receive all our new content.</p>\n\n\n\n<h3>Useful links</h3>\n\n\n\n<ul><li><a href=\"https://meetup.com/blockchain-developers-meetup-bulgaria\">Blockchain Developers Meetup</a></li><li><a href=\"https://facebook.com/BlockchainDevelopersMeetup\">FacebookGroup</a></li><li><a href=\"http://linkedin.com/company/hack-blockchain-development/\">LinkedIn</a></li><li><a href=\"https://twitter.com/hack_bg\">Twitter</a></li></ul>\n\n\n\n<h4>Resources</h4>\n\n\n\n<ul><li><a href=\"http://github.com/mradkov/addressbook-aepp-aeternity\">AddressBook <g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\">aepp</g> &#8211; Github Repo of the project</a></li><li><a href=\"https://github.com/aeternity/protocol\">Aeternity protocol <g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"7\" data-gr-id=\"7\">github</g></a></li><li><a href=\"http://forum.aeternity.com/\">Aeternity forum</a></li></ul>\n","excerpt":"<p>Æternity blockchain is live after long period of waiting, the community is big and the core developers are top skilled. [&hellip;]</p>\n","categories":[{"id":"4","title":"Tutorials","path":"/category/tutorials/"}],"author":{"name":"Milen","path":"/author/milen/"}}}]}}},"context":{}}